
MG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  000034da  0000356e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  0080020c  0080020c  0000367a  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  0000367a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005e7  00000000  00000000  0000385a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003612  00000000  00000000  00003e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001807  00000000  00000000  00007453  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000020f6  00000000  00000000  00008c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004d0  00000000  00000000  0000ad50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008cb  00000000  00000000  0000b220  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a83  00000000  00000000  0000baeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  0000d56e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__ctors_end>
       4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      10:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      3c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      40:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <__vector_16>
      44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_18>
      4c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_19>
      50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      64:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      68:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      6c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      70:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      74:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      78:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_30>
      7c:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_31>
      80:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      84:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      88:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      8c:	03 6e       	ori	r16, 0xE3	; 227
      8e:	db 36       	cpi	r29, 0x6B	; 107
      90:	3d 9a       	sbi	0x07, 5	; 7
      92:	99 99       	sbic	0x13, 1	; 19
      94:	99 3d       	cpi	r25, 0xD9	; 217
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	3e 00       	.word	0x003e	; ????
      9c:	00 00       	nop
      9e:	80 3f       	cpi	r24, 0xF0	; 240
      a0:	08 4a       	sbci	r16, 0xA8	; 168
      a2:	d7 3b       	cpi	r29, 0xB7	; 183
      a4:	3b ce       	rjmp	.-906    	; 0xfffffd1c <__eeprom_end+0xff7efd1c>
      a6:	01 6e       	ori	r16, 0xE1	; 225
      a8:	84 bc       	out	0x24, r8	; 36
      aa:	bf fd       	.word	0xfdbf	; ????
      ac:	c1 2f       	mov	r28, r17
      ae:	3d 6c       	ori	r19, 0xCD	; 205
      b0:	74 31       	cpi	r23, 0x14	; 20
      b2:	9a bd       	out	0x2a, r25	; 42
      b4:	56 83       	std	Z+6, r21	; 0x06
      b6:	3d da       	rcall	.-2950   	; 0xfffff532 <__eeprom_end+0xff7ef532>
      b8:	3d 00       	.word	0x003d	; ????
      ba:	c7 7f       	andi	r28, 0xF7	; 247
      bc:	11 be       	out	0x31, r1	; 49
      be:	d9 e4       	ldi	r29, 0x49	; 73
      c0:	bb 4c       	sbci	r27, 0xCB	; 203
      c2:	3e 91       	ld	r19, -X
      c4:	6b aa       	std	Y+51, r6	; 0x33
      c6:	aa be       	out	0x3a, r10	; 58
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	3f 07       	cpc	r19, r31
      ce:	2c 7a       	andi	r18, 0xAC	; 172
      d0:	a5 ba       	out	0x15, r10	; 21
      d2:	6c c5       	rjmp	.+2776   	; 0xbac <mpu6050_mahonyUpdate+0x368>
      d4:	90 da       	rcall	.-2784   	; 0xfffff5f6 <__eeprom_end+0xff7ef5f6>
      d6:	3b 93       	.word	0x933b	; ????
      d8:	65 fc       	sbrc	r6, 5
      da:	8b bc       	out	0x2b, r8	; 43
      dc:	53 f8       	bld	r5, 3
      de:	10 fd       	sbrc	r17, 0
      e0:	3c 56       	subi	r19, 0x6C	; 108
      e2:	92 83       	std	Z+2, r25	; 0x02
      e4:	4d bd       	out	0x2d, r20	; 45
      e6:	87 9d       	mul	r24, r7
      e8:	3a b6       	in	r3, 0x3a	; 58
      ea:	3d cb       	rjmp	.-2438   	; 0xfffff766 <__eeprom_end+0xff7ef766>
      ec:	c9 bf       	out	0x39, r28	; 57
      ee:	5b be       	out	0x3b, r5	; 59
      f0:	73 da       	rcall	.-2842   	; 0xfffff5d8 <__eeprom_end+0xff7ef5d8>
      f2:	0f c9       	rjmp	.-3554   	; 0xfffff312 <__eeprom_end+0xff7ef312>
      f4:	3f 00       	.word	0x003f	; ????

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf ef       	ldi	r28, 0xFF	; 255
      fc:	d0 e1       	ldi	r29, 0x10	; 16
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
     102:	12 e0       	ldi	r17, 0x02	; 2
     104:	a0 e0       	ldi	r26, 0x00	; 0
     106:	b1 e0       	ldi	r27, 0x01	; 1
     108:	ea ed       	ldi	r30, 0xDA	; 218
     10a:	f4 e3       	ldi	r31, 0x34	; 52
     10c:	00 e0       	ldi	r16, 0x00	; 0
     10e:	0b bf       	out	0x3b, r16	; 59
     110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x14>
     112:	07 90       	elpm	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	ac 30       	cpi	r26, 0x0C	; 12
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0x10>

0000011c <__do_clear_bss>:
     11c:	12 e0       	ldi	r17, 0x02	; 2
     11e:	ac e0       	ldi	r26, 0x0C	; 12
     120:	b2 e0       	ldi	r27, 0x02	; 2
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	a0 3c       	cpi	r26, 0xC0	; 192
     128:	b1 07       	cpc	r27, r17
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
     12c:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <main>
     130:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <_exit>

00000134 <__bad_interrupt>:
     134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <__vector_18>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     138:	1f 92       	push	r1
     13a:	0f 92       	push	r0
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	0f 92       	push	r0
     140:	0b b6       	in	r0, 0x3b	; 59
     142:	0f 92       	push	r0
     144:	11 24       	eor	r1, r1
     146:	2f 93       	push	r18
     148:	8f 93       	push	r24
     14a:	9f 93       	push	r25
     14c:	ef 93       	push	r30
     14e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     150:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
     152:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     154:	e0 91 4e 02 	lds	r30, 0x024E
     158:	ef 5f       	subi	r30, 0xFF	; 255
     15a:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
     15c:	80 91 4f 02 	lds	r24, 0x024F
     160:	e8 17       	cp	r30, r24
     162:	11 f4       	brne	.+4      	; 0x168 <__vector_18+0x30>
     164:	82 e0       	ldi	r24, 0x02	; 2
     166:	08 c0       	rjmp	.+16     	; 0x178 <__vector_18+0x40>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
     168:	89 2f       	mov	r24, r25
     16a:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     16c:	e0 93 4e 02 	sts	0x024E, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	e4 5d       	subi	r30, 0xD4	; 212
     174:	fd 4f       	sbci	r31, 0xFD	; 253
     176:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
     178:	80 93 50 02 	sts	0x0250, r24
}
     17c:	ff 91       	pop	r31
     17e:	ef 91       	pop	r30
     180:	9f 91       	pop	r25
     182:	8f 91       	pop	r24
     184:	2f 91       	pop	r18
     186:	0f 90       	pop	r0
     188:	0b be       	out	0x3b, r0	; 59
     18a:	0f 90       	pop	r0
     18c:	0f be       	out	0x3f, r0	; 63
     18e:	0f 90       	pop	r0
     190:	1f 90       	pop	r1
     192:	18 95       	reti

00000194 <__vector_19>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     194:	1f 92       	push	r1
     196:	0f 92       	push	r0
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	0f 92       	push	r0
     19c:	0b b6       	in	r0, 0x3b	; 59
     19e:	0f 92       	push	r0
     1a0:	11 24       	eor	r1, r1
     1a2:	8f 93       	push	r24
     1a4:	9f 93       	push	r25
     1a6:	ef 93       	push	r30
     1a8:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     1aa:	90 91 4c 02 	lds	r25, 0x024C
     1ae:	80 91 4d 02 	lds	r24, 0x024D
     1b2:	98 17       	cp	r25, r24
     1b4:	61 f0       	breq	.+24     	; 0x1ce <__vector_19+0x3a>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     1b6:	e0 91 4d 02 	lds	r30, 0x024D
     1ba:	ef 5f       	subi	r30, 0xFF	; 255
     1bc:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
     1be:	e0 93 4d 02 	sts	0x024D, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	e4 5f       	subi	r30, 0xF4	; 244
     1c6:	fd 4f       	sbci	r31, 0xFD	; 253
     1c8:	80 81       	ld	r24, Z
     1ca:	8c b9       	out	0x0c, r24	; 12
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <__vector_19+0x3c>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     1ce:	55 98       	cbi	0x0a, 5	; 10
    }
}
     1d0:	ff 91       	pop	r31
     1d2:	ef 91       	pop	r30
     1d4:	9f 91       	pop	r25
     1d6:	8f 91       	pop	r24
     1d8:	0f 90       	pop	r0
     1da:	0b be       	out	0x3b, r0	; 59
     1dc:	0f 90       	pop	r0
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	0f 90       	pop	r0
     1e2:	1f 90       	pop	r1
     1e4:	18 95       	reti

000001e6 <uart_init>:

void uart_init(int b0,int b1)
{
    UCSR1A = 0x00;
     1e6:	10 92 9b 00 	sts	0x009B, r1
    UCSR1B = 0x18;
     1ea:	28 e1       	ldi	r18, 0x18	; 24
     1ec:	20 93 9a 00 	sts	0x009A, r18
    UCSR1C = 0x06;
     1f0:	96 e0       	ldi	r25, 0x06	; 6
     1f2:	90 93 9d 00 	sts	0x009D, r25
 
    UBRR1H = 0;
     1f6:	10 92 98 00 	sts	0x0098, r1
    UBRR1L = b1;//115200(8)
     1fa:	60 93 99 00 	sts	0x0099, r22
	//initializing uart1 bluetooth


	UCSR0A = 0x00;
     1fe:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x18;
     200:	2a b9       	out	0x0a, r18	; 10
    UCSR0C = 0x06;
     202:	90 93 95 00 	sts	0x0095, r25
 
    UBRR0H = 0;
     206:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = b0;//9600(103)
     20a:	89 b9       	out	0x09, r24	; 9

}/* uart_init */
     20c:	08 95       	ret

0000020e <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
     20e:	90 91 4e 02 	lds	r25, 0x024E
     212:	80 91 4f 02 	lds	r24, 0x024F
     216:	98 17       	cp	r25, r24
     218:	19 f4       	brne	.+6      	; 0x220 <uart_getc+0x12>
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	31 e0       	ldi	r19, 0x01	; 1
     21e:	12 c0       	rjmp	.+36     	; 0x244 <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     220:	e0 91 4f 02 	lds	r30, 0x024F
     224:	ef 5f       	subi	r30, 0xFF	; 255
     226:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
     228:	e0 93 4f 02 	sts	0x024F, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	e4 5d       	subi	r30, 0xD4	; 212
     230:	fd 4f       	sbci	r31, 0xFD	; 253
     232:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
     234:	20 91 50 02 	lds	r18, 0x0250
     238:	92 2f       	mov	r25, r18
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	ac 01       	movw	r20, r24
     23e:	43 0f       	add	r20, r19
     240:	51 1d       	adc	r21, r1
     242:	9a 01       	movw	r18, r20

}/* uart_getc */
     244:	c9 01       	movw	r24, r18
     246:	08 95       	ret

00000248 <uart_putc>:

void uart_putc(unsigned char data)
{
     248:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     24a:	90 91 4c 02 	lds	r25, 0x024C
     24e:	9f 5f       	subi	r25, 0xFF	; 255
     250:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
     252:	80 91 4d 02 	lds	r24, 0x024D
     256:	98 17       	cp	r25, r24
     258:	e1 f3       	breq	.-8      	; 0x252 <uart_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     25a:	e9 2f       	mov	r30, r25
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	e4 5f       	subi	r30, 0xF4	; 244
     260:	fd 4f       	sbci	r31, 0xFD	; 253
     262:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
     264:	90 93 4c 02 	sts	0x024C, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     268:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
     26a:	08 95       	ret

0000026c <uart_puts>:

void uart_puts(const char *s )
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	ec 01       	movw	r28, r24
     272:	03 c0       	rjmp	.+6      	; 0x27a <uart_puts+0xe>
    while (*s) 
      uart_putc(*s++);
     274:	21 96       	adiw	r28, 0x01	; 1
     276:	0e 94 24 01 	call	0x248	; 0x248 <uart_putc>

}/* uart_putc */

void uart_puts(const char *s )
{
    while (*s) 
     27a:	88 81       	ld	r24, Y
     27c:	88 23       	and	r24, r24
     27e:	d1 f7       	brne	.-12     	; 0x274 <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <uart_puts_p>:

void uart_puts_p(const char *progmem_s )
{
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	ec 01       	movw	r28, r24
     28c:	02 c0       	rjmp	.+4      	; 0x292 <uart_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
     28e:	0e 94 24 01 	call	0x248	; 0x248 <uart_putc>
     292:	fe 01       	movw	r30, r28

void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     294:	21 96       	adiw	r28, 0x01	; 1
     296:	84 91       	lpm	r24, Z+
     298:	88 23       	and	r24, r24
     29a:	c9 f7       	brne	.-14     	; 0x28e <uart_puts_p+0x8>
      uart_putc(c);

}/* uart_puts_p */
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
     2a2:	1f 92       	push	r1
     2a4:	0f 92       	push	r0
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	0f 92       	push	r0
     2aa:	0b b6       	in	r0, 0x3b	; 59
     2ac:	0f 92       	push	r0
     2ae:	11 24       	eor	r1, r1
     2b0:	2f 93       	push	r18
     2b2:	8f 93       	push	r24
     2b4:	9f 93       	push	r25
     2b6:	ef 93       	push	r30
     2b8:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
     2ba:	90 91 9b 00 	lds	r25, 0x009B
    data = UART1_DATA;
     2be:	20 91 9c 00 	lds	r18, 0x009C
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
        
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     2c2:	e0 91 93 02 	lds	r30, 0x0293
     2c6:	ef 5f       	subi	r30, 0xFF	; 255
     2c8:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
     2ca:	80 91 94 02 	lds	r24, 0x0294
     2ce:	e8 17       	cp	r30, r24
     2d0:	11 f4       	brne	.+4      	; 0x2d6 <__vector_30+0x34>
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	08 c0       	rjmp	.+16     	; 0x2e6 <__vector_30+0x44>
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    data = UART1_DATA;
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
     2d6:	89 2f       	mov	r24, r25
     2d8:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
     2da:	e0 93 93 02 	sts	0x0293, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	ef 58       	subi	r30, 0x8F	; 143
     2e2:	fd 4f       	sbci	r31, 0xFD	; 253
     2e4:	20 83       	st	Z, r18
    }
    UART1_LastRxError = lastRxError;   
     2e6:	80 93 95 02 	sts	0x0295, r24
}
     2ea:	ff 91       	pop	r31
     2ec:	ef 91       	pop	r30
     2ee:	9f 91       	pop	r25
     2f0:	8f 91       	pop	r24
     2f2:	2f 91       	pop	r18
     2f4:	0f 90       	pop	r0
     2f6:	0b be       	out	0x3b, r0	; 59
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
     302:	1f 92       	push	r1
     304:	0f 92       	push	r0
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	0f 92       	push	r0
     30a:	0b b6       	in	r0, 0x3b	; 59
     30c:	0f 92       	push	r0
     30e:	11 24       	eor	r1, r1
     310:	8f 93       	push	r24
     312:	9f 93       	push	r25
     314:	ef 93       	push	r30
     316:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
     318:	90 91 91 02 	lds	r25, 0x0291
     31c:	80 91 92 02 	lds	r24, 0x0292
     320:	98 17       	cp	r25, r24
     322:	69 f0       	breq	.+26     	; 0x33e <__vector_31+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     324:	e0 91 92 02 	lds	r30, 0x0292
     328:	ef 5f       	subi	r30, 0xFF	; 255
     32a:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
     32c:	e0 93 92 02 	sts	0x0292, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	ef 5a       	subi	r30, 0xAF	; 175
     334:	fd 4f       	sbci	r31, 0xFD	; 253
     336:	80 81       	ld	r24, Z
     338:	80 93 9c 00 	sts	0x009C, r24
     33c:	05 c0       	rjmp	.+10     	; 0x348 <__vector_31+0x46>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
     33e:	80 91 9a 00 	lds	r24, 0x009A
     342:	8f 7d       	andi	r24, 0xDF	; 223
     344:	80 93 9a 00 	sts	0x009A, r24
    }
}
     348:	ff 91       	pop	r31
     34a:	ef 91       	pop	r30
     34c:	9f 91       	pop	r25
     34e:	8f 91       	pop	r24
     350:	0f 90       	pop	r0
     352:	0b be       	out	0x3b, r0	; 59
     354:	0f 90       	pop	r0
     356:	0f be       	out	0x3f, r0	; 63
     358:	0f 90       	pop	r0
     35a:	1f 90       	pop	r1
     35c:	18 95       	reti

0000035e <uart1_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART1_RxHead == UART1_RxTail ) {
     35e:	90 91 93 02 	lds	r25, 0x0293
     362:	80 91 94 02 	lds	r24, 0x0294
     366:	98 17       	cp	r25, r24
     368:	19 f4       	brne	.+6      	; 0x370 <uart1_getc+0x12>
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	31 e0       	ldi	r19, 0x01	; 1
     36e:	12 c0       	rjmp	.+36     	; 0x394 <uart1_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
     370:	e0 91 94 02 	lds	r30, 0x0294
     374:	ef 5f       	subi	r30, 0xFF	; 255
     376:	ef 71       	andi	r30, 0x1F	; 31
    UART1_RxTail = tmptail; 
     378:	e0 93 94 02 	sts	0x0294, r30
    
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	ef 58       	subi	r30, 0x8F	; 143
     380:	fd 4f       	sbci	r31, 0xFD	; 253
     382:	30 81       	ld	r19, Z
    
    return (UART1_LastRxError << 8) + data;
     384:	20 91 95 02 	lds	r18, 0x0295
     388:	92 2f       	mov	r25, r18
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	ac 01       	movw	r20, r24
     38e:	43 0f       	add	r20, r19
     390:	51 1d       	adc	r21, r1
     392:	9a 01       	movw	r18, r20

}/* uart1_getc */
     394:	c9 01       	movw	r24, r18
     396:	08 95       	ret

00000398 <uart1_putc>:

void uart1_putc(unsigned char data)
{
     398:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
     39a:	90 91 91 02 	lds	r25, 0x0291
     39e:	9f 5f       	subi	r25, 0xFF	; 255
     3a0:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
     3a2:	80 91 92 02 	lds	r24, 0x0292
     3a6:	98 17       	cp	r25, r24
     3a8:	e1 f3       	breq	.-8      	; 0x3a2 <uart1_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
     3aa:	e9 2f       	mov	r30, r25
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	ef 5a       	subi	r30, 0xAF	; 175
     3b0:	fd 4f       	sbci	r31, 0xFD	; 253
     3b2:	20 83       	st	Z, r18
    UART1_TxHead = tmphead;
     3b4:	90 93 91 02 	sts	0x0291, r25

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
     3b8:	80 91 9a 00 	lds	r24, 0x009A
     3bc:	80 62       	ori	r24, 0x20	; 32
     3be:	80 93 9a 00 	sts	0x009A, r24

}/* uart1_putc */
     3c2:	08 95       	ret

000003c4 <uart1_puts>:

void uart1_puts(const char *s )
{
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	ec 01       	movw	r28, r24
     3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <uart1_puts+0xe>
    while (*s) 
      uart1_putc(*s++);
     3cc:	21 96       	adiw	r28, 0x01	; 1
     3ce:	0e 94 cc 01 	call	0x398	; 0x398 <uart1_putc>

}/* uart1_putc */

void uart1_puts(const char *s )
{
    while (*s) 
     3d2:	88 81       	ld	r24, Y
     3d4:	88 23       	and	r24, r24
     3d6:	d1 f7       	brne	.-12     	; 0x3cc <uart1_puts+0x8>
      uart1_putc(*s++);

}/* uart1_puts */
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <uart1_puts_p>:

void uart1_puts_p(const char *progmem_s )
{
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	ec 01       	movw	r28, r24
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <uart1_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
     3e6:	0e 94 cc 01 	call	0x398	; 0x398 <uart1_putc>
     3ea:	fe 01       	movw	r30, r28

void uart1_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     3ec:	21 96       	adiw	r28, 0x01	; 1
     3ee:	84 91       	lpm	r24, Z+
     3f0:	88 23       	and	r24, r24
     3f2:	c9 f7       	brne	.-14     	; 0x3e6 <uart1_puts_p+0x8>
      uart1_putc(c);

}/* uart1_puts_p */
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <uart1_puts_len>:

void uart1_puts_len(const char *s ,int length)
{
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	8c 01       	movw	r16, r24
     408:	7b 01       	movw	r14, r22
     40a:	c0 e0       	ldi	r28, 0x00	; 0
     40c:	d0 e0       	ldi	r29, 0x00	; 0
     40e:	06 c0       	rjmp	.+12     	; 0x41c <uart1_puts_len+0x22>
int i=0;

    for(i=0;i<length;i++)
      uart1_putc(*s++);
     410:	f8 01       	movw	r30, r16
     412:	81 91       	ld	r24, Z+
     414:	8f 01       	movw	r16, r30
     416:	0e 94 cc 01 	call	0x398	; 0x398 <uart1_putc>

void uart1_puts_len(const char *s ,int length)
{
int i=0;

    for(i=0;i<length;i++)
     41a:	21 96       	adiw	r28, 0x01	; 1
     41c:	ce 15       	cp	r28, r14
     41e:	df 05       	cpc	r29, r15
     420:	bc f3       	brlt	.-18     	; 0x410 <uart1_puts_len+0x16>
      uart1_putc(*s++);

}/* uart1_puts_len */
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	ff 90       	pop	r15
     42c:	ef 90       	pop	r14
     42e:	08 95       	ret

00000430 <uart_puts_len>:

void uart_puts_len(const char *s ,int length)
{
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	8c 01       	movw	r16, r24
     43e:	7b 01       	movw	r14, r22
     440:	c0 e0       	ldi	r28, 0x00	; 0
     442:	d0 e0       	ldi	r29, 0x00	; 0
     444:	06 c0       	rjmp	.+12     	; 0x452 <uart_puts_len+0x22>
int i=0;

    for(i=0;i<length;i++)
      uart_putc(*s++);
     446:	f8 01       	movw	r30, r16
     448:	81 91       	ld	r24, Z+
     44a:	8f 01       	movw	r16, r30
     44c:	0e 94 24 01 	call	0x248	; 0x248 <uart_putc>

void uart_puts_len(const char *s ,int length)
{
int i=0;

    for(i=0;i<length;i++)
     450:	21 96       	adiw	r28, 0x01	; 1
     452:	ce 15       	cp	r28, r14
     454:	df 05       	cpc	r29, r15
     456:	bc f3       	brlt	.-18     	; 0x446 <uart_puts_len+0x16>
      uart_putc(*s++);

}/* uart1_puts_len */
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	08 95       	ret

00000466 <mpu6050_getQuaternion>:
}

/*
 * get quaternion
 */
void mpu6050_getQuaternion(double *qw, double *qx, double *qy, double *qz) {
     466:	fc 01       	movw	r30, r24
	*qw = q0;
     468:	80 91 00 01 	lds	r24, 0x0100
     46c:	90 91 01 01 	lds	r25, 0x0101
     470:	a0 91 02 01 	lds	r26, 0x0102
     474:	b0 91 03 01 	lds	r27, 0x0103
     478:	80 83       	st	Z, r24
     47a:	91 83       	std	Z+1, r25	; 0x01
     47c:	a2 83       	std	Z+2, r26	; 0x02
     47e:	b3 83       	std	Z+3, r27	; 0x03
	*qx = q1;
     480:	80 91 96 02 	lds	r24, 0x0296
     484:	90 91 97 02 	lds	r25, 0x0297
     488:	a0 91 98 02 	lds	r26, 0x0298
     48c:	b0 91 99 02 	lds	r27, 0x0299
     490:	fb 01       	movw	r30, r22
     492:	80 83       	st	Z, r24
     494:	91 83       	std	Z+1, r25	; 0x01
     496:	a2 83       	std	Z+2, r26	; 0x02
     498:	b3 83       	std	Z+3, r27	; 0x03
	*qy = q2;
     49a:	80 91 9a 02 	lds	r24, 0x029A
     49e:	90 91 9b 02 	lds	r25, 0x029B
     4a2:	a0 91 9c 02 	lds	r26, 0x029C
     4a6:	b0 91 9d 02 	lds	r27, 0x029D
     4aa:	fa 01       	movw	r30, r20
     4ac:	80 83       	st	Z, r24
     4ae:	91 83       	std	Z+1, r25	; 0x01
     4b0:	a2 83       	std	Z+2, r26	; 0x02
     4b2:	b3 83       	std	Z+3, r27	; 0x03
	*qz = q3;
     4b4:	80 91 9e 02 	lds	r24, 0x029E
     4b8:	90 91 9f 02 	lds	r25, 0x029F
     4bc:	a0 91 a0 02 	lds	r26, 0x02A0
     4c0:	b0 91 a1 02 	lds	r27, 0x02A1
     4c4:	f9 01       	movw	r30, r18
     4c6:	80 83       	st	Z, r24
     4c8:	91 83       	std	Z+1, r25	; 0x01
     4ca:	a2 83       	std	Z+2, r26	; 0x02
     4cc:	b3 83       	std	Z+3, r27	; 0x03
}
     4ce:	08 95       	ret

000004d0 <mpu6050_getRollPitchYaw>:
 * aerospace sequence, to obtain sensor attitude:
 * 1. rotate around sensor Z plane by yaw
 * 2. rotate around sensor Y plane by pitch
 * 3. rotate around sensor X plane by roll
 */
void mpu6050_getRollPitchYaw(double *roll, double *pitch, double *yaw) {
     4d0:	2f 92       	push	r2
     4d2:	3f 92       	push	r3
     4d4:	4f 92       	push	r4
     4d6:	5f 92       	push	r5
     4d8:	6f 92       	push	r6
     4da:	7f 92       	push	r7
     4dc:	8f 92       	push	r8
     4de:	9f 92       	push	r9
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	df 93       	push	r29
     4f2:	cf 93       	push	r28
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	6e 97       	sbiw	r28, 0x1e	; 30
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
     504:	9a 8f       	std	Y+26, r25	; 0x1a
     506:	89 8f       	std	Y+25, r24	; 0x19
     508:	7c 8f       	std	Y+28, r23	; 0x1c
     50a:	6b 8f       	std	Y+27, r22	; 0x1b
     50c:	5e 8f       	std	Y+30, r21	; 0x1e
     50e:	4d 8f       	std	Y+29, r20	; 0x1d
	*yaw = atan2(2*q1*q2 - 2*q0*q3, 2*q0*q0 + 2*q1*q1 - 1);
     510:	20 91 96 02 	lds	r18, 0x0296
     514:	30 91 97 02 	lds	r19, 0x0297
     518:	40 91 98 02 	lds	r20, 0x0298
     51c:	50 91 99 02 	lds	r21, 0x0299
     520:	e0 90 9a 02 	lds	r14, 0x029A
     524:	f0 90 9b 02 	lds	r15, 0x029B
     528:	00 91 9c 02 	lds	r16, 0x029C
     52c:	10 91 9d 02 	lds	r17, 0x029D
     530:	a0 90 00 01 	lds	r10, 0x0100
     534:	b0 90 01 01 	lds	r11, 0x0101
     538:	c0 90 02 01 	lds	r12, 0x0102
     53c:	d0 90 03 01 	lds	r13, 0x0103
     540:	20 90 9e 02 	lds	r2, 0x029E
     544:	30 90 9f 02 	lds	r3, 0x029F
     548:	40 90 a0 02 	lds	r4, 0x02A0
     54c:	50 90 a1 02 	lds	r5, 0x02A1
     550:	60 90 00 01 	lds	r6, 0x0100
     554:	70 90 01 01 	lds	r7, 0x0101
     558:	80 90 02 01 	lds	r8, 0x0102
     55c:	90 90 03 01 	lds	r9, 0x0103
     560:	80 91 00 01 	lds	r24, 0x0100
     564:	90 91 01 01 	lds	r25, 0x0101
     568:	a0 91 02 01 	lds	r26, 0x0102
     56c:	b0 91 03 01 	lds	r27, 0x0103
     570:	8d 8b       	std	Y+21, r24	; 0x15
     572:	9e 8b       	std	Y+22, r25	; 0x16
     574:	af 8b       	std	Y+23, r26	; 0x17
     576:	b8 8f       	std	Y+24, r27	; 0x18
     578:	80 91 96 02 	lds	r24, 0x0296
     57c:	90 91 97 02 	lds	r25, 0x0297
     580:	a0 91 98 02 	lds	r26, 0x0298
     584:	b0 91 99 02 	lds	r27, 0x0299
     588:	89 8b       	std	Y+17, r24	; 0x11
     58a:	9a 8b       	std	Y+18, r25	; 0x12
     58c:	ab 8b       	std	Y+19, r26	; 0x13
     58e:	bc 8b       	std	Y+20, r27	; 0x14
     590:	80 91 96 02 	lds	r24, 0x0296
     594:	90 91 97 02 	lds	r25, 0x0297
     598:	a0 91 98 02 	lds	r26, 0x0298
     59c:	b0 91 99 02 	lds	r27, 0x0299
     5a0:	8d 87       	std	Y+13, r24	; 0x0d
     5a2:	9e 87       	std	Y+14, r25	; 0x0e
     5a4:	af 87       	std	Y+15, r26	; 0x0f
     5a6:	b8 8b       	std	Y+16, r27	; 0x10
     5a8:	ca 01       	movw	r24, r20
     5aa:	b9 01       	movw	r22, r18
     5ac:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     5b0:	a8 01       	movw	r20, r16
     5b2:	97 01       	movw	r18, r14
     5b4:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     5b8:	7b 01       	movw	r14, r22
     5ba:	8c 01       	movw	r16, r24
     5bc:	c6 01       	movw	r24, r12
     5be:	b5 01       	movw	r22, r10
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	50 ec       	ldi	r21, 0xC0	; 192
     5c8:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     5cc:	a2 01       	movw	r20, r4
     5ce:	91 01       	movw	r18, r2
     5d0:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     5d4:	9b 01       	movw	r18, r22
     5d6:	ac 01       	movw	r20, r24
     5d8:	c8 01       	movw	r24, r16
     5da:	b7 01       	movw	r22, r14
     5dc:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     5e0:	5b 01       	movw	r10, r22
     5e2:	6c 01       	movw	r12, r24
     5e4:	c4 01       	movw	r24, r8
     5e6:	b3 01       	movw	r22, r6
     5e8:	a4 01       	movw	r20, r8
     5ea:	93 01       	movw	r18, r6
     5ec:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     5f0:	2d 89       	ldd	r18, Y+21	; 0x15
     5f2:	3e 89       	ldd	r19, Y+22	; 0x16
     5f4:	4f 89       	ldd	r20, Y+23	; 0x17
     5f6:	58 8d       	ldd	r21, Y+24	; 0x18
     5f8:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     5fc:	7b 01       	movw	r14, r22
     5fe:	8c 01       	movw	r16, r24
     600:	69 89       	ldd	r22, Y+17	; 0x11
     602:	7a 89       	ldd	r23, Y+18	; 0x12
     604:	8b 89       	ldd	r24, Y+19	; 0x13
     606:	9c 89       	ldd	r25, Y+20	; 0x14
     608:	9b 01       	movw	r18, r22
     60a:	ac 01       	movw	r20, r24
     60c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     610:	2d 85       	ldd	r18, Y+13	; 0x0d
     612:	3e 85       	ldd	r19, Y+14	; 0x0e
     614:	4f 85       	ldd	r20, Y+15	; 0x0f
     616:	58 89       	ldd	r21, Y+16	; 0x10
     618:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     61c:	9b 01       	movw	r18, r22
     61e:	ac 01       	movw	r20, r24
     620:	c8 01       	movw	r24, r16
     622:	b7 01       	movw	r22, r14
     624:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	40 e8       	ldi	r20, 0x80	; 128
     62e:	5f e3       	ldi	r21, 0x3F	; 63
     630:	0e 94 b6 12 	call	0x256c	; 0x256c <__subsf3>
     634:	9b 01       	movw	r18, r22
     636:	ac 01       	movw	r20, r24
     638:	c6 01       	movw	r24, r12
     63a:	b5 01       	movw	r22, r10
     63c:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <atan2>
     640:	ad 8d       	ldd	r26, Y+29	; 0x1d
     642:	be 8d       	ldd	r27, Y+30	; 0x1e
     644:	6d 93       	st	X+, r22
     646:	7d 93       	st	X+, r23
     648:	8d 93       	st	X+, r24
     64a:	9c 93       	st	X, r25
     64c:	13 97       	sbiw	r26, 0x03	; 3
	*pitch = -asin(2*q1*q3 + 2*q0*q2);
     64e:	20 91 96 02 	lds	r18, 0x0296
     652:	30 91 97 02 	lds	r19, 0x0297
     656:	40 91 98 02 	lds	r20, 0x0298
     65a:	50 91 99 02 	lds	r21, 0x0299
     65e:	a0 90 9e 02 	lds	r10, 0x029E
     662:	b0 90 9f 02 	lds	r11, 0x029F
     666:	c0 90 a0 02 	lds	r12, 0x02A0
     66a:	d0 90 a1 02 	lds	r13, 0x02A1
     66e:	e0 90 00 01 	lds	r14, 0x0100
     672:	f0 90 01 01 	lds	r15, 0x0101
     676:	00 91 02 01 	lds	r16, 0x0102
     67a:	10 91 03 01 	lds	r17, 0x0103
     67e:	60 90 9a 02 	lds	r6, 0x029A
     682:	70 90 9b 02 	lds	r7, 0x029B
     686:	80 90 9c 02 	lds	r8, 0x029C
     68a:	90 90 9d 02 	lds	r9, 0x029D
     68e:	ca 01       	movw	r24, r20
     690:	b9 01       	movw	r22, r18
     692:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     696:	a6 01       	movw	r20, r12
     698:	95 01       	movw	r18, r10
     69a:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     69e:	5b 01       	movw	r10, r22
     6a0:	6c 01       	movw	r12, r24
     6a2:	c8 01       	movw	r24, r16
     6a4:	b7 01       	movw	r22, r14
     6a6:	a8 01       	movw	r20, r16
     6a8:	97 01       	movw	r18, r14
     6aa:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     6ae:	a4 01       	movw	r20, r8
     6b0:	93 01       	movw	r18, r6
     6b2:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     6b6:	9b 01       	movw	r18, r22
     6b8:	ac 01       	movw	r20, r24
     6ba:	c6 01       	movw	r24, r12
     6bc:	b5 01       	movw	r22, r10
     6be:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     6c2:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <asin>
     6c6:	90 58       	subi	r25, 0x80	; 128
     6c8:	eb 8d       	ldd	r30, Y+27	; 0x1b
     6ca:	fc 8d       	ldd	r31, Y+28	; 0x1c
     6cc:	60 83       	st	Z, r22
     6ce:	71 83       	std	Z+1, r23	; 0x01
     6d0:	82 83       	std	Z+2, r24	; 0x02
     6d2:	93 83       	std	Z+3, r25	; 0x03
	*roll = atan2(2*q2*q3 - 2*q0*q1, 2*q0*q0 + 2*q3*q3 - 1);
     6d4:	20 91 9a 02 	lds	r18, 0x029A
     6d8:	30 91 9b 02 	lds	r19, 0x029B
     6dc:	40 91 9c 02 	lds	r20, 0x029C
     6e0:	50 91 9d 02 	lds	r21, 0x029D
     6e4:	e0 90 9e 02 	lds	r14, 0x029E
     6e8:	f0 90 9f 02 	lds	r15, 0x029F
     6ec:	00 91 a0 02 	lds	r16, 0x02A0
     6f0:	10 91 a1 02 	lds	r17, 0x02A1
     6f4:	a0 90 00 01 	lds	r10, 0x0100
     6f8:	b0 90 01 01 	lds	r11, 0x0101
     6fc:	c0 90 02 01 	lds	r12, 0x0102
     700:	d0 90 03 01 	lds	r13, 0x0103
     704:	20 90 96 02 	lds	r2, 0x0296
     708:	30 90 97 02 	lds	r3, 0x0297
     70c:	40 90 98 02 	lds	r4, 0x0298
     710:	50 90 99 02 	lds	r5, 0x0299
     714:	60 90 00 01 	lds	r6, 0x0100
     718:	70 90 01 01 	lds	r7, 0x0101
     71c:	80 90 02 01 	lds	r8, 0x0102
     720:	90 90 03 01 	lds	r9, 0x0103
     724:	80 91 00 01 	lds	r24, 0x0100
     728:	90 91 01 01 	lds	r25, 0x0101
     72c:	a0 91 02 01 	lds	r26, 0x0102
     730:	b0 91 03 01 	lds	r27, 0x0103
     734:	89 87       	std	Y+9, r24	; 0x09
     736:	9a 87       	std	Y+10, r25	; 0x0a
     738:	ab 87       	std	Y+11, r26	; 0x0b
     73a:	bc 87       	std	Y+12, r27	; 0x0c
     73c:	80 91 9e 02 	lds	r24, 0x029E
     740:	90 91 9f 02 	lds	r25, 0x029F
     744:	a0 91 a0 02 	lds	r26, 0x02A0
     748:	b0 91 a1 02 	lds	r27, 0x02A1
     74c:	8d 83       	std	Y+5, r24	; 0x05
     74e:	9e 83       	std	Y+6, r25	; 0x06
     750:	af 83       	std	Y+7, r26	; 0x07
     752:	b8 87       	std	Y+8, r27	; 0x08
     754:	80 91 9e 02 	lds	r24, 0x029E
     758:	90 91 9f 02 	lds	r25, 0x029F
     75c:	a0 91 a0 02 	lds	r26, 0x02A0
     760:	b0 91 a1 02 	lds	r27, 0x02A1
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	9a 83       	std	Y+2, r25	; 0x02
     768:	ab 83       	std	Y+3, r26	; 0x03
     76a:	bc 83       	std	Y+4, r27	; 0x04
     76c:	ca 01       	movw	r24, r20
     76e:	b9 01       	movw	r22, r18
     770:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     774:	a8 01       	movw	r20, r16
     776:	97 01       	movw	r18, r14
     778:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     77c:	7b 01       	movw	r14, r22
     77e:	8c 01       	movw	r16, r24
     780:	c6 01       	movw	r24, r12
     782:	b5 01       	movw	r22, r10
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	50 ec       	ldi	r21, 0xC0	; 192
     78c:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     790:	a2 01       	movw	r20, r4
     792:	91 01       	movw	r18, r2
     794:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     798:	9b 01       	movw	r18, r22
     79a:	ac 01       	movw	r20, r24
     79c:	c8 01       	movw	r24, r16
     79e:	b7 01       	movw	r22, r14
     7a0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     7a4:	5b 01       	movw	r10, r22
     7a6:	6c 01       	movw	r12, r24
     7a8:	c4 01       	movw	r24, r8
     7aa:	b3 01       	movw	r22, r6
     7ac:	a4 01       	movw	r20, r8
     7ae:	93 01       	movw	r18, r6
     7b0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     7b4:	29 85       	ldd	r18, Y+9	; 0x09
     7b6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7b8:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ba:	5c 85       	ldd	r21, Y+12	; 0x0c
     7bc:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     7c0:	7b 01       	movw	r14, r22
     7c2:	8c 01       	movw	r16, r24
     7c4:	6d 81       	ldd	r22, Y+5	; 0x05
     7c6:	7e 81       	ldd	r23, Y+6	; 0x06
     7c8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ca:	98 85       	ldd	r25, Y+8	; 0x08
     7cc:	9b 01       	movw	r18, r22
     7ce:	ac 01       	movw	r20, r24
     7d0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     7d4:	29 81       	ldd	r18, Y+1	; 0x01
     7d6:	3a 81       	ldd	r19, Y+2	; 0x02
     7d8:	4b 81       	ldd	r20, Y+3	; 0x03
     7da:	5c 81       	ldd	r21, Y+4	; 0x04
     7dc:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     7e0:	9b 01       	movw	r18, r22
     7e2:	ac 01       	movw	r20, r24
     7e4:	c8 01       	movw	r24, r16
     7e6:	b7 01       	movw	r22, r14
     7e8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e8       	ldi	r20, 0x80	; 128
     7f2:	5f e3       	ldi	r21, 0x3F	; 63
     7f4:	0e 94 b6 12 	call	0x256c	; 0x256c <__subsf3>
     7f8:	9b 01       	movw	r18, r22
     7fa:	ac 01       	movw	r20, r24
     7fc:	c6 01       	movw	r24, r12
     7fe:	b5 01       	movw	r22, r10
     800:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <atan2>
     804:	a9 8d       	ldd	r26, Y+25	; 0x19
     806:	ba 8d       	ldd	r27, Y+26	; 0x1a
     808:	6d 93       	st	X+, r22
     80a:	7d 93       	st	X+, r23
     80c:	8d 93       	st	X+, r24
     80e:	9c 93       	st	X, r25
     810:	13 97       	sbiw	r26, 0x03	; 3
}
     812:	6e 96       	adiw	r28, 0x1e	; 30
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	cf 91       	pop	r28
     820:	df 91       	pop	r29
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	bf 90       	pop	r11
     830:	af 90       	pop	r10
     832:	9f 90       	pop	r9
     834:	8f 90       	pop	r8
     836:	7f 90       	pop	r7
     838:	6f 90       	pop	r6
     83a:	5f 90       	pop	r5
     83c:	4f 90       	pop	r4
     83e:	3f 90       	pop	r3
     840:	2f 90       	pop	r2
     842:	08 95       	ret

00000844 <mpu6050_mahonyUpdate>:
volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
volatile float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
/*
 * Mahony update function (for 6DOF)
 */
void mpu6050_mahonyUpdate(float gx, float gy, float gz, float ax, float ay, float az) {
     844:	2f 92       	push	r2
     846:	3f 92       	push	r3
     848:	4f 92       	push	r4
     84a:	5f 92       	push	r5
     84c:	6f 92       	push	r6
     84e:	7f 92       	push	r7
     850:	8f 92       	push	r8
     852:	9f 92       	push	r9
     854:	af 92       	push	r10
     856:	bf 92       	push	r11
     858:	cf 92       	push	r12
     85a:	df 92       	push	r13
     85c:	ef 92       	push	r14
     85e:	ff 92       	push	r15
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	df 93       	push	r29
     866:	cf 93       	push	r28
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
     86c:	cc 54       	subi	r28, 0x4C	; 76
     86e:	d0 40       	sbci	r29, 0x00	; 0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	6d a3       	std	Y+37, r22	; 0x25
     87c:	7e a3       	std	Y+38, r23	; 0x26
     87e:	8f a3       	std	Y+39, r24	; 0x27
     880:	98 a7       	std	Y+40, r25	; 0x28
     882:	29 a7       	std	Y+41, r18	; 0x29
     884:	3a a7       	std	Y+42, r19	; 0x2a
     886:	4b a7       	std	Y+43, r20	; 0x2b
     888:	5c a7       	std	Y+44, r21	; 0x2c
     88a:	ed a6       	std	Y+45, r14	; 0x2d
     88c:	fe a6       	std	Y+46, r15	; 0x2e
     88e:	0f a7       	std	Y+47, r16	; 0x2f
     890:	18 ab       	std	Y+48, r17	; 0x30
     892:	a5 96       	adiw	r28, 0x25	; 37
     894:	6c ac       	ldd	r6, Y+60	; 0x3c
     896:	7d ac       	ldd	r7, Y+61	; 0x3d
     898:	8e ac       	ldd	r8, Y+62	; 0x3e
     89a:	9f ac       	ldd	r9, Y+63	; 0x3f
     89c:	a5 97       	sbiw	r28, 0x25	; 37
     89e:	a9 96       	adiw	r28, 0x29	; 41
     8a0:	2c ac       	ldd	r2, Y+60	; 0x3c
     8a2:	3d ac       	ldd	r3, Y+61	; 0x3d
     8a4:	4e ac       	ldd	r4, Y+62	; 0x3e
     8a6:	5f ac       	ldd	r5, Y+63	; 0x3f
     8a8:	a9 97       	sbiw	r28, 0x29	; 41
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     8aa:	c6 01       	movw	r24, r12
     8ac:	b5 01       	movw	r22, r10
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	0e 94 ba 14 	call	0x2974	; 0x2974 <__eqsf2>
     8ba:	88 23       	and	r24, r24
     8bc:	a9 f4       	brne	.+42     	; 0x8e8 <mpu6050_mahonyUpdate+0xa4>
     8be:	c4 01       	movw	r24, r8
     8c0:	b3 01       	movw	r22, r6
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	0e 94 ba 14 	call	0x2974	; 0x2974 <__eqsf2>
     8ce:	88 23       	and	r24, r24
     8d0:	59 f4       	brne	.+22     	; 0x8e8 <mpu6050_mahonyUpdate+0xa4>
     8d2:	c2 01       	movw	r24, r4
     8d4:	b1 01       	movw	r22, r2
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	50 e0       	ldi	r21, 0x00	; 0
     8de:	0e 94 ba 14 	call	0x2974	; 0x2974 <__eqsf2>
     8e2:	88 23       	and	r24, r24
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <mpu6050_mahonyUpdate+0xa4>
     8e6:	0c c2       	rjmp	.+1048   	; 0xd00 <mpu6050_mahonyUpdate+0x4bc>

		// Normalise accelerometer measurement
		norm = sqrt(ax * ax + ay * ay + az * az);
     8e8:	c6 01       	movw	r24, r12
     8ea:	b5 01       	movw	r22, r10
     8ec:	a6 01       	movw	r20, r12
     8ee:	95 01       	movw	r18, r10
     8f0:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	c4 01       	movw	r24, r8
     8fa:	b3 01       	movw	r22, r6
     8fc:	a4 01       	movw	r20, r8
     8fe:	93 01       	movw	r18, r6
     900:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     904:	9b 01       	movw	r18, r22
     906:	ac 01       	movw	r20, r24
     908:	c8 01       	movw	r24, r16
     90a:	b7 01       	movw	r22, r14
     90c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     910:	7b 01       	movw	r14, r22
     912:	8c 01       	movw	r16, r24
     914:	c2 01       	movw	r24, r4
     916:	b1 01       	movw	r22, r2
     918:	a2 01       	movw	r20, r4
     91a:	91 01       	movw	r18, r2
     91c:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     920:	9b 01       	movw	r18, r22
     922:	ac 01       	movw	r20, r24
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     92c:	0e 94 b5 19 	call	0x336a	; 0x336a <sqrt>
     930:	7b 01       	movw	r14, r22
     932:	8c 01       	movw	r16, r24
		ax /= norm;
     934:	c6 01       	movw	r24, r12
     936:	b5 01       	movw	r22, r10
     938:	a8 01       	movw	r20, r16
     93a:	97 01       	movw	r18, r14
     93c:	0e 94 0e 14 	call	0x281c	; 0x281c <__divsf3>
     940:	69 ab       	std	Y+49, r22	; 0x31
     942:	7a ab       	std	Y+50, r23	; 0x32
     944:	8b ab       	std	Y+51, r24	; 0x33
     946:	9c ab       	std	Y+52, r25	; 0x34
		ay /= norm;
     948:	c4 01       	movw	r24, r8
     94a:	b3 01       	movw	r22, r6
     94c:	a8 01       	movw	r20, r16
     94e:	97 01       	movw	r18, r14
     950:	0e 94 0e 14 	call	0x281c	; 0x281c <__divsf3>
     954:	6d ab       	std	Y+53, r22	; 0x35
     956:	7e ab       	std	Y+54, r23	; 0x36
     958:	8f ab       	std	Y+55, r24	; 0x37
     95a:	98 af       	std	Y+56, r25	; 0x38
		az /= norm;
     95c:	c2 01       	movw	r24, r4
     95e:	b1 01       	movw	r22, r2
     960:	a8 01       	movw	r20, r16
     962:	97 01       	movw	r18, r14
     964:	0e 94 0e 14 	call	0x281c	; 0x281c <__divsf3>
     968:	69 af       	std	Y+57, r22	; 0x39
     96a:	7a af       	std	Y+58, r23	; 0x3a
     96c:	8b af       	std	Y+59, r24	; 0x3b
     96e:	9c af       	std	Y+60, r25	; 0x3c

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
     970:	60 91 96 02 	lds	r22, 0x0296
     974:	70 91 97 02 	lds	r23, 0x0297
     978:	80 91 98 02 	lds	r24, 0x0298
     97c:	90 91 99 02 	lds	r25, 0x0299
     980:	20 91 9e 02 	lds	r18, 0x029E
     984:	30 91 9f 02 	lds	r19, 0x029F
     988:	40 91 a0 02 	lds	r20, 0x02A0
     98c:	50 91 a1 02 	lds	r21, 0x02A1
     990:	a0 90 00 01 	lds	r10, 0x0100
     994:	b0 90 01 01 	lds	r11, 0x0101
     998:	c0 90 02 01 	lds	r12, 0x0102
     99c:	d0 90 03 01 	lds	r13, 0x0103
     9a0:	60 90 9a 02 	lds	r6, 0x029A
     9a4:	70 90 9b 02 	lds	r7, 0x029B
     9a8:	80 90 9c 02 	lds	r8, 0x029C
     9ac:	90 90 9d 02 	lds	r9, 0x029D
     9b0:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     9b4:	7b 01       	movw	r14, r22
     9b6:	8c 01       	movw	r16, r24
     9b8:	c6 01       	movw	r24, r12
     9ba:	b5 01       	movw	r22, r10
     9bc:	a4 01       	movw	r20, r8
     9be:	93 01       	movw	r18, r6
     9c0:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     9c4:	9b 01       	movw	r18, r22
     9c6:	ac 01       	movw	r20, r24
     9c8:	c8 01       	movw	r24, r16
     9ca:	b7 01       	movw	r22, r14
     9cc:	0e 94 b6 12 	call	0x256c	; 0x256c <__subsf3>
     9d0:	21 96       	adiw	r28, 0x01	; 1
     9d2:	6c af       	std	Y+60, r22	; 0x3c
     9d4:	7d af       	std	Y+61, r23	; 0x3d
     9d6:	8e af       	std	Y+62, r24	; 0x3e
     9d8:	9f af       	std	Y+63, r25	; 0x3f
     9da:	21 97       	sbiw	r28, 0x01	; 1
		halfvy = q0 * q1 + q2 * q3;
     9dc:	60 91 00 01 	lds	r22, 0x0100
     9e0:	70 91 01 01 	lds	r23, 0x0101
     9e4:	80 91 02 01 	lds	r24, 0x0102
     9e8:	90 91 03 01 	lds	r25, 0x0103
     9ec:	20 91 96 02 	lds	r18, 0x0296
     9f0:	30 91 97 02 	lds	r19, 0x0297
     9f4:	40 91 98 02 	lds	r20, 0x0298
     9f8:	50 91 99 02 	lds	r21, 0x0299
     9fc:	a0 90 9a 02 	lds	r10, 0x029A
     a00:	b0 90 9b 02 	lds	r11, 0x029B
     a04:	c0 90 9c 02 	lds	r12, 0x029C
     a08:	d0 90 9d 02 	lds	r13, 0x029D
     a0c:	60 90 9e 02 	lds	r6, 0x029E
     a10:	70 90 9f 02 	lds	r7, 0x029F
     a14:	80 90 a0 02 	lds	r8, 0x02A0
     a18:	90 90 a1 02 	lds	r9, 0x02A1
     a1c:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     a20:	7b 01       	movw	r14, r22
     a22:	8c 01       	movw	r16, r24
     a24:	c6 01       	movw	r24, r12
     a26:	b5 01       	movw	r22, r10
     a28:	a4 01       	movw	r20, r8
     a2a:	93 01       	movw	r18, r6
     a2c:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     a30:	9b 01       	movw	r18, r22
     a32:	ac 01       	movw	r20, r24
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     a3c:	1b 01       	movw	r2, r22
     a3e:	2c 01       	movw	r4, r24
		halfvz = q0 * q0 - 0.5f + q3 * q3;
     a40:	60 91 00 01 	lds	r22, 0x0100
     a44:	70 91 01 01 	lds	r23, 0x0101
     a48:	80 91 02 01 	lds	r24, 0x0102
     a4c:	90 91 03 01 	lds	r25, 0x0103
     a50:	20 91 00 01 	lds	r18, 0x0100
     a54:	30 91 01 01 	lds	r19, 0x0101
     a58:	40 91 02 01 	lds	r20, 0x0102
     a5c:	50 91 03 01 	lds	r21, 0x0103
     a60:	a0 90 9e 02 	lds	r10, 0x029E
     a64:	b0 90 9f 02 	lds	r11, 0x029F
     a68:	c0 90 a0 02 	lds	r12, 0x02A0
     a6c:	d0 90 a1 02 	lds	r13, 0x02A1
     a70:	60 90 9e 02 	lds	r6, 0x029E
     a74:	70 90 9f 02 	lds	r7, 0x029F
     a78:	80 90 a0 02 	lds	r8, 0x02A0
     a7c:	90 90 a1 02 	lds	r9, 0x02A1
     a80:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	5f e3       	ldi	r21, 0x3F	; 63
     a8c:	0e 94 b6 12 	call	0x256c	; 0x256c <__subsf3>
     a90:	7b 01       	movw	r14, r22
     a92:	8c 01       	movw	r16, r24
     a94:	c6 01       	movw	r24, r12
     a96:	b5 01       	movw	r22, r10
     a98:	a4 01       	movw	r20, r8
     a9a:	93 01       	movw	r18, r6
     a9c:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     aa0:	9b 01       	movw	r18, r22
     aa2:	ac 01       	movw	r20, r24
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     aac:	5b 01       	movw	r10, r22
     aae:	6c 01       	movw	r12, r24

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
     ab0:	6d a9       	ldd	r22, Y+53	; 0x35
     ab2:	7e a9       	ldd	r23, Y+54	; 0x36
     ab4:	8f a9       	ldd	r24, Y+55	; 0x37
     ab6:	98 ad       	ldd	r25, Y+56	; 0x38
     ab8:	a6 01       	movw	r20, r12
     aba:	95 01       	movw	r18, r10
     abc:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     ac0:	7b 01       	movw	r14, r22
     ac2:	8c 01       	movw	r16, r24
     ac4:	69 ad       	ldd	r22, Y+57	; 0x39
     ac6:	7a ad       	ldd	r23, Y+58	; 0x3a
     ac8:	8b ad       	ldd	r24, Y+59	; 0x3b
     aca:	9c ad       	ldd	r25, Y+60	; 0x3c
     acc:	a2 01       	movw	r20, r4
     ace:	91 01       	movw	r18, r2
     ad0:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     ad4:	9b 01       	movw	r18, r22
     ad6:	ac 01       	movw	r20, r24
     ad8:	c8 01       	movw	r24, r16
     ada:	b7 01       	movw	r22, r14
     adc:	0e 94 b6 12 	call	0x256c	; 0x256c <__subsf3>
     ae0:	25 96       	adiw	r28, 0x05	; 5
     ae2:	6c af       	std	Y+60, r22	; 0x3c
     ae4:	7d af       	std	Y+61, r23	; 0x3d
     ae6:	8e af       	std	Y+62, r24	; 0x3e
     ae8:	9f af       	std	Y+63, r25	; 0x3f
     aea:	25 97       	sbiw	r28, 0x05	; 5
		halfey = (az * halfvx - ax * halfvz);
     aec:	69 ad       	ldd	r22, Y+57	; 0x39
     aee:	7a ad       	ldd	r23, Y+58	; 0x3a
     af0:	8b ad       	ldd	r24, Y+59	; 0x3b
     af2:	9c ad       	ldd	r25, Y+60	; 0x3c
     af4:	21 96       	adiw	r28, 0x01	; 1
     af6:	2c ad       	ldd	r18, Y+60	; 0x3c
     af8:	3d ad       	ldd	r19, Y+61	; 0x3d
     afa:	4e ad       	ldd	r20, Y+62	; 0x3e
     afc:	5f ad       	ldd	r21, Y+63	; 0x3f
     afe:	21 97       	sbiw	r28, 0x01	; 1
     b00:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     b04:	7b 01       	movw	r14, r22
     b06:	8c 01       	movw	r16, r24
     b08:	69 a9       	ldd	r22, Y+49	; 0x31
     b0a:	7a a9       	ldd	r23, Y+50	; 0x32
     b0c:	8b a9       	ldd	r24, Y+51	; 0x33
     b0e:	9c a9       	ldd	r25, Y+52	; 0x34
     b10:	a6 01       	movw	r20, r12
     b12:	95 01       	movw	r18, r10
     b14:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     b18:	9b 01       	movw	r18, r22
     b1a:	ac 01       	movw	r20, r24
     b1c:	c8 01       	movw	r24, r16
     b1e:	b7 01       	movw	r22, r14
     b20:	0e 94 b6 12 	call	0x256c	; 0x256c <__subsf3>
     b24:	29 96       	adiw	r28, 0x09	; 9
     b26:	6c af       	std	Y+60, r22	; 0x3c
     b28:	7d af       	std	Y+61, r23	; 0x3d
     b2a:	8e af       	std	Y+62, r24	; 0x3e
     b2c:	9f af       	std	Y+63, r25	; 0x3f
     b2e:	29 97       	sbiw	r28, 0x09	; 9
		halfez = (ax * halfvy - ay * halfvx);
     b30:	69 a9       	ldd	r22, Y+49	; 0x31
     b32:	7a a9       	ldd	r23, Y+50	; 0x32
     b34:	8b a9       	ldd	r24, Y+51	; 0x33
     b36:	9c a9       	ldd	r25, Y+52	; 0x34
     b38:	a2 01       	movw	r20, r4
     b3a:	91 01       	movw	r18, r2
     b3c:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     b40:	7b 01       	movw	r14, r22
     b42:	8c 01       	movw	r16, r24
     b44:	6d a9       	ldd	r22, Y+53	; 0x35
     b46:	7e a9       	ldd	r23, Y+54	; 0x36
     b48:	8f a9       	ldd	r24, Y+55	; 0x37
     b4a:	98 ad       	ldd	r25, Y+56	; 0x38
     b4c:	21 96       	adiw	r28, 0x01	; 1
     b4e:	2c ad       	ldd	r18, Y+60	; 0x3c
     b50:	3d ad       	ldd	r19, Y+61	; 0x3d
     b52:	4e ad       	ldd	r20, Y+62	; 0x3e
     b54:	5f ad       	ldd	r21, Y+63	; 0x3f
     b56:	21 97       	sbiw	r28, 0x01	; 1
     b58:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     b5c:	9b 01       	movw	r18, r22
     b5e:	ac 01       	movw	r20, r24
     b60:	c8 01       	movw	r24, r16
     b62:	b7 01       	movw	r22, r14
     b64:	0e 94 b6 12 	call	0x256c	; 0x256c <__subsf3>
     b68:	1b 01       	movw	r2, r22
     b6a:	2c 01       	movw	r4, r24

		// Compute and apply integral feedback if enabled
		if(mpu6050_mahonytwoKiDef > 0.0f) {
			integralFBx += mpu6050_mahonytwoKiDef * halfex * (1.0f / mpu6050_mahonysampleFreq);	// integral error scaled by Ki
     b6c:	e0 90 a2 02 	lds	r14, 0x02A2
     b70:	f0 90 a3 02 	lds	r15, 0x02A3
     b74:	00 91 a4 02 	lds	r16, 0x02A4
     b78:	10 91 a5 02 	lds	r17, 0x02A5
     b7c:	25 96       	adiw	r28, 0x05	; 5
     b7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     b80:	7d ad       	ldd	r23, Y+61	; 0x3d
     b82:	8e ad       	ldd	r24, Y+62	; 0x3e
     b84:	9f ad       	ldd	r25, Y+63	; 0x3f
     b86:	25 97       	sbiw	r28, 0x05	; 5
     b88:	2d ec       	ldi	r18, 0xCD	; 205
     b8a:	3c ec       	ldi	r19, 0xCC	; 204
     b8c:	4c e4       	ldi	r20, 0x4C	; 76
     b8e:	5e e3       	ldi	r21, 0x3E	; 62
     b90:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     b94:	2a e8       	ldi	r18, 0x8A	; 138
     b96:	3b e4       	ldi	r19, 0x4B	; 75
     b98:	46 e8       	ldi	r20, 0x86	; 134
     b9a:	5c e3       	ldi	r21, 0x3C	; 60
     b9c:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     ba0:	9b 01       	movw	r18, r22
     ba2:	ac 01       	movw	r20, r24
     ba4:	c8 01       	movw	r24, r16
     ba6:	b7 01       	movw	r22, r14
     ba8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     bac:	60 93 a2 02 	sts	0x02A2, r22
     bb0:	70 93 a3 02 	sts	0x02A3, r23
     bb4:	80 93 a4 02 	sts	0x02A4, r24
     bb8:	90 93 a5 02 	sts	0x02A5, r25
			integralFBy += mpu6050_mahonytwoKiDef * halfey * (1.0f / mpu6050_mahonysampleFreq);
     bbc:	e0 90 a6 02 	lds	r14, 0x02A6
     bc0:	f0 90 a7 02 	lds	r15, 0x02A7
     bc4:	00 91 a8 02 	lds	r16, 0x02A8
     bc8:	10 91 a9 02 	lds	r17, 0x02A9
     bcc:	29 96       	adiw	r28, 0x09	; 9
     bce:	6c ad       	ldd	r22, Y+60	; 0x3c
     bd0:	7d ad       	ldd	r23, Y+61	; 0x3d
     bd2:	8e ad       	ldd	r24, Y+62	; 0x3e
     bd4:	9f ad       	ldd	r25, Y+63	; 0x3f
     bd6:	29 97       	sbiw	r28, 0x09	; 9
     bd8:	2d ec       	ldi	r18, 0xCD	; 205
     bda:	3c ec       	ldi	r19, 0xCC	; 204
     bdc:	4c e4       	ldi	r20, 0x4C	; 76
     bde:	5e e3       	ldi	r21, 0x3E	; 62
     be0:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     be4:	2a e8       	ldi	r18, 0x8A	; 138
     be6:	3b e4       	ldi	r19, 0x4B	; 75
     be8:	46 e8       	ldi	r20, 0x86	; 134
     bea:	5c e3       	ldi	r21, 0x3C	; 60
     bec:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     bf0:	9b 01       	movw	r18, r22
     bf2:	ac 01       	movw	r20, r24
     bf4:	c8 01       	movw	r24, r16
     bf6:	b7 01       	movw	r22, r14
     bf8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     bfc:	60 93 a6 02 	sts	0x02A6, r22
     c00:	70 93 a7 02 	sts	0x02A7, r23
     c04:	80 93 a8 02 	sts	0x02A8, r24
     c08:	90 93 a9 02 	sts	0x02A9, r25
			integralFBz += mpu6050_mahonytwoKiDef * halfez * (1.0f / mpu6050_mahonysampleFreq);
     c0c:	e0 90 aa 02 	lds	r14, 0x02AA
     c10:	f0 90 ab 02 	lds	r15, 0x02AB
     c14:	00 91 ac 02 	lds	r16, 0x02AC
     c18:	10 91 ad 02 	lds	r17, 0x02AD
     c1c:	c2 01       	movw	r24, r4
     c1e:	b1 01       	movw	r22, r2
     c20:	2d ec       	ldi	r18, 0xCD	; 205
     c22:	3c ec       	ldi	r19, 0xCC	; 204
     c24:	4c e4       	ldi	r20, 0x4C	; 76
     c26:	5e e3       	ldi	r21, 0x3E	; 62
     c28:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     c2c:	2a e8       	ldi	r18, 0x8A	; 138
     c2e:	3b e4       	ldi	r19, 0x4B	; 75
     c30:	46 e8       	ldi	r20, 0x86	; 134
     c32:	5c e3       	ldi	r21, 0x3C	; 60
     c34:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     c38:	9b 01       	movw	r18, r22
     c3a:	ac 01       	movw	r20, r24
     c3c:	c8 01       	movw	r24, r16
     c3e:	b7 01       	movw	r22, r14
     c40:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     c44:	60 93 aa 02 	sts	0x02AA, r22
     c48:	70 93 ab 02 	sts	0x02AB, r23
     c4c:	80 93 ac 02 	sts	0x02AC, r24
     c50:	90 93 ad 02 	sts	0x02AD, r25
			gx += integralFBx;	// apply integral feedback
     c54:	20 91 a2 02 	lds	r18, 0x02A2
     c58:	30 91 a3 02 	lds	r19, 0x02A3
     c5c:	40 91 a4 02 	lds	r20, 0x02A4
     c60:	50 91 a5 02 	lds	r21, 0x02A5
     c64:	6d a1       	ldd	r22, Y+37	; 0x25
     c66:	7e a1       	ldd	r23, Y+38	; 0x26
     c68:	8f a1       	ldd	r24, Y+39	; 0x27
     c6a:	98 a5       	ldd	r25, Y+40	; 0x28
     c6c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     c70:	3b 01       	movw	r6, r22
     c72:	4c 01       	movw	r8, r24
			gy += integralFBy;
     c74:	20 91 a6 02 	lds	r18, 0x02A6
     c78:	30 91 a7 02 	lds	r19, 0x02A7
     c7c:	40 91 a8 02 	lds	r20, 0x02A8
     c80:	50 91 a9 02 	lds	r21, 0x02A9
     c84:	69 a5       	ldd	r22, Y+41	; 0x29
     c86:	7a a5       	ldd	r23, Y+42	; 0x2a
     c88:	8b a5       	ldd	r24, Y+43	; 0x2b
     c8a:	9c a5       	ldd	r25, Y+44	; 0x2c
     c8c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     c90:	5b 01       	movw	r10, r22
     c92:	6c 01       	movw	r12, r24
			gz += integralFBz;
     c94:	20 91 aa 02 	lds	r18, 0x02AA
     c98:	30 91 ab 02 	lds	r19, 0x02AB
     c9c:	40 91 ac 02 	lds	r20, 0x02AC
     ca0:	50 91 ad 02 	lds	r21, 0x02AD
     ca4:	6d a5       	ldd	r22, Y+45	; 0x2d
     ca6:	7e a5       	ldd	r23, Y+46	; 0x2e
     ca8:	8f a5       	ldd	r24, Y+47	; 0x2f
     caa:	98 a9       	ldd	r25, Y+48	; 0x30
     cac:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     cb0:	7b 01       	movw	r14, r22
     cb2:	8c 01       	movw	r16, r24
			integralFBy = 0.0f;
			integralFBz = 0.0f;
		}

		// Apply proportional feedback
		gx += mpu6050_mahonytwoKpDef * halfex;
     cb4:	c4 01       	movw	r24, r8
     cb6:	b3 01       	movw	r22, r6
     cb8:	25 96       	adiw	r28, 0x05	; 5
     cba:	2c ad       	ldd	r18, Y+60	; 0x3c
     cbc:	3d ad       	ldd	r19, Y+61	; 0x3d
     cbe:	4e ad       	ldd	r20, Y+62	; 0x3e
     cc0:	5f ad       	ldd	r21, Y+63	; 0x3f
     cc2:	25 97       	sbiw	r28, 0x05	; 5
     cc4:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     cc8:	6d a3       	std	Y+37, r22	; 0x25
     cca:	7e a3       	std	Y+38, r23	; 0x26
     ccc:	8f a3       	std	Y+39, r24	; 0x27
     cce:	98 a7       	std	Y+40, r25	; 0x28
		gy += mpu6050_mahonytwoKpDef * halfey;
     cd0:	c6 01       	movw	r24, r12
     cd2:	b5 01       	movw	r22, r10
     cd4:	29 96       	adiw	r28, 0x09	; 9
     cd6:	2c ad       	ldd	r18, Y+60	; 0x3c
     cd8:	3d ad       	ldd	r19, Y+61	; 0x3d
     cda:	4e ad       	ldd	r20, Y+62	; 0x3e
     cdc:	5f ad       	ldd	r21, Y+63	; 0x3f
     cde:	29 97       	sbiw	r28, 0x09	; 9
     ce0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     ce4:	69 a7       	std	Y+41, r22	; 0x29
     ce6:	7a a7       	std	Y+42, r23	; 0x2a
     ce8:	8b a7       	std	Y+43, r24	; 0x2b
     cea:	9c a7       	std	Y+44, r25	; 0x2c
		gz += mpu6050_mahonytwoKpDef * halfez;
     cec:	c8 01       	movw	r24, r16
     cee:	b7 01       	movw	r22, r14
     cf0:	a2 01       	movw	r20, r4
     cf2:	91 01       	movw	r18, r2
     cf4:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     cf8:	6d a7       	std	Y+45, r22	; 0x2d
     cfa:	7e a7       	std	Y+46, r23	; 0x2e
     cfc:	8f a7       	std	Y+47, r24	; 0x2f
     cfe:	98 ab       	std	Y+48, r25	; 0x30
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));		// pre-multiply common factors
     d00:	6d a1       	ldd	r22, Y+37	; 0x25
     d02:	7e a1       	ldd	r23, Y+38	; 0x26
     d04:	8f a1       	ldd	r24, Y+39	; 0x27
     d06:	98 a5       	ldd	r25, Y+40	; 0x28
     d08:	2a e8       	ldi	r18, 0x8A	; 138
     d0a:	3b e4       	ldi	r19, 0x4B	; 75
     d0c:	46 e0       	ldi	r20, 0x06	; 6
     d0e:	5c e3       	ldi	r21, 0x3C	; 60
     d10:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     d14:	2d 96       	adiw	r28, 0x0d	; 13
     d16:	6c af       	std	Y+60, r22	; 0x3c
     d18:	7d af       	std	Y+61, r23	; 0x3d
     d1a:	8e af       	std	Y+62, r24	; 0x3e
     d1c:	9f af       	std	Y+63, r25	; 0x3f
     d1e:	2d 97       	sbiw	r28, 0x0d	; 13
	gy *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
     d20:	69 a5       	ldd	r22, Y+41	; 0x29
     d22:	7a a5       	ldd	r23, Y+42	; 0x2a
     d24:	8b a5       	ldd	r24, Y+43	; 0x2b
     d26:	9c a5       	ldd	r25, Y+44	; 0x2c
     d28:	2a e8       	ldi	r18, 0x8A	; 138
     d2a:	3b e4       	ldi	r19, 0x4B	; 75
     d2c:	46 e0       	ldi	r20, 0x06	; 6
     d2e:	5c e3       	ldi	r21, 0x3C	; 60
     d30:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     d34:	1b 01       	movw	r2, r22
     d36:	2c 01       	movw	r4, r24
	gz *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
     d38:	6d a5       	ldd	r22, Y+45	; 0x2d
     d3a:	7e a5       	ldd	r23, Y+46	; 0x2e
     d3c:	8f a5       	ldd	r24, Y+47	; 0x2f
     d3e:	98 a9       	ldd	r25, Y+48	; 0x30
     d40:	2a e8       	ldi	r18, 0x8A	; 138
     d42:	3b e4       	ldi	r19, 0x4B	; 75
     d44:	46 e0       	ldi	r20, 0x06	; 6
     d46:	5c e3       	ldi	r21, 0x3C	; 60
     d48:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     d4c:	3b 01       	movw	r6, r22
     d4e:	4c 01       	movw	r8, r24
	qa = q0;
     d50:	e0 90 00 01 	lds	r14, 0x0100
     d54:	f0 90 01 01 	lds	r15, 0x0101
     d58:	00 91 02 01 	lds	r16, 0x0102
     d5c:	10 91 03 01 	lds	r17, 0x0103
     d60:	e9 86       	std	Y+9, r14	; 0x09
     d62:	fa 86       	std	Y+10, r15	; 0x0a
     d64:	0b 87       	std	Y+11, r16	; 0x0b
     d66:	1c 87       	std	Y+12, r17	; 0x0c
	qb = q1;
     d68:	80 91 96 02 	lds	r24, 0x0296
     d6c:	90 91 97 02 	lds	r25, 0x0297
     d70:	a0 91 98 02 	lds	r26, 0x0298
     d74:	b0 91 99 02 	lds	r27, 0x0299
     d78:	8d 83       	std	Y+5, r24	; 0x05
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	af 83       	std	Y+7, r26	; 0x07
     d7e:	b8 87       	std	Y+8, r27	; 0x08
	qc = q2;
     d80:	e0 90 9a 02 	lds	r14, 0x029A
     d84:	f0 90 9b 02 	lds	r15, 0x029B
     d88:	00 91 9c 02 	lds	r16, 0x029C
     d8c:	10 91 9d 02 	lds	r17, 0x029D
     d90:	e9 82       	std	Y+1, r14	; 0x01
     d92:	fa 82       	std	Y+2, r15	; 0x02
     d94:	0b 83       	std	Y+3, r16	; 0x03
     d96:	1c 83       	std	Y+4, r17	; 0x04
	q0 += (-qb * gx - qc * gy - q3 * gz);
     d98:	80 91 00 01 	lds	r24, 0x0100
     d9c:	90 91 01 01 	lds	r25, 0x0101
     da0:	a0 91 02 01 	lds	r26, 0x0102
     da4:	b0 91 03 01 	lds	r27, 0x0103
     da8:	89 a3       	std	Y+33, r24	; 0x21
     daa:	9a a3       	std	Y+34, r25	; 0x22
     dac:	ab a3       	std	Y+35, r26	; 0x23
     dae:	bc a3       	std	Y+36, r27	; 0x24
     db0:	a0 90 9e 02 	lds	r10, 0x029E
     db4:	b0 90 9f 02 	lds	r11, 0x029F
     db8:	c0 90 a0 02 	lds	r12, 0x02A0
     dbc:	d0 90 a1 02 	lds	r13, 0x02A1
     dc0:	6d 81       	ldd	r22, Y+5	; 0x05
     dc2:	7e 81       	ldd	r23, Y+6	; 0x06
     dc4:	8f 81       	ldd	r24, Y+7	; 0x07
     dc6:	98 85       	ldd	r25, Y+8	; 0x08
     dc8:	90 58       	subi	r25, 0x80	; 128
     dca:	2d 96       	adiw	r28, 0x0d	; 13
     dcc:	2c ad       	ldd	r18, Y+60	; 0x3c
     dce:	3d ad       	ldd	r19, Y+61	; 0x3d
     dd0:	4e ad       	ldd	r20, Y+62	; 0x3e
     dd2:	5f ad       	ldd	r21, Y+63	; 0x3f
     dd4:	2d 97       	sbiw	r28, 0x0d	; 13
     dd6:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     dda:	7b 01       	movw	r14, r22
     ddc:	8c 01       	movw	r16, r24
     dde:	69 81       	ldd	r22, Y+1	; 0x01
     de0:	7a 81       	ldd	r23, Y+2	; 0x02
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	9c 81       	ldd	r25, Y+4	; 0x04
     de6:	a2 01       	movw	r20, r4
     de8:	91 01       	movw	r18, r2
     dea:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     dee:	9b 01       	movw	r18, r22
     df0:	ac 01       	movw	r20, r24
     df2:	c8 01       	movw	r24, r16
     df4:	b7 01       	movw	r22, r14
     df6:	0e 94 b6 12 	call	0x256c	; 0x256c <__subsf3>
     dfa:	7b 01       	movw	r14, r22
     dfc:	8c 01       	movw	r16, r24
     dfe:	c6 01       	movw	r24, r12
     e00:	b5 01       	movw	r22, r10
     e02:	a4 01       	movw	r20, r8
     e04:	93 01       	movw	r18, r6
     e06:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     e0a:	9b 01       	movw	r18, r22
     e0c:	ac 01       	movw	r20, r24
     e0e:	c8 01       	movw	r24, r16
     e10:	b7 01       	movw	r22, r14
     e12:	0e 94 b6 12 	call	0x256c	; 0x256c <__subsf3>
     e16:	9b 01       	movw	r18, r22
     e18:	ac 01       	movw	r20, r24
     e1a:	69 a1       	ldd	r22, Y+33	; 0x21
     e1c:	7a a1       	ldd	r23, Y+34	; 0x22
     e1e:	8b a1       	ldd	r24, Y+35	; 0x23
     e20:	9c a1       	ldd	r25, Y+36	; 0x24
     e22:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     e26:	60 93 00 01 	sts	0x0100, r22
     e2a:	70 93 01 01 	sts	0x0101, r23
     e2e:	80 93 02 01 	sts	0x0102, r24
     e32:	90 93 03 01 	sts	0x0103, r25
	q1 += (qa * gx + qc * gz - q3 * gy);
     e36:	e0 90 96 02 	lds	r14, 0x0296
     e3a:	f0 90 97 02 	lds	r15, 0x0297
     e3e:	00 91 98 02 	lds	r16, 0x0298
     e42:	10 91 99 02 	lds	r17, 0x0299
     e46:	ed 8e       	std	Y+29, r14	; 0x1d
     e48:	fe 8e       	std	Y+30, r15	; 0x1e
     e4a:	0f 8f       	std	Y+31, r16	; 0x1f
     e4c:	18 a3       	std	Y+32, r17	; 0x20
     e4e:	a0 90 9e 02 	lds	r10, 0x029E
     e52:	b0 90 9f 02 	lds	r11, 0x029F
     e56:	c0 90 a0 02 	lds	r12, 0x02A0
     e5a:	d0 90 a1 02 	lds	r13, 0x02A1
     e5e:	69 85       	ldd	r22, Y+9	; 0x09
     e60:	7a 85       	ldd	r23, Y+10	; 0x0a
     e62:	8b 85       	ldd	r24, Y+11	; 0x0b
     e64:	9c 85       	ldd	r25, Y+12	; 0x0c
     e66:	2d 96       	adiw	r28, 0x0d	; 13
     e68:	2c ad       	ldd	r18, Y+60	; 0x3c
     e6a:	3d ad       	ldd	r19, Y+61	; 0x3d
     e6c:	4e ad       	ldd	r20, Y+62	; 0x3e
     e6e:	5f ad       	ldd	r21, Y+63	; 0x3f
     e70:	2d 97       	sbiw	r28, 0x0d	; 13
     e72:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     e76:	7b 01       	movw	r14, r22
     e78:	8c 01       	movw	r16, r24
     e7a:	69 81       	ldd	r22, Y+1	; 0x01
     e7c:	7a 81       	ldd	r23, Y+2	; 0x02
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	a4 01       	movw	r20, r8
     e84:	93 01       	movw	r18, r6
     e86:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     e8a:	9b 01       	movw	r18, r22
     e8c:	ac 01       	movw	r20, r24
     e8e:	c8 01       	movw	r24, r16
     e90:	b7 01       	movw	r22, r14
     e92:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     e96:	7b 01       	movw	r14, r22
     e98:	8c 01       	movw	r16, r24
     e9a:	c6 01       	movw	r24, r12
     e9c:	b5 01       	movw	r22, r10
     e9e:	a2 01       	movw	r20, r4
     ea0:	91 01       	movw	r18, r2
     ea2:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     ea6:	9b 01       	movw	r18, r22
     ea8:	ac 01       	movw	r20, r24
     eaa:	c8 01       	movw	r24, r16
     eac:	b7 01       	movw	r22, r14
     eae:	0e 94 b6 12 	call	0x256c	; 0x256c <__subsf3>
     eb2:	9b 01       	movw	r18, r22
     eb4:	ac 01       	movw	r20, r24
     eb6:	6d 8d       	ldd	r22, Y+29	; 0x1d
     eb8:	7e 8d       	ldd	r23, Y+30	; 0x1e
     eba:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ebc:	98 a1       	ldd	r25, Y+32	; 0x20
     ebe:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     ec2:	60 93 96 02 	sts	0x0296, r22
     ec6:	70 93 97 02 	sts	0x0297, r23
     eca:	80 93 98 02 	sts	0x0298, r24
     ece:	90 93 99 02 	sts	0x0299, r25
	q2 += (qa * gy - qb * gz + q3 * gx);
     ed2:	80 91 9a 02 	lds	r24, 0x029A
     ed6:	90 91 9b 02 	lds	r25, 0x029B
     eda:	a0 91 9c 02 	lds	r26, 0x029C
     ede:	b0 91 9d 02 	lds	r27, 0x029D
     ee2:	89 8f       	std	Y+25, r24	; 0x19
     ee4:	9a 8f       	std	Y+26, r25	; 0x1a
     ee6:	ab 8f       	std	Y+27, r26	; 0x1b
     ee8:	bc 8f       	std	Y+28, r27	; 0x1c
     eea:	a0 90 9e 02 	lds	r10, 0x029E
     eee:	b0 90 9f 02 	lds	r11, 0x029F
     ef2:	c0 90 a0 02 	lds	r12, 0x02A0
     ef6:	d0 90 a1 02 	lds	r13, 0x02A1
     efa:	69 85       	ldd	r22, Y+9	; 0x09
     efc:	7a 85       	ldd	r23, Y+10	; 0x0a
     efe:	8b 85       	ldd	r24, Y+11	; 0x0b
     f00:	9c 85       	ldd	r25, Y+12	; 0x0c
     f02:	a2 01       	movw	r20, r4
     f04:	91 01       	movw	r18, r2
     f06:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     f0a:	7b 01       	movw	r14, r22
     f0c:	8c 01       	movw	r16, r24
     f0e:	6d 81       	ldd	r22, Y+5	; 0x05
     f10:	7e 81       	ldd	r23, Y+6	; 0x06
     f12:	8f 81       	ldd	r24, Y+7	; 0x07
     f14:	98 85       	ldd	r25, Y+8	; 0x08
     f16:	a4 01       	movw	r20, r8
     f18:	93 01       	movw	r18, r6
     f1a:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     f1e:	9b 01       	movw	r18, r22
     f20:	ac 01       	movw	r20, r24
     f22:	c8 01       	movw	r24, r16
     f24:	b7 01       	movw	r22, r14
     f26:	0e 94 b6 12 	call	0x256c	; 0x256c <__subsf3>
     f2a:	7b 01       	movw	r14, r22
     f2c:	8c 01       	movw	r16, r24
     f2e:	c6 01       	movw	r24, r12
     f30:	b5 01       	movw	r22, r10
     f32:	2d 96       	adiw	r28, 0x0d	; 13
     f34:	2c ad       	ldd	r18, Y+60	; 0x3c
     f36:	3d ad       	ldd	r19, Y+61	; 0x3d
     f38:	4e ad       	ldd	r20, Y+62	; 0x3e
     f3a:	5f ad       	ldd	r21, Y+63	; 0x3f
     f3c:	2d 97       	sbiw	r28, 0x0d	; 13
     f3e:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     f42:	9b 01       	movw	r18, r22
     f44:	ac 01       	movw	r20, r24
     f46:	c8 01       	movw	r24, r16
     f48:	b7 01       	movw	r22, r14
     f4a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     f4e:	9b 01       	movw	r18, r22
     f50:	ac 01       	movw	r20, r24
     f52:	69 8d       	ldd	r22, Y+25	; 0x19
     f54:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f56:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f58:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f5a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     f5e:	60 93 9a 02 	sts	0x029A, r22
     f62:	70 93 9b 02 	sts	0x029B, r23
     f66:	80 93 9c 02 	sts	0x029C, r24
     f6a:	90 93 9d 02 	sts	0x029D, r25
	q3 += (qa * gz + qb * gy - qc * gx);
     f6e:	a0 90 9e 02 	lds	r10, 0x029E
     f72:	b0 90 9f 02 	lds	r11, 0x029F
     f76:	c0 90 a0 02 	lds	r12, 0x02A0
     f7a:	d0 90 a1 02 	lds	r13, 0x02A1
     f7e:	69 85       	ldd	r22, Y+9	; 0x09
     f80:	7a 85       	ldd	r23, Y+10	; 0x0a
     f82:	8b 85       	ldd	r24, Y+11	; 0x0b
     f84:	9c 85       	ldd	r25, Y+12	; 0x0c
     f86:	a4 01       	movw	r20, r8
     f88:	93 01       	movw	r18, r6
     f8a:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     f8e:	7b 01       	movw	r14, r22
     f90:	8c 01       	movw	r16, r24
     f92:	6d 81       	ldd	r22, Y+5	; 0x05
     f94:	7e 81       	ldd	r23, Y+6	; 0x06
     f96:	8f 81       	ldd	r24, Y+7	; 0x07
     f98:	98 85       	ldd	r25, Y+8	; 0x08
     f9a:	a2 01       	movw	r20, r4
     f9c:	91 01       	movw	r18, r2
     f9e:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     fa2:	9b 01       	movw	r18, r22
     fa4:	ac 01       	movw	r20, r24
     fa6:	c8 01       	movw	r24, r16
     fa8:	b7 01       	movw	r22, r14
     faa:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     fae:	7b 01       	movw	r14, r22
     fb0:	8c 01       	movw	r16, r24
     fb2:	69 81       	ldd	r22, Y+1	; 0x01
     fb4:	7a 81       	ldd	r23, Y+2	; 0x02
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	2d 96       	adiw	r28, 0x0d	; 13
     fbc:	2c ad       	ldd	r18, Y+60	; 0x3c
     fbe:	3d ad       	ldd	r19, Y+61	; 0x3d
     fc0:	4e ad       	ldd	r20, Y+62	; 0x3e
     fc2:	5f ad       	ldd	r21, Y+63	; 0x3f
     fc4:	2d 97       	sbiw	r28, 0x0d	; 13
     fc6:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
     fca:	9b 01       	movw	r18, r22
     fcc:	ac 01       	movw	r20, r24
     fce:	c8 01       	movw	r24, r16
     fd0:	b7 01       	movw	r22, r14
     fd2:	0e 94 b6 12 	call	0x256c	; 0x256c <__subsf3>
     fd6:	9b 01       	movw	r18, r22
     fd8:	ac 01       	movw	r20, r24
     fda:	c6 01       	movw	r24, r12
     fdc:	b5 01       	movw	r22, r10
     fde:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
     fe2:	60 93 9e 02 	sts	0x029E, r22
     fe6:	70 93 9f 02 	sts	0x029F, r23
     fea:	80 93 a0 02 	sts	0x02A0, r24
     fee:	90 93 a1 02 	sts	0x02A1, r25

	// Normalise quaternion
	norm = sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
     ff2:	60 91 00 01 	lds	r22, 0x0100
     ff6:	70 91 01 01 	lds	r23, 0x0101
     ffa:	80 91 02 01 	lds	r24, 0x0102
     ffe:	90 91 03 01 	lds	r25, 0x0103
    1002:	20 91 00 01 	lds	r18, 0x0100
    1006:	30 91 01 01 	lds	r19, 0x0101
    100a:	40 91 02 01 	lds	r20, 0x0102
    100e:	50 91 03 01 	lds	r21, 0x0103
    1012:	a0 90 96 02 	lds	r10, 0x0296
    1016:	b0 90 97 02 	lds	r11, 0x0297
    101a:	c0 90 98 02 	lds	r12, 0x0298
    101e:	d0 90 99 02 	lds	r13, 0x0299
    1022:	60 90 96 02 	lds	r6, 0x0296
    1026:	70 90 97 02 	lds	r7, 0x0297
    102a:	80 90 98 02 	lds	r8, 0x0298
    102e:	90 90 99 02 	lds	r9, 0x0299
    1032:	20 90 9a 02 	lds	r2, 0x029A
    1036:	30 90 9b 02 	lds	r3, 0x029B
    103a:	40 90 9c 02 	lds	r4, 0x029C
    103e:	50 90 9d 02 	lds	r5, 0x029D
    1042:	e0 90 9a 02 	lds	r14, 0x029A
    1046:	f0 90 9b 02 	lds	r15, 0x029B
    104a:	00 91 9c 02 	lds	r16, 0x029C
    104e:	10 91 9d 02 	lds	r17, 0x029D
    1052:	ed 8a       	std	Y+21, r14	; 0x15
    1054:	fe 8a       	std	Y+22, r15	; 0x16
    1056:	0f 8b       	std	Y+23, r16	; 0x17
    1058:	18 8f       	std	Y+24, r17	; 0x18
    105a:	e0 90 9e 02 	lds	r14, 0x029E
    105e:	f0 90 9f 02 	lds	r15, 0x029F
    1062:	00 91 a0 02 	lds	r16, 0x02A0
    1066:	10 91 a1 02 	lds	r17, 0x02A1
    106a:	e9 8a       	std	Y+17, r14	; 0x11
    106c:	fa 8a       	std	Y+18, r15	; 0x12
    106e:	0b 8b       	std	Y+19, r16	; 0x13
    1070:	1c 8b       	std	Y+20, r17	; 0x14
    1072:	e0 90 9e 02 	lds	r14, 0x029E
    1076:	f0 90 9f 02 	lds	r15, 0x029F
    107a:	00 91 a0 02 	lds	r16, 0x02A0
    107e:	10 91 a1 02 	lds	r17, 0x02A1
    1082:	ed 86       	std	Y+13, r14	; 0x0d
    1084:	fe 86       	std	Y+14, r15	; 0x0e
    1086:	0f 87       	std	Y+15, r16	; 0x0f
    1088:	18 8b       	std	Y+16, r17	; 0x10
    108a:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    108e:	7b 01       	movw	r14, r22
    1090:	8c 01       	movw	r16, r24
    1092:	c6 01       	movw	r24, r12
    1094:	b5 01       	movw	r22, r10
    1096:	a4 01       	movw	r20, r8
    1098:	93 01       	movw	r18, r6
    109a:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    109e:	9b 01       	movw	r18, r22
    10a0:	ac 01       	movw	r20, r24
    10a2:	c8 01       	movw	r24, r16
    10a4:	b7 01       	movw	r22, r14
    10a6:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
    10aa:	7b 01       	movw	r14, r22
    10ac:	8c 01       	movw	r16, r24
    10ae:	c2 01       	movw	r24, r4
    10b0:	b1 01       	movw	r22, r2
    10b2:	2d 89       	ldd	r18, Y+21	; 0x15
    10b4:	3e 89       	ldd	r19, Y+22	; 0x16
    10b6:	4f 89       	ldd	r20, Y+23	; 0x17
    10b8:	58 8d       	ldd	r21, Y+24	; 0x18
    10ba:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    10be:	9b 01       	movw	r18, r22
    10c0:	ac 01       	movw	r20, r24
    10c2:	c8 01       	movw	r24, r16
    10c4:	b7 01       	movw	r22, r14
    10c6:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
    10ca:	7b 01       	movw	r14, r22
    10cc:	8c 01       	movw	r16, r24
    10ce:	69 89       	ldd	r22, Y+17	; 0x11
    10d0:	7a 89       	ldd	r23, Y+18	; 0x12
    10d2:	8b 89       	ldd	r24, Y+19	; 0x13
    10d4:	9c 89       	ldd	r25, Y+20	; 0x14
    10d6:	2d 85       	ldd	r18, Y+13	; 0x0d
    10d8:	3e 85       	ldd	r19, Y+14	; 0x0e
    10da:	4f 85       	ldd	r20, Y+15	; 0x0f
    10dc:	58 89       	ldd	r21, Y+16	; 0x10
    10de:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    10e2:	9b 01       	movw	r18, r22
    10e4:	ac 01       	movw	r20, r24
    10e6:	c8 01       	movw	r24, r16
    10e8:	b7 01       	movw	r22, r14
    10ea:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
    10ee:	0e 94 b5 19 	call	0x336a	; 0x336a <sqrt>
    10f2:	7b 01       	movw	r14, r22
    10f4:	8c 01       	movw	r16, r24
	q0 /= norm;
    10f6:	60 91 00 01 	lds	r22, 0x0100
    10fa:	70 91 01 01 	lds	r23, 0x0101
    10fe:	80 91 02 01 	lds	r24, 0x0102
    1102:	90 91 03 01 	lds	r25, 0x0103
    1106:	a8 01       	movw	r20, r16
    1108:	97 01       	movw	r18, r14
    110a:	0e 94 0e 14 	call	0x281c	; 0x281c <__divsf3>
    110e:	60 93 00 01 	sts	0x0100, r22
    1112:	70 93 01 01 	sts	0x0101, r23
    1116:	80 93 02 01 	sts	0x0102, r24
    111a:	90 93 03 01 	sts	0x0103, r25
	q1 /= norm;
    111e:	60 91 96 02 	lds	r22, 0x0296
    1122:	70 91 97 02 	lds	r23, 0x0297
    1126:	80 91 98 02 	lds	r24, 0x0298
    112a:	90 91 99 02 	lds	r25, 0x0299
    112e:	a8 01       	movw	r20, r16
    1130:	97 01       	movw	r18, r14
    1132:	0e 94 0e 14 	call	0x281c	; 0x281c <__divsf3>
    1136:	60 93 96 02 	sts	0x0296, r22
    113a:	70 93 97 02 	sts	0x0297, r23
    113e:	80 93 98 02 	sts	0x0298, r24
    1142:	90 93 99 02 	sts	0x0299, r25
	q2 /= norm;
    1146:	60 91 9a 02 	lds	r22, 0x029A
    114a:	70 91 9b 02 	lds	r23, 0x029B
    114e:	80 91 9c 02 	lds	r24, 0x029C
    1152:	90 91 9d 02 	lds	r25, 0x029D
    1156:	a8 01       	movw	r20, r16
    1158:	97 01       	movw	r18, r14
    115a:	0e 94 0e 14 	call	0x281c	; 0x281c <__divsf3>
    115e:	60 93 9a 02 	sts	0x029A, r22
    1162:	70 93 9b 02 	sts	0x029B, r23
    1166:	80 93 9c 02 	sts	0x029C, r24
    116a:	90 93 9d 02 	sts	0x029D, r25
	q3 /= norm;
    116e:	60 91 9e 02 	lds	r22, 0x029E
    1172:	70 91 9f 02 	lds	r23, 0x029F
    1176:	80 91 a0 02 	lds	r24, 0x02A0
    117a:	90 91 a1 02 	lds	r25, 0x02A1
    117e:	a8 01       	movw	r20, r16
    1180:	97 01       	movw	r18, r14
    1182:	0e 94 0e 14 	call	0x281c	; 0x281c <__divsf3>
    1186:	60 93 9e 02 	sts	0x029E, r22
    118a:	70 93 9f 02 	sts	0x029F, r23
    118e:	80 93 a0 02 	sts	0x02A0, r24
    1192:	90 93 a1 02 	sts	0x02A1, r25
}
    1196:	c4 5b       	subi	r28, 0xB4	; 180
    1198:	df 4f       	sbci	r29, 0xFF	; 255
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	cf 90       	pop	r12
    11b4:	bf 90       	pop	r11
    11b6:	af 90       	pop	r10
    11b8:	9f 90       	pop	r9
    11ba:	8f 90       	pop	r8
    11bc:	7f 90       	pop	r7
    11be:	6f 90       	pop	r6
    11c0:	5f 90       	pop	r5
    11c2:	4f 90       	pop	r4
    11c4:	3f 90       	pop	r3
    11c6:	2f 90       	pop	r2
    11c8:	08 95       	ret

000011ca <mpu6050_writeBytes>:
}

/*
 * write bytes to chip register
 */
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	18 2f       	mov	r17, r24
    11d8:	e6 2e       	mov	r14, r22
    11da:	04 2f       	mov	r16, r20
    11dc:	f5 2e       	mov	r15, r21
	if(length > 0) {
    11de:	66 23       	and	r22, r22
    11e0:	a1 f0       	breq	.+40     	; 0x120a <mpu6050_writeBytes+0x40>
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
    11e2:	80 ed       	ldi	r24, 0xD0	; 208
    11e4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <i2c_start>
		i2c_write(regAddr); //reg
    11e8:	81 2f       	mov	r24, r17
    11ea:	0e 94 57 0d 	call	0x1aae	; 0x1aae <i2c_write>
    11ee:	80 2f       	mov	r24, r16
    11f0:	9f 2d       	mov	r25, r15
    11f2:	9c 01       	movw	r18, r24
    11f4:	e9 01       	movw	r28, r18
    11f6:	10 e0       	ldi	r17, 0x00	; 0
    11f8:	04 c0       	rjmp	.+8      	; 0x1202 <mpu6050_writeBytes+0x38>
		for (uint8_t i = 0; i < length; i++) {
			i2c_write((uint8_t) data[i]);
    11fa:	89 91       	ld	r24, Y+
    11fc:	0e 94 57 0d 	call	0x1aae	; 0x1aae <i2c_write>
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
	if(length > 0) {
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr); //reg
		for (uint8_t i = 0; i < length; i++) {
    1200:	1f 5f       	subi	r17, 0xFF	; 255
    1202:	1e 15       	cp	r17, r14
    1204:	d0 f3       	brcs	.-12     	; 0x11fa <mpu6050_writeBytes+0x30>
			i2c_write((uint8_t) data[i]);
		}
		i2c_stop();
    1206:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <i2c_stop>
	}
}
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	08 95       	ret

00001218 <mpu6050_writeByte>:

/*
 * write 1 byte to chip register
 */
void mpu6050_writeByte(uint8_t regAddr, uint8_t data) {
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	69 83       	std	Y+1, r22	; 0x01
    return mpu6050_writeBytes(regAddr, 1, &data);
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	ae 01       	movw	r20, r28
    1228:	4f 5f       	subi	r20, 0xFF	; 255
    122a:	5f 4f       	sbci	r21, 0xFF	; 255
    122c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <mpu6050_writeBytes>
}
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <mpu6050_readBytes>:
volatile uint8_t buffer[14];

/*
 * read bytes from chip register
 */
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	18 2f       	mov	r17, r24
    1248:	d6 2e       	mov	r13, r22
    124a:	04 2f       	mov	r16, r20
    124c:	f5 2e       	mov	r15, r21
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
    124e:	66 23       	and	r22, r22
    1250:	11 f4       	brne	.+4      	; 0x1256 <mpu6050_readBytes+0x1e>
    1252:	10 e0       	ldi	r17, 0x00	; 0
    1254:	2a c0       	rjmp	.+84     	; 0x12aa <mpu6050_readBytes+0x72>
		//request register
		i2c_start(MPU6050_ADDR | I2C_WRITE);
    1256:	80 ed       	ldi	r24, 0xD0	; 208
    1258:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <i2c_start>
		i2c_write(regAddr);
    125c:	81 2f       	mov	r24, r17
    125e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <i2c_write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1262:	83 e0       	ldi	r24, 0x03	; 3
    1264:	8a 95       	dec	r24
    1266:	f1 f7       	brne	.-4      	; 0x1264 <mpu6050_readBytes+0x2c>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
    1268:	81 ed       	ldi	r24, 0xD1	; 209
    126a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <i2c_start>
    126e:	80 2f       	mov	r24, r16
    1270:	9f 2d       	mov	r25, r15
    1272:	9c 01       	movw	r18, r24
    1274:	89 01       	movw	r16, r18
    1276:	c0 e0       	ldi	r28, 0x00	; 0
    1278:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
    127a:	ed 2c       	mov	r14, r13
    127c:	ff 24       	eor	r15, r15
    127e:	08 94       	sec
    1280:	e1 08       	sbc	r14, r1
    1282:	f1 08       	sbc	r15, r1
    1284:	0d c0       	rjmp	.+26     	; 0x12a0 <mpu6050_readBytes+0x68>
    1286:	ce 15       	cp	r28, r14
    1288:	df 05       	cpc	r29, r15
    128a:	19 f4       	brne	.+6      	; 0x1292 <mpu6050_readBytes+0x5a>
				data[i] = i2c_readNak();
    128c:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <i2c_readNak>
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <mpu6050_readBytes+0x5e>
			else
				data[i] = i2c_readAck();
    1292:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <i2c_readAck>
    1296:	f8 01       	movw	r30, r16
    1298:	80 83       	st	Z, r24
    129a:	21 96       	adiw	r28, 0x01	; 1
    129c:	0f 5f       	subi	r16, 0xFF	; 255
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
		for(i=0; i<length; i++) {
    12a0:	cd 15       	cp	r28, r13
    12a2:	88 f3       	brcs	.-30     	; 0x1286 <mpu6050_readBytes+0x4e>
    12a4:	1d 2d       	mov	r17, r13
			if(i==length-1)
				data[i] = i2c_readNak();
			else
				data[i] = i2c_readAck();
		}
		i2c_stop();
    12a6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <i2c_stop>
	}
	return count;
}
    12aa:	81 2f       	mov	r24, r17
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	08 95       	ret

000012bc <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
    12bc:	6f 92       	push	r6
    12be:	7f 92       	push	r7
    12c0:	8f 92       	push	r8
    12c2:	9f 92       	push	r9
    12c4:	af 92       	push	r10
    12c6:	bf 92       	push	r11
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	6c 01       	movw	r12, r24
    12d6:	5b 01       	movw	r10, r22
    12d8:	4a 01       	movw	r8, r20
    12da:	39 01       	movw	r6, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    12dc:	8b e3       	ldi	r24, 0x3B	; 59
    12de:	6e e0       	ldi	r22, 0x0E	; 14
    12e0:	42 eb       	ldi	r20, 0xB2	; 178
    12e2:	52 e0       	ldi	r21, 0x02	; 2
    12e4:	0e 94 1c 09 	call	0x1238	; 0x1238 <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    12e8:	40 91 b2 02 	lds	r20, 0x02B2
    12ec:	20 91 b3 02 	lds	r18, 0x02B3
    12f0:	94 2f       	mov	r25, r20
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	82 2b       	or	r24, r18
    12f8:	93 2b       	or	r25, r19
    12fa:	f6 01       	movw	r30, r12
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	80 83       	st	Z, r24
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    1300:	40 91 b4 02 	lds	r20, 0x02B4
    1304:	20 91 b5 02 	lds	r18, 0x02B5
    1308:	94 2f       	mov	r25, r20
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	82 2b       	or	r24, r18
    1310:	93 2b       	or	r25, r19
    1312:	f5 01       	movw	r30, r10
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	80 83       	st	Z, r24
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
    1318:	40 91 b6 02 	lds	r20, 0x02B6
    131c:	20 91 b7 02 	lds	r18, 0x02B7
    1320:	94 2f       	mov	r25, r20
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	82 2b       	or	r24, r18
    1328:	93 2b       	or	r25, r19
    132a:	f4 01       	movw	r30, r8
    132c:	91 83       	std	Z+1, r25	; 0x01
    132e:	80 83       	st	Z, r24
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    1330:	40 91 ba 02 	lds	r20, 0x02BA
    1334:	20 91 bb 02 	lds	r18, 0x02BB
    1338:	94 2f       	mov	r25, r20
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	82 2b       	or	r24, r18
    1340:	93 2b       	or	r25, r19
    1342:	f3 01       	movw	r30, r6
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	80 83       	st	Z, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    1348:	40 91 bc 02 	lds	r20, 0x02BC
    134c:	20 91 bd 02 	lds	r18, 0x02BD
    1350:	94 2f       	mov	r25, r20
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	82 2b       	or	r24, r18
    1358:	93 2b       	or	r25, r19
    135a:	f8 01       	movw	r30, r16
    135c:	91 83       	std	Z+1, r25	; 0x01
    135e:	80 83       	st	Z, r24
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    1360:	40 91 be 02 	lds	r20, 0x02BE
    1364:	20 91 bf 02 	lds	r18, 0x02BF
    1368:	94 2f       	mov	r25, r20
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	82 2b       	or	r24, r18
    1370:	93 2b       	or	r25, r19
    1372:	f7 01       	movw	r30, r14
    1374:	91 83       	std	Z+1, r25	; 0x01
    1376:	80 83       	st	Z, r24
}
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	ff 90       	pop	r15
    137e:	ef 90       	pop	r14
    1380:	df 90       	pop	r13
    1382:	cf 90       	pop	r12
    1384:	bf 90       	pop	r11
    1386:	af 90       	pop	r10
    1388:	9f 90       	pop	r9
    138a:	8f 90       	pop	r8
    138c:	7f 90       	pop	r7
    138e:	6f 90       	pop	r6
    1390:	08 95       	ret

00001392 <mpu6050_getConvData>:

/*
 * get raw data converted to g and deg/sec values
 */
void mpu6050_getConvData(double* axg, double* ayg, double* azg, double* gxds, double* gyds, double* gzds) {
    1392:	2f 92       	push	r2
    1394:	3f 92       	push	r3
    1396:	4f 92       	push	r4
    1398:	5f 92       	push	r5
    139a:	6f 92       	push	r6
    139c:	7f 92       	push	r7
    139e:	8f 92       	push	r8
    13a0:	9f 92       	push	r9
    13a2:	af 92       	push	r10
    13a4:	bf 92       	push	r11
    13a6:	cf 92       	push	r12
    13a8:	df 92       	push	r13
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	2c 97       	sbiw	r28, 0x0c	; 12
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	6c 01       	movw	r12, r24
    13c8:	5b 01       	movw	r10, r22
    13ca:	4a 01       	movw	r8, r20
    13cc:	39 01       	movw	r6, r18
    13ce:	28 01       	movw	r4, r16
    13d0:	17 01       	movw	r2, r14
	int16_t ax = 0;
    13d2:	1a 82       	std	Y+2, r1	; 0x02
    13d4:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
    13d6:	1c 82       	std	Y+4, r1	; 0x04
    13d8:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
    13da:	1e 82       	std	Y+6, r1	; 0x06
    13dc:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
    13de:	18 86       	std	Y+8, r1	; 0x08
    13e0:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
    13e2:	1a 86       	std	Y+10, r1	; 0x0a
    13e4:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
    13e6:	1c 86       	std	Y+12, r1	; 0x0c
    13e8:	1b 86       	std	Y+11, r1	; 0x0b
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
    13ea:	ce 01       	movw	r24, r28
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	be 01       	movw	r22, r28
    13f0:	6d 5f       	subi	r22, 0xFD	; 253
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	ae 01       	movw	r20, r28
    13f6:	4b 5f       	subi	r20, 0xFB	; 251
    13f8:	5f 4f       	sbci	r21, 0xFF	; 255
    13fa:	9e 01       	movw	r18, r28
    13fc:	29 5f       	subi	r18, 0xF9	; 249
    13fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1400:	8e 01       	movw	r16, r28
    1402:	07 5f       	subi	r16, 0xF7	; 247
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	eb e0       	ldi	r30, 0x0B	; 11
    1408:	ee 2e       	mov	r14, r30
    140a:	f1 2c       	mov	r15, r1
    140c:	ec 0e       	add	r14, r28
    140e:	fd 1e       	adc	r15, r29
    1410:	0e 94 5e 09 	call	0x12bc	; 0x12bc <mpu6050_getRawData>

	#if MPU6050_CALIBRATEDACCGYRO == 1
    *axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
    1414:	69 81       	ldd	r22, Y+1	; 0x01
    1416:	7a 81       	ldd	r23, Y+2	; 0x02
    1418:	88 27       	eor	r24, r24
    141a:	77 fd       	sbrc	r23, 7
    141c:	80 95       	com	r24
    141e:	98 2f       	mov	r25, r24
    1420:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e8       	ldi	r20, 0x80	; 128
    142a:	58 e3       	ldi	r21, 0x38	; 56
    142c:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1430:	f6 01       	movw	r30, r12
    1432:	60 83       	st	Z, r22
    1434:	71 83       	std	Z+1, r23	; 0x01
    1436:	82 83       	std	Z+2, r24	; 0x02
    1438:	93 83       	std	Z+3, r25	; 0x03
    *ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
    143a:	6b 81       	ldd	r22, Y+3	; 0x03
    143c:	7c 81       	ldd	r23, Y+4	; 0x04
    143e:	88 27       	eor	r24, r24
    1440:	77 fd       	sbrc	r23, 7
    1442:	80 95       	com	r24
    1444:	98 2f       	mov	r25, r24
    1446:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e8       	ldi	r20, 0x80	; 128
    1450:	58 e3       	ldi	r21, 0x38	; 56
    1452:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1456:	f5 01       	movw	r30, r10
    1458:	60 83       	st	Z, r22
    145a:	71 83       	std	Z+1, r23	; 0x01
    145c:	82 83       	std	Z+2, r24	; 0x02
    145e:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
    1460:	6d 81       	ldd	r22, Y+5	; 0x05
    1462:	7e 81       	ldd	r23, Y+6	; 0x06
    1464:	88 27       	eor	r24, r24
    1466:	77 fd       	sbrc	r23, 7
    1468:	80 95       	com	r24
    146a:	98 2f       	mov	r25, r24
    146c:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e8       	ldi	r20, 0x80	; 128
    1476:	58 e3       	ldi	r21, 0x38	; 56
    1478:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    147c:	f4 01       	movw	r30, r8
    147e:	60 83       	st	Z, r22
    1480:	71 83       	std	Z+1, r23	; 0x01
    1482:	82 83       	std	Z+2, r24	; 0x02
    1484:	93 83       	std	Z+3, r25	; 0x03
    *gxds = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN;
    1486:	6f 81       	ldd	r22, Y+7	; 0x07
    1488:	78 85       	ldd	r23, Y+8	; 0x08
    148a:	66 5d       	subi	r22, 0xD6	; 214
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	88 27       	eor	r24, r24
    1490:	77 fd       	sbrc	r23, 7
    1492:	80 95       	com	r24
    1494:	98 2f       	mov	r25, r24
    1496:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    149a:	23 e3       	ldi	r18, 0x33	; 51
    149c:	33 e3       	ldi	r19, 0x33	; 51
    149e:	43 e8       	ldi	r20, 0x83	; 131
    14a0:	51 e4       	ldi	r21, 0x41	; 65
    14a2:	0e 94 0e 14 	call	0x281c	; 0x281c <__divsf3>
    14a6:	f3 01       	movw	r30, r6
    14a8:	60 83       	st	Z, r22
    14aa:	71 83       	std	Z+1, r23	; 0x01
    14ac:	82 83       	std	Z+2, r24	; 0x02
    14ae:	93 83       	std	Z+3, r25	; 0x03
	*gyds = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN;
    14b0:	69 85       	ldd	r22, Y+9	; 0x09
    14b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    14b4:	69 50       	subi	r22, 0x09	; 9
    14b6:	70 40       	sbci	r23, 0x00	; 0
    14b8:	88 27       	eor	r24, r24
    14ba:	77 fd       	sbrc	r23, 7
    14bc:	80 95       	com	r24
    14be:	98 2f       	mov	r25, r24
    14c0:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    14c4:	23 e3       	ldi	r18, 0x33	; 51
    14c6:	33 e3       	ldi	r19, 0x33	; 51
    14c8:	43 e8       	ldi	r20, 0x83	; 131
    14ca:	51 e4       	ldi	r21, 0x41	; 65
    14cc:	0e 94 0e 14 	call	0x281c	; 0x281c <__divsf3>
    14d0:	f2 01       	movw	r30, r4
    14d2:	60 83       	st	Z, r22
    14d4:	71 83       	std	Z+1, r23	; 0x01
    14d6:	82 83       	std	Z+2, r24	; 0x02
    14d8:	93 83       	std	Z+3, r25	; 0x03
	*gzds = (double)(gz-MPU6050_GZOFFSET)/MPU6050_GZGAIN;
    14da:	6b 85       	ldd	r22, Y+11	; 0x0b
    14dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14de:	63 5e       	subi	r22, 0xE3	; 227
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	88 27       	eor	r24, r24
    14e4:	77 fd       	sbrc	r23, 7
    14e6:	80 95       	com	r24
    14e8:	98 2f       	mov	r25, r24
    14ea:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    14ee:	23 e3       	ldi	r18, 0x33	; 51
    14f0:	33 e3       	ldi	r19, 0x33	; 51
    14f2:	43 e8       	ldi	r20, 0x83	; 131
    14f4:	51 e4       	ldi	r21, 0x41	; 65
    14f6:	0e 94 0e 14 	call	0x281c	; 0x281c <__divsf3>
    14fa:	f1 01       	movw	r30, r2
    14fc:	60 83       	st	Z, r22
    14fe:	71 83       	std	Z+1, r23	; 0x01
    1500:	82 83       	std	Z+2, r24	; 0x02
    1502:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az)/MPU6050_AGAIN;
    *gxds = (double)(gx)/MPU6050_GGAIN;
	*gyds = (double)(gy)/MPU6050_GGAIN;
	*gzds = (double)(gz)/MPU6050_GGAIN;
	#endif
}
    1504:	2c 96       	adiw	r28, 0x0c	; 12
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	ef 90       	pop	r14
    151c:	df 90       	pop	r13
    151e:	cf 90       	pop	r12
    1520:	bf 90       	pop	r11
    1522:	af 90       	pop	r10
    1524:	9f 90       	pop	r9
    1526:	8f 90       	pop	r8
    1528:	7f 90       	pop	r7
    152a:	6f 90       	pop	r6
    152c:	5f 90       	pop	r5
    152e:	4f 90       	pop	r4
    1530:	3f 90       	pop	r3
    1532:	2f 90       	pop	r2
    1534:	08 95       	ret

00001536 <mpu6050_readByte>:
}

/*
 * read 1 byte from chip register
 */
int8_t mpu6050_readByte(uint8_t regAddr, uint8_t *data) {
    1536:	ab 01       	movw	r20, r22
    return mpu6050_readBytes(regAddr, 1, data);
    1538:	61 e0       	ldi	r22, 0x01	; 1
    153a:	0e 94 1c 09 	call	0x1238	; 0x1238 <mpu6050_readBytes>
}
    153e:	08 95       	ret

00001540 <mpu6050_writeBit>:
}

/*
 * write one bit to chip register
 */
void mpu6050_writeBit(uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    1540:	ff 92       	push	r15
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	f8 2e       	mov	r15, r24
    1552:	06 2f       	mov	r16, r22
    1554:	14 2f       	mov	r17, r20
    uint8_t b;
    mpu6050_readByte(regAddr, &b);
    1556:	be 01       	movw	r22, r28
    1558:	6f 5f       	subi	r22, 0xFF	; 255
    155a:	7f 4f       	sbci	r23, 0xFF	; 255
    155c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <mpu6050_readByte>
    1560:	29 81       	ldd	r18, Y+1	; 0x01
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    1562:	11 23       	and	r17, r17
    1564:	51 f0       	breq	.+20     	; 0x157a <mpu6050_writeBit+0x3a>
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <mpu6050_writeBit+0x30>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 95       	dec	r16
    1572:	e2 f7       	brpl	.-8      	; 0x156c <mpu6050_writeBit+0x2c>
    1574:	62 2f       	mov	r22, r18
    1576:	68 2b       	or	r22, r24
    1578:	0a c0       	rjmp	.+20     	; 0x158e <mpu6050_writeBit+0x4e>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <mpu6050_writeBit+0x44>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 95       	dec	r16
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <mpu6050_writeBit+0x40>
    1588:	68 2f       	mov	r22, r24
    158a:	60 95       	com	r22
    158c:	62 23       	and	r22, r18
    158e:	69 83       	std	Y+1, r22	; 0x01
    mpu6050_writeByte(regAddr, b);
    1590:	8f 2d       	mov	r24, r15
    1592:	0e 94 0c 09 	call	0x1218	; 0x1218 <mpu6050_writeByte>
}
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	ff 90       	pop	r15
    15a2:	08 95       	ret

000015a4 <mpu6050_setSleepEnabled>:

/*
 * set sleep enabled
 */
void mpu6050_setSleepEnabled() {
	mpu6050_writeBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, 1);
    15a4:	8b e6       	ldi	r24, 0x6B	; 107
    15a6:	66 e0       	ldi	r22, 0x06	; 6
    15a8:	41 e0       	ldi	r20, 0x01	; 1
    15aa:	0e 94 a0 0a 	call	0x1540	; 0x1540 <mpu6050_writeBit>
}
    15ae:	08 95       	ret

000015b0 <mpu6050_setSleepDisabled>:

/*
 * set sleep disabled
 */
void mpu6050_setSleepDisabled() {
	mpu6050_writeBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, 0);
    15b0:	8b e6       	ldi	r24, 0x6B	; 107
    15b2:	66 e0       	ldi	r22, 0x06	; 6
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <mpu6050_writeBit>
}
    15ba:	08 95       	ret

000015bc <mpu6050_writeBits>:
}

/*
 * write bit/bits to chip register
 */
void mpu6050_writeBits(uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    15bc:	ef 92       	push	r14
    15be:	ff 92       	push	r15
    15c0:	0f 93       	push	r16
    15c2:	1f 93       	push	r17
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	0f 92       	push	r0
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	e8 2e       	mov	r14, r24
    15d0:	06 2f       	mov	r16, r22
    15d2:	14 2f       	mov	r17, r20
    15d4:	f2 2e       	mov	r15, r18
    //    xxx   args: bitStart=4, length=3
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
	if(length > 0) {
    15d6:	44 23       	and	r20, r20
    15d8:	79 f1       	breq	.+94     	; 0x1638 <mpu6050_writeBits+0x7c>
		uint8_t b = 0;
    15da:	19 82       	std	Y+1, r1	; 0x01
		if (mpu6050_readByte(regAddr, &b) != 0) { //get current data
    15dc:	be 01       	movw	r22, r28
    15de:	6f 5f       	subi	r22, 0xFF	; 255
    15e0:	7f 4f       	sbci	r23, 0xFF	; 255
    15e2:	0e 94 9b 0a 	call	0x1536	; 0x1536 <mpu6050_readByte>
    15e6:	88 23       	and	r24, r24
    15e8:	39 f1       	breq	.+78     	; 0x1638 <mpu6050_writeBits+0x7c>
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    15ea:	21 2f       	mov	r18, r17
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 2f       	mov	r20, r16
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	4f 5f       	subi	r20, 0xFF	; 255
    15f4:	5f 4f       	sbci	r21, 0xFF	; 255
    15f6:	42 1b       	sub	r20, r18
    15f8:	53 0b       	sbc	r21, r19
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <mpu6050_writeBits+0x48>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	1a 95       	dec	r17
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <mpu6050_writeBits+0x44>
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	04 2e       	mov	r0, r20
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <mpu6050_writeBits+0x56>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <mpu6050_writeBits+0x52>
			data <<= (bitStart - length + 1); // shift data into correct position
    1616:	2f 2d       	mov	r18, r15
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <mpu6050_writeBits+0x64>
    161c:	22 0f       	add	r18, r18
    161e:	33 1f       	adc	r19, r19
    1620:	4a 95       	dec	r20
    1622:	e2 f7       	brpl	.-8      	; 0x161c <mpu6050_writeBits+0x60>
			data &= mask; // zero all non-important bits in data
			b &= ~(mask); // zero all important bits in existing byte
			b |= data; // combine data with existing byte
    1624:	68 2f       	mov	r22, r24
    1626:	60 95       	com	r22
    1628:	49 81       	ldd	r20, Y+1	; 0x01
    162a:	64 23       	and	r22, r20
    162c:	82 23       	and	r24, r18
    162e:	68 2b       	or	r22, r24
    1630:	69 83       	std	Y+1, r22	; 0x01
			mpu6050_writeByte(regAddr, b);
    1632:	8e 2d       	mov	r24, r14
    1634:	0e 94 0c 09 	call	0x1218	; 0x1218 <mpu6050_writeByte>
		}
	}
}
    1638:	0f 90       	pop	r0
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	08 95       	ret

00001648 <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
    1648:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <i2c_init>
    164c:	83 e0       	ldi	r24, 0x03	; 3
    164e:	8a 95       	dec	r24
    1650:	f1 f7       	brne	.-4      	; 0x164e <mpu6050_init+0x6>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1652:	88 ea       	ldi	r24, 0xA8	; 168
    1654:	91 e6       	ldi	r25, 0x61	; 97
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <mpu6050_init+0xe>

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
    165a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <mpu6050_setSleepDisabled>
    165e:	84 ec       	ldi	r24, 0xC4	; 196
    1660:	99 e0       	ldi	r25, 0x09	; 9
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <mpu6050_init+0x1a>
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
    1666:	8b e6       	ldi	r24, 0x6B	; 107
    1668:	62 e0       	ldi	r22, 0x02	; 2
    166a:	43 e0       	ldi	r20, 0x03	; 3
    166c:	21 e0       	ldi	r18, 0x01	; 1
    166e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    1672:	8a e1       	ldi	r24, 0x1A	; 26
    1674:	62 e0       	ldi	r22, 0x02	; 2
    1676:	43 e0       	ldi	r20, 0x03	; 3
    1678:	23 e0       	ldi	r18, 0x03	; 3
    167a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
    167e:	89 e1       	ldi	r24, 0x19	; 25
    1680:	64 e0       	ldi	r22, 0x04	; 4
    1682:	0e 94 0c 09 	call	0x1218	; 0x1218 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
    1686:	8b e1       	ldi	r24, 0x1B	; 27
    1688:	64 e0       	ldi	r22, 0x04	; 4
    168a:	42 e0       	ldi	r20, 0x02	; 2
    168c:	23 e0       	ldi	r18, 0x03	; 3
    168e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
    1692:	8c e1       	ldi	r24, 0x1C	; 28
    1694:	64 e0       	ldi	r22, 0x04	; 4
    1696:	42 e0       	ldi	r20, 0x02	; 2
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <mpu6050_writeBits>

//	#if MPU6050_GETATTITUDE == 1
//	MPU6050_TIMER0INIT
//	#endif
}
    169e:	08 95       	ret

000016a0 <mpu6050_readBit>:
}

/*
 * read 1 bit from chip register
 */
int8_t mpu6050_readBit(uint8_t regAddr, uint8_t bitNum, uint8_t *data) {
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	0f 92       	push	r0
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	f6 2e       	mov	r15, r22
    16b2:	8a 01       	movw	r16, r20
    uint8_t b;
    uint8_t count = mpu6050_readByte(regAddr, &b);
    16b4:	be 01       	movw	r22, r28
    16b6:	6f 5f       	subi	r22, 0xFF	; 255
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ba:	0e 94 9b 0a 	call	0x1536	; 0x1536 <mpu6050_readByte>
    *data = b & (1 << bitNum);
    16be:	21 e0       	ldi	r18, 0x01	; 1
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <mpu6050_readBit+0x28>
    16c4:	22 0f       	add	r18, r18
    16c6:	33 1f       	adc	r19, r19
    16c8:	fa 94       	dec	r15
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <mpu6050_readBit+0x24>
    16cc:	99 81       	ldd	r25, Y+1	; 0x01
    16ce:	92 23       	and	r25, r18
    16d0:	f8 01       	movw	r30, r16
    16d2:	90 83       	st	Z, r25
    return count;
}
    16d4:	0f 90       	pop	r0
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	08 95       	ret

000016e2 <mpu6050_readBits>:
}

/*
 * read bits from chip register
 */
int8_t mpu6050_readBits(uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data) {
    16e2:	ef 92       	push	r14
    16e4:	ff 92       	push	r15
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	0f 92       	push	r0
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	06 2f       	mov	r16, r22
    16f6:	14 2f       	mov	r17, r20
    16f8:	79 01       	movw	r14, r18
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    int8_t count = 0;
    if(length > 0) {
    16fa:	44 23       	and	r20, r20
    16fc:	11 f4       	brne	.+4      	; 0x1702 <mpu6050_readBits+0x20>
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	29 c0       	rjmp	.+82     	; 0x1754 <mpu6050_readBits+0x72>
		uint8_t b;
		if ((count = mpu6050_readByte(regAddr, &b)) != 0) {
    1702:	be 01       	movw	r22, r28
    1704:	6f 5f       	subi	r22, 0xFF	; 255
    1706:	7f 4f       	sbci	r23, 0xFF	; 255
    1708:	0e 94 9b 0a 	call	0x1536	; 0x1536 <mpu6050_readByte>
    170c:	68 2f       	mov	r22, r24
    170e:	88 23       	and	r24, r24
    1710:	09 f1       	breq	.+66     	; 0x1754 <mpu6050_readBits+0x72>
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    1712:	81 2f       	mov	r24, r17
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	40 2f       	mov	r20, r16
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	4f 5f       	subi	r20, 0xFF	; 255
    171c:	5f 4f       	sbci	r21, 0xFF	; 255
    171e:	48 1b       	sub	r20, r24
    1720:	59 0b       	sbc	r21, r25
			b &= mask;
			b >>= (bitStart - length + 1);
    1722:	21 e0       	ldi	r18, 0x01	; 1
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	02 c0       	rjmp	.+4      	; 0x172c <mpu6050_readBits+0x4a>
    1728:	22 0f       	add	r18, r18
    172a:	33 1f       	adc	r19, r19
    172c:	1a 95       	dec	r17
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <mpu6050_readBits+0x46>
    1730:	21 50       	subi	r18, 0x01	; 1
    1732:	30 40       	sbci	r19, 0x00	; 0
    1734:	04 2e       	mov	r0, r20
    1736:	02 c0       	rjmp	.+4      	; 0x173c <mpu6050_readBits+0x5a>
    1738:	22 0f       	add	r18, r18
    173a:	33 1f       	adc	r19, r19
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <mpu6050_readBits+0x56>
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	82 23       	and	r24, r18
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 c0       	rjmp	.+4      	; 0x174c <mpu6050_readBits+0x6a>
    1748:	95 95       	asr	r25
    174a:	87 95       	ror	r24
    174c:	4a 95       	dec	r20
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <mpu6050_readBits+0x66>
			*data = b;
    1750:	f7 01       	movw	r30, r14
    1752:	80 83       	st	Z, r24
		}
    }
    return count;
}
    1754:	86 2f       	mov	r24, r22
    1756:	0f 90       	pop	r0
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	1f 91       	pop	r17
    175e:	0f 91       	pop	r16
    1760:	ff 90       	pop	r15
    1762:	ef 90       	pop	r14
    1764:	08 95       	ret

00001766 <mpu6050_testConnection>:

/*
 * test connectino to chip
 */
uint8_t mpu6050_testConnection() {
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
    1766:	85 e7       	ldi	r24, 0x75	; 117
    1768:	66 e0       	ldi	r22, 0x06	; 6
    176a:	46 e0       	ldi	r20, 0x06	; 6
    176c:	22 eb       	ldi	r18, 0xB2	; 178
    176e:	32 e0       	ldi	r19, 0x02	; 2
    1770:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <mpu6050_readBits>
	if(buffer[0] == 0x34)
    1774:	80 91 b2 02 	lds	r24, 0x02B2
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	84 33       	cpi	r24, 0x34	; 52
    177c:	09 f4       	brne	.+2      	; 0x1780 <mpu6050_testConnection+0x1a>
    177e:	91 e0       	ldi	r25, 0x01	; 1
		return 1;
	else
		return 0;
}
    1780:	89 2f       	mov	r24, r25
    1782:	08 95       	ret

00001784 <mpu6050_updateQuaternion>:
}

/*
 * update quaternion
 */
void mpu6050_updateQuaternion() {
    1784:	2f 92       	push	r2
    1786:	3f 92       	push	r3
    1788:	4f 92       	push	r4
    178a:	5f 92       	push	r5
    178c:	6f 92       	push	r6
    178e:	7f 92       	push	r7
    1790:	8f 92       	push	r8
    1792:	9f 92       	push	r9
    1794:	af 92       	push	r10
    1796:	bf 92       	push	r11
    1798:	cf 92       	push	r12
    179a:	df 92       	push	r13
    179c:	ef 92       	push	r14
    179e:	ff 92       	push	r15
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <mpu6050_updateQuaternion+0x26>
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <mpu6050_updateQuaternion+0x28>
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <mpu6050_updateQuaternion+0x2a>
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17b2:	13 e0       	ldi	r17, 0x03	; 3
	double gyrs = 0;
	double gzrs = 0;

	//get raw data
	while(1) {
		mpu6050_readBit(MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DATA_RDY_BIT, (uint8_t *)buffer);
    17b4:	8a e3       	ldi	r24, 0x3A	; 58
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	42 eb       	ldi	r20, 0xB2	; 178
    17ba:	52 e0       	ldi	r21, 0x02	; 2
    17bc:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <mpu6050_readBit>
		if(buffer[0])
    17c0:	80 91 b2 02 	lds	r24, 0x02B2
    17c4:	88 23       	and	r24, r24
    17c6:	21 f4       	brne	.+8      	; 0x17d0 <mpu6050_updateQuaternion+0x4c>
    17c8:	81 2f       	mov	r24, r17
    17ca:	8a 95       	dec	r24
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <mpu6050_updateQuaternion+0x46>
    17ce:	f2 cf       	rjmp	.-28     	; 0x17b4 <mpu6050_updateQuaternion+0x30>
			break;
		_delay_us(10);
	}

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    17d0:	8b e3       	ldi	r24, 0x3B	; 59
    17d2:	6e e0       	ldi	r22, 0x0E	; 14
    17d4:	42 eb       	ldi	r20, 0xB2	; 178
    17d6:	52 e0       	ldi	r21, 0x02	; 2
    17d8:	0e 94 1c 09 	call	0x1238	; 0x1238 <mpu6050_readBytes>
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    17dc:	d0 90 b2 02 	lds	r13, 0x02B2
    17e0:	c0 90 b3 02 	lds	r12, 0x02B3
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    17e4:	90 90 b4 02 	lds	r9, 0x02B4
    17e8:	80 90 b5 02 	lds	r8, 0x02B5
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    17ec:	70 90 b6 02 	lds	r7, 0x02B6
    17f0:	60 90 b7 02 	lds	r6, 0x02B7
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    17f4:	40 91 ba 02 	lds	r20, 0x02BA
    17f8:	20 91 bb 02 	lds	r18, 0x02BB
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    17fc:	b0 90 bc 02 	lds	r11, 0x02BC
    1800:	00 91 bd 02 	lds	r16, 0x02BD
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    1804:	a0 90 be 02 	lds	r10, 0x02BE
    1808:	e0 90 bf 02 	lds	r14, 0x02BF
	gyrs = (double)(gy)/MPU6050_GGAIN*0.01745329; //degree to radians
	gzrs = (double)(gz)/MPU6050_GGAIN*0.01745329; //degree to radians
	#endif

    //compute data
    mpu6050_mahonyUpdate(gxrs, gyrs, gzrs, axg, ayg, azg);
    180c:	8d b7       	in	r24, 0x3d	; 61
    180e:	9e b7       	in	r25, 0x3e	; 62
    1810:	08 97       	sbiw	r24, 0x08	; 8
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	9e bf       	out	0x3e, r25	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	8d bf       	out	0x3d, r24	; 61
    181c:	ed b7       	in	r30, 0x3d	; 61
    181e:	fe b7       	in	r31, 0x3e	; 62
    1820:	31 96       	adiw	r30, 0x01	; 1
    1822:	fe 83       	std	Y+6, r31	; 0x06
    1824:	ed 83       	std	Y+5, r30	; 0x05
    1826:	74 2f       	mov	r23, r20
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	62 2b       	or	r22, r18
    182e:	73 2b       	or	r23, r19
    1830:	66 5d       	subi	r22, 0xD6	; 214
    1832:	7f 4f       	sbci	r23, 0xFF	; 255
    1834:	88 27       	eor	r24, r24
    1836:	77 fd       	sbrc	r23, 7
    1838:	80 95       	com	r24
    183a:	98 2f       	mov	r25, r24
    183c:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    1840:	23 e3       	ldi	r18, 0x33	; 51
    1842:	33 e3       	ldi	r19, 0x33	; 51
    1844:	43 e8       	ldi	r20, 0x83	; 131
    1846:	51 e4       	ldi	r21, 0x41	; 65
    1848:	0e 94 0e 14 	call	0x281c	; 0x281c <__divsf3>
    184c:	24 e3       	ldi	r18, 0x34	; 52
    184e:	3a ef       	ldi	r19, 0xFA	; 250
    1850:	4e e8       	ldi	r20, 0x8E	; 142
    1852:	5c e3       	ldi	r21, 0x3C	; 60
    1854:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1858:	69 83       	std	Y+1, r22	; 0x01
    185a:	7a 83       	std	Y+2, r23	; 0x02
    185c:	8b 83       	std	Y+3, r24	; 0x03
    185e:	9c 83       	std	Y+4, r25	; 0x04
    1860:	7b 2d       	mov	r23, r11
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	10 e0       	ldi	r17, 0x00	; 0
    1866:	60 2b       	or	r22, r16
    1868:	71 2b       	or	r23, r17
    186a:	69 50       	subi	r22, 0x09	; 9
    186c:	70 40       	sbci	r23, 0x00	; 0
    186e:	88 27       	eor	r24, r24
    1870:	77 fd       	sbrc	r23, 7
    1872:	80 95       	com	r24
    1874:	98 2f       	mov	r25, r24
    1876:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    187a:	23 e3       	ldi	r18, 0x33	; 51
    187c:	33 e3       	ldi	r19, 0x33	; 51
    187e:	43 e8       	ldi	r20, 0x83	; 131
    1880:	51 e4       	ldi	r21, 0x41	; 65
    1882:	0e 94 0e 14 	call	0x281c	; 0x281c <__divsf3>
    1886:	24 e3       	ldi	r18, 0x34	; 52
    1888:	3a ef       	ldi	r19, 0xFA	; 250
    188a:	4e e8       	ldi	r20, 0x8E	; 142
    188c:	5c e3       	ldi	r21, 0x3C	; 60
    188e:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1892:	1b 01       	movw	r2, r22
    1894:	2c 01       	movw	r4, r24
    1896:	7a 2d       	mov	r23, r10
    1898:	60 e0       	ldi	r22, 0x00	; 0
    189a:	ff 24       	eor	r15, r15
    189c:	6e 29       	or	r22, r14
    189e:	7f 29       	or	r23, r15
    18a0:	63 5e       	subi	r22, 0xE3	; 227
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	88 27       	eor	r24, r24
    18a6:	77 fd       	sbrc	r23, 7
    18a8:	80 95       	com	r24
    18aa:	98 2f       	mov	r25, r24
    18ac:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    18b0:	23 e3       	ldi	r18, 0x33	; 51
    18b2:	33 e3       	ldi	r19, 0x33	; 51
    18b4:	43 e8       	ldi	r20, 0x83	; 131
    18b6:	51 e4       	ldi	r21, 0x41	; 65
    18b8:	0e 94 0e 14 	call	0x281c	; 0x281c <__divsf3>
    18bc:	24 e3       	ldi	r18, 0x34	; 52
    18be:	3a ef       	ldi	r19, 0xFA	; 250
    18c0:	4e e8       	ldi	r20, 0x8E	; 142
    18c2:	5c e3       	ldi	r21, 0x3C	; 60
    18c4:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    18c8:	7b 01       	movw	r14, r22
    18ca:	8c 01       	movw	r16, r24
    18cc:	7d 2d       	mov	r23, r13
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	dd 24       	eor	r13, r13
    18d2:	6c 29       	or	r22, r12
    18d4:	7d 29       	or	r23, r13
    18d6:	88 27       	eor	r24, r24
    18d8:	77 fd       	sbrc	r23, 7
    18da:	80 95       	com	r24
    18dc:	98 2f       	mov	r25, r24
    18de:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e8       	ldi	r20, 0x80	; 128
    18e8:	58 e3       	ldi	r21, 0x38	; 56
    18ea:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    18ee:	5b 01       	movw	r10, r22
    18f0:	6c 01       	movw	r12, r24
    18f2:	79 2d       	mov	r23, r9
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	99 24       	eor	r9, r9
    18f8:	68 29       	or	r22, r8
    18fa:	79 29       	or	r23, r9
    18fc:	88 27       	eor	r24, r24
    18fe:	77 fd       	sbrc	r23, 7
    1900:	80 95       	com	r24
    1902:	98 2f       	mov	r25, r24
    1904:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e8       	ldi	r20, 0x80	; 128
    190e:	58 e3       	ldi	r21, 0x38	; 56
    1910:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1914:	ed 81       	ldd	r30, Y+5	; 0x05
    1916:	fe 81       	ldd	r31, Y+6	; 0x06
    1918:	60 83       	st	Z, r22
    191a:	71 83       	std	Z+1, r23	; 0x01
    191c:	82 83       	std	Z+2, r24	; 0x02
    191e:	93 83       	std	Z+3, r25	; 0x03
    1920:	77 2d       	mov	r23, r7
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	77 24       	eor	r7, r7
    1926:	66 29       	or	r22, r6
    1928:	77 29       	or	r23, r7
    192a:	88 27       	eor	r24, r24
    192c:	77 fd       	sbrc	r23, 7
    192e:	80 95       	com	r24
    1930:	98 2f       	mov	r25, r24
    1932:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e8       	ldi	r20, 0x80	; 128
    193c:	58 e3       	ldi	r21, 0x38	; 56
    193e:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1942:	ed 81       	ldd	r30, Y+5	; 0x05
    1944:	fe 81       	ldd	r31, Y+6	; 0x06
    1946:	64 83       	std	Z+4, r22	; 0x04
    1948:	75 83       	std	Z+5, r23	; 0x05
    194a:	86 83       	std	Z+6, r24	; 0x06
    194c:	97 83       	std	Z+7, r25	; 0x07
    194e:	69 81       	ldd	r22, Y+1	; 0x01
    1950:	7a 81       	ldd	r23, Y+2	; 0x02
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	a2 01       	movw	r20, r4
    1958:	91 01       	movw	r18, r2
    195a:	0e 94 22 04 	call	0x844	; 0x844 <mpu6050_mahonyUpdate>
    195e:	8d b7       	in	r24, 0x3d	; 61
    1960:	9e b7       	in	r25, 0x3e	; 62
    1962:	08 96       	adiw	r24, 0x08	; 8
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	9e bf       	out	0x3e, r25	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	8d bf       	out	0x3d, r24	; 61
}
    196e:	26 96       	adiw	r28, 0x06	; 6
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	ff 90       	pop	r15
    1984:	ef 90       	pop	r14
    1986:	df 90       	pop	r13
    1988:	cf 90       	pop	r12
    198a:	bf 90       	pop	r11
    198c:	af 90       	pop	r10
    198e:	9f 90       	pop	r9
    1990:	8f 90       	pop	r8
    1992:	7f 90       	pop	r7
    1994:	6f 90       	pop	r6
    1996:	5f 90       	pop	r5
    1998:	4f 90       	pop	r4
    199a:	3f 90       	pop	r3
    199c:	2f 90       	pop	r2
    199e:	08 95       	ret

000019a0 <__vector_16>:

/*
 * update timer for attitude
 */
ISR(TIMER0_OVF_vect) {
    19a0:	1f 92       	push	r1
    19a2:	0f 92       	push	r0
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	0f 92       	push	r0
    19a8:	0b b6       	in	r0, 0x3b	; 59
    19aa:	0f 92       	push	r0
    19ac:	11 24       	eor	r1, r1
    19ae:	2f 93       	push	r18
    19b0:	3f 93       	push	r19
    19b2:	4f 93       	push	r20
    19b4:	5f 93       	push	r21
    19b6:	6f 93       	push	r22
    19b8:	7f 93       	push	r23
    19ba:	8f 93       	push	r24
    19bc:	9f 93       	push	r25
    19be:	af 93       	push	r26
    19c0:	bf 93       	push	r27
    19c2:	ef 93       	push	r30
    19c4:	ff 93       	push	r31
	mpu6050_updateQuaternion();
    19c6:	0e 94 c2 0b 	call	0x1784	; 0x1784 <mpu6050_updateQuaternion>
}
    19ca:	ff 91       	pop	r31
    19cc:	ef 91       	pop	r30
    19ce:	bf 91       	pop	r27
    19d0:	af 91       	pop	r26
    19d2:	9f 91       	pop	r25
    19d4:	8f 91       	pop	r24
    19d6:	7f 91       	pop	r23
    19d8:	6f 91       	pop	r22
    19da:	5f 91       	pop	r21
    19dc:	4f 91       	pop	r20
    19de:	3f 91       	pop	r19
    19e0:	2f 91       	pop	r18
    19e2:	0f 90       	pop	r0
    19e4:	0b be       	out	0x3b, r0	; 59
    19e6:	0f 90       	pop	r0
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	0f 90       	pop	r0
    19ec:	1f 90       	pop	r1
    19ee:	18 95       	reti

000019f0 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    19f0:	10 92 71 00 	sts	0x0071, r1
  TWBR = 12;//((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    19f4:	8c e0       	ldi	r24, 0x0C	; 12
    19f6:	80 93 70 00 	sts	0x0070, r24

}/* i2c_init */
    19fa:	08 95       	ret

000019fc <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
    19fc:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    19fe:	84 ea       	ldi	r24, 0xA4	; 164
    1a00:	80 93 74 00 	sts	0x0074, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1a04:	80 91 74 00 	lds	r24, 0x0074
    1a08:	87 ff       	sbrs	r24, 7
    1a0a:	fc cf       	rjmp	.-8      	; 0x1a04 <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1a0c:	80 91 71 00 	lds	r24, 0x0071
    1a10:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1a12:	88 30       	cpi	r24, 0x08	; 8
    1a14:	21 f0       	breq	.+8      	; 0x1a1e <i2c_start+0x22>
    1a16:	80 31       	cpi	r24, 0x10	; 16
    1a18:	11 f0       	breq	.+4      	; 0x1a1e <i2c_start+0x22>
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	08 95       	ret

	// send device address
	TWDR = address;
    1a1e:	90 93 73 00 	sts	0x0073, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a22:	84 e8       	ldi	r24, 0x84	; 132
    1a24:	80 93 74 00 	sts	0x0074, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1a28:	80 91 74 00 	lds	r24, 0x0074
    1a2c:	87 ff       	sbrs	r24, 7
    1a2e:	fc cf       	rjmp	.-8      	; 0x1a28 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1a30:	90 91 71 00 	lds	r25, 0x0071
    1a34:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1a36:	98 31       	cpi	r25, 0x18	; 24
    1a38:	11 f4       	brne	.+4      	; 0x1a3e <i2c_start+0x42>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	08 95       	ret
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 34       	cpi	r25, 0x40	; 64
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <i2c_start+0x4a>
    1a44:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    1a46:	08 95       	ret

00001a48 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
    1a48:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1a4a:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1a4c:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1a4e:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1a50:	40 93 74 00 	sts	0x0074, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1a54:	80 91 74 00 	lds	r24, 0x0074
    1a58:	87 ff       	sbrs	r24, 7
    1a5a:	fc cf       	rjmp	.-8      	; 0x1a54 <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1a5c:	80 91 71 00 	lds	r24, 0x0071
    1a60:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1a62:	88 30       	cpi	r24, 0x08	; 8
    1a64:	11 f0       	breq	.+4      	; 0x1a6a <i2c_start_wait+0x22>
    1a66:	80 31       	cpi	r24, 0x10	; 16
    1a68:	99 f7       	brne	.-26     	; 0x1a50 <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
    1a6a:	90 93 73 00 	sts	0x0073, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1a6e:	30 93 74 00 	sts	0x0074, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1a72:	80 91 74 00 	lds	r24, 0x0074
    1a76:	87 ff       	sbrs	r24, 7
    1a78:	fc cf       	rjmp	.-8      	; 0x1a72 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1a7a:	80 91 71 00 	lds	r24, 0x0071
    1a7e:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1a80:	80 32       	cpi	r24, 0x20	; 32
    1a82:	11 f0       	breq	.+4      	; 0x1a88 <i2c_start_wait+0x40>
    1a84:	88 35       	cpi	r24, 0x58	; 88
    1a86:	39 f4       	brne	.+14     	; 0x1a96 <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1a88:	20 93 74 00 	sts	0x0074, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1a8c:	80 91 74 00 	lds	r24, 0x0074
    1a90:	84 fd       	sbrc	r24, 4
    1a92:	fc cf       	rjmp	.-8      	; 0x1a8c <i2c_start_wait+0x44>
    1a94:	dd cf       	rjmp	.-70     	; 0x1a50 <i2c_start_wait+0x8>
    1a96:	08 95       	ret

00001a98 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    1a98:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <i2c_start>

}/* i2c_rep_start */
    1a9c:	08 95       	ret

00001a9e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1a9e:	84 e9       	ldi	r24, 0x94	; 148
    1aa0:	80 93 74 00 	sts	0x0074, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1aa4:	80 91 74 00 	lds	r24, 0x0074
    1aa8:	84 fd       	sbrc	r24, 4
    1aaa:	fc cf       	rjmp	.-8      	; 0x1aa4 <i2c_stop+0x6>

}/* i2c_stop */
    1aac:	08 95       	ret

00001aae <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1aae:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ab2:	84 e8       	ldi	r24, 0x84	; 132
    1ab4:	80 93 74 00 	sts	0x0074, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1ab8:	80 91 74 00 	lds	r24, 0x0074
    1abc:	87 ff       	sbrs	r24, 7
    1abe:	fc cf       	rjmp	.-8      	; 0x1ab8 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1ac0:	80 91 71 00 	lds	r24, 0x0071
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	88 7f       	andi	r24, 0xF8	; 248
    1ac8:	88 32       	cpi	r24, 0x28	; 40
    1aca:	09 f0       	breq	.+2      	; 0x1ace <i2c_write+0x20>
    1acc:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    1ace:	89 2f       	mov	r24, r25
    1ad0:	08 95       	ret

00001ad2 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1ad2:	84 ec       	ldi	r24, 0xC4	; 196
    1ad4:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1<<TWINT)));    
    1ad8:	80 91 74 00 	lds	r24, 0x0074
    1adc:	87 ff       	sbrs	r24, 7
    1ade:	fc cf       	rjmp	.-8      	; 0x1ad8 <i2c_readAck+0x6>

    return TWDR;
    1ae0:	80 91 73 00 	lds	r24, 0x0073

}/* i2c_readAck */
    1ae4:	08 95       	ret

00001ae6 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ae6:	84 e8       	ldi	r24, 0x84	; 132
    1ae8:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1<<TWINT)));
    1aec:	80 91 74 00 	lds	r24, 0x0074
    1af0:	87 ff       	sbrs	r24, 7
    1af2:	fc cf       	rjmp	.-8      	; 0x1aec <i2c_readNak+0x6>
	
    return TWDR;
    1af4:	80 91 73 00 	lds	r24, 0x0073

}/* i2c_readNak */
    1af8:	08 95       	ret

00001afa <hmc5883l_getrawdata>:
}

/*
 * get raw data
 */
void hmc5883l_getrawdata(int16_t *mxraw, int16_t *myraw, int16_t *mzraw) {
    1afa:	6f 92       	push	r6
    1afc:	7f 92       	push	r7
    1afe:	8f 92       	push	r8
    1b00:	9f 92       	push	r9
    1b02:	af 92       	push	r10
    1b04:	bf 92       	push	r11
    1b06:	cf 92       	push	r12
    1b08:	df 92       	push	r13
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <hmc5883l_getrawdata+0x1e>
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <hmc5883l_getrawdata+0x20>
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <hmc5883l_getrawdata+0x22>
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	5c 01       	movw	r10, r24
    1b22:	3b 01       	movw	r6, r22
    1b24:	4a 01       	movw	r8, r20
	uint8_t i = 0;
	uint8_t buff[6];

	i2c_start_wait(HMC5883L_ADDR | I2C_WRITE);
    1b26:	8c e3       	ldi	r24, 0x3C	; 60
    1b28:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <i2c_start_wait>
	i2c_write(HMC5883L_DATAREGBEGIN);
    1b2c:	83 e0       	ldi	r24, 0x03	; 3
    1b2e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <i2c_write>
	i2c_stop();
    1b32:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <i2c_stop>
	i2c_start_wait(HMC5883L_ADDR | I2C_READ);
    1b36:	8d e3       	ldi	r24, 0x3D	; 61
    1b38:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <i2c_start_wait>
    1b3c:	7e 01       	movw	r14, r28
    1b3e:	08 94       	sec
    1b40:	e1 1c       	adc	r14, r1
    1b42:	f1 1c       	adc	r15, r1
    1b44:	87 01       	movw	r16, r14
	for(i=0; i<6; i++) {
    1b46:	87 e0       	ldi	r24, 0x07	; 7
    1b48:	c8 2e       	mov	r12, r24
    1b4a:	d1 2c       	mov	r13, r1
    1b4c:	cc 0e       	add	r12, r28
    1b4e:	dd 1e       	adc	r13, r29
		if(i==6-1)
    1b50:	80 2f       	mov	r24, r16
    1b52:	8e 19       	sub	r24, r14
    1b54:	85 30       	cpi	r24, 0x05	; 5
    1b56:	21 f4       	brne	.+8      	; 0x1b60 <hmc5883l_getrawdata+0x66>
			buff[i] = i2c_readNak();
    1b58:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <i2c_readNak>
    1b5c:	8e 83       	std	Y+6, r24	; 0x06
    1b5e:	04 c0       	rjmp	.+8      	; 0x1b68 <hmc5883l_getrawdata+0x6e>
		else
			buff[i] = i2c_readAck();
    1b60:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <i2c_readAck>
    1b64:	f8 01       	movw	r30, r16
    1b66:	80 83       	st	Z, r24
    1b68:	0f 5f       	subi	r16, 0xFF	; 255
    1b6a:	1f 4f       	sbci	r17, 0xFF	; 255

	i2c_start_wait(HMC5883L_ADDR | I2C_WRITE);
	i2c_write(HMC5883L_DATAREGBEGIN);
	i2c_stop();
	i2c_start_wait(HMC5883L_ADDR | I2C_READ);
	for(i=0; i<6; i++) {
    1b6c:	0c 15       	cp	r16, r12
    1b6e:	1d 05       	cpc	r17, r13
    1b70:	79 f7       	brne	.-34     	; 0x1b50 <hmc5883l_getrawdata+0x56>
		if(i==6-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
    1b72:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <i2c_stop>

	*mxraw = (int16_t)((buff[0] << 8) | buff[1]);
    1b76:	99 81       	ldd	r25, Y+1	; 0x01
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	2a 81       	ldd	r18, Y+2	; 0x02
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	82 2b       	or	r24, r18
    1b80:	93 2b       	or	r25, r19
    1b82:	f5 01       	movw	r30, r10
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	80 83       	st	Z, r24
	*mzraw = (int16_t)((buff[2] << 8) | buff[3]);
    1b88:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	82 2b       	or	r24, r18
    1b92:	93 2b       	or	r25, r19
    1b94:	f4 01       	movw	r30, r8
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
	*myraw = (int16_t)((buff[4] << 8) | buff[5]);
    1b9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	2e 81       	ldd	r18, Y+6	; 0x06
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	82 2b       	or	r24, r18
    1ba4:	93 2b       	or	r25, r19
    1ba6:	f3 01       	movw	r30, r6
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
}
    1bac:	26 96       	adiw	r28, 0x06	; 6
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	1f 91       	pop	r17
    1bbe:	0f 91       	pop	r16
    1bc0:	ff 90       	pop	r15
    1bc2:	ef 90       	pop	r14
    1bc4:	df 90       	pop	r13
    1bc6:	cf 90       	pop	r12
    1bc8:	bf 90       	pop	r11
    1bca:	af 90       	pop	r10
    1bcc:	9f 90       	pop	r9
    1bce:	8f 90       	pop	r8
    1bd0:	7f 90       	pop	r7
    1bd2:	6f 90       	pop	r6
    1bd4:	08 95       	ret

00001bd6 <hmc5883l_getdata>:

/*
 * get scaled data
 */
void hmc5883l_getdata(double *mx, double *my, double *mz) {
    1bd6:	2f 92       	push	r2
    1bd8:	3f 92       	push	r3
    1bda:	4f 92       	push	r4
    1bdc:	5f 92       	push	r5
    1bde:	6f 92       	push	r6
    1be0:	7f 92       	push	r7
    1be2:	8f 92       	push	r8
    1be4:	9f 92       	push	r9
    1be6:	af 92       	push	r10
    1be8:	bf 92       	push	r11
    1bea:	cf 92       	push	r12
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	2c 97       	sbiw	r28, 0x0c	; 12
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	98 87       	std	Y+8, r25	; 0x08
    1c0c:	8f 83       	std	Y+7, r24	; 0x07
    1c0e:	7a 87       	std	Y+10, r23	; 0x0a
    1c10:	69 87       	std	Y+9, r22	; 0x09
    1c12:	5c 87       	std	Y+12, r21	; 0x0c
    1c14:	4b 87       	std	Y+11, r20	; 0x0b
	int16_t mxraw = 0;
    1c16:	1a 82       	std	Y+2, r1	; 0x02
    1c18:	19 82       	std	Y+1, r1	; 0x01
	int16_t myraw = 0;
    1c1a:	1c 82       	std	Y+4, r1	; 0x04
    1c1c:	1b 82       	std	Y+3, r1	; 0x03
	int16_t mzraw = 0;
    1c1e:	1e 82       	std	Y+6, r1	; 0x06
    1c20:	1d 82       	std	Y+5, r1	; 0x05
	hmc5883l_getrawdata(&mxraw, &myraw, &mzraw);
    1c22:	ce 01       	movw	r24, r28
    1c24:	01 96       	adiw	r24, 0x01	; 1
    1c26:	be 01       	movw	r22, r28
    1c28:	6d 5f       	subi	r22, 0xFD	; 253
    1c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2c:	ae 01       	movw	r20, r28
    1c2e:	4b 5f       	subi	r20, 0xFB	; 251
    1c30:	5f 4f       	sbci	r21, 0xFF	; 255
    1c32:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <hmc5883l_getrawdata>

	#if HMC5883L_CALIBRATED == 1
	float mxt = mxraw - HMC5883L_OFFSETX;
    1c36:	69 81       	ldd	r22, Y+1	; 0x01
    1c38:	7a 81       	ldd	r23, Y+2	; 0x02
    1c3a:	88 27       	eor	r24, r24
    1c3c:	77 fd       	sbrc	r23, 7
    1c3e:	80 95       	com	r24
    1c40:	98 2f       	mov	r25, r24
    1c42:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    1c46:	26 e6       	ldi	r18, 0x66	; 102
    1c48:	36 e6       	ldi	r19, 0x66	; 102
    1c4a:	47 ec       	ldi	r20, 0xC7	; 199
    1c4c:	52 e4       	ldi	r21, 0x42	; 66
    1c4e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
    1c52:	1b 01       	movw	r2, r22
    1c54:	2c 01       	movw	r4, r24
	float myt = myraw - HMC5883L_OFFSETY;
    1c56:	6b 81       	ldd	r22, Y+3	; 0x03
    1c58:	7c 81       	ldd	r23, Y+4	; 0x04
    1c5a:	88 27       	eor	r24, r24
    1c5c:	77 fd       	sbrc	r23, 7
    1c5e:	80 95       	com	r24
    1c60:	98 2f       	mov	r25, r24
    1c62:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	4a e1       	ldi	r20, 0x1A	; 26
    1c6c:	53 e4       	ldi	r21, 0x43	; 67
    1c6e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
    1c72:	3b 01       	movw	r6, r22
    1c74:	4c 01       	movw	r8, r24
	float mzt = mzraw - HMC5883L_OFFSETZ;
    1c76:	6d 81       	ldd	r22, Y+5	; 0x05
    1c78:	7e 81       	ldd	r23, Y+6	; 0x06
    1c7a:	88 27       	eor	r24, r24
    1c7c:	77 fd       	sbrc	r23, 7
    1c7e:	80 95       	com	r24
    1c80:	98 2f       	mov	r25, r24
    1c82:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    1c86:	2a e9       	ldi	r18, 0x9A	; 154
    1c88:	39 e9       	ldi	r19, 0x99	; 153
    1c8a:	45 eb       	ldi	r20, 0xB5	; 181
    1c8c:	51 e4       	ldi	r21, 0x41	; 65
    1c8e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
    1c92:	5b 01       	movw	r10, r22
    1c94:	6c 01       	movw	r12, r24
	*mx = HMC5883L_GAINX1 * mxt + HMC5883L_GAINX2 * myt + HMC5883L_GAINX3 * mzt;
    1c96:	c2 01       	movw	r24, r4
    1c98:	b1 01       	movw	r22, r2
    1c9a:	23 e6       	ldi	r18, 0x63	; 99
    1c9c:	37 eb       	ldi	r19, 0xB7	; 183
    1c9e:	43 e7       	ldi	r20, 0x73	; 115
    1ca0:	5f e3       	ldi	r21, 0x3F	; 63
    1ca2:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1ca6:	7b 01       	movw	r14, r22
    1ca8:	8c 01       	movw	r16, r24
    1caa:	c4 01       	movw	r24, r8
    1cac:	b3 01       	movw	r22, r6
    1cae:	2a eb       	ldi	r18, 0xBA	; 186
    1cb0:	31 e6       	ldi	r19, 0x61	; 97
    1cb2:	40 e0       	ldi	r20, 0x00	; 0
    1cb4:	5b e3       	ldi	r21, 0x3B	; 59
    1cb6:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1cba:	9b 01       	movw	r18, r22
    1cbc:	ac 01       	movw	r20, r24
    1cbe:	c8 01       	movw	r24, r16
    1cc0:	b7 01       	movw	r22, r14
    1cc2:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
    1cc6:	7b 01       	movw	r14, r22
    1cc8:	8c 01       	movw	r16, r24
    1cca:	c6 01       	movw	r24, r12
    1ccc:	b5 01       	movw	r22, r10
    1cce:	22 e1       	ldi	r18, 0x12	; 18
    1cd0:	32 ed       	ldi	r19, 0xD2	; 210
    1cd2:	44 e6       	ldi	r20, 0x64	; 100
    1cd4:	5c e3       	ldi	r21, 0x3C	; 60
    1cd6:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1cda:	9b 01       	movw	r18, r22
    1cdc:	ac 01       	movw	r20, r24
    1cde:	c8 01       	movw	r24, r16
    1ce0:	b7 01       	movw	r22, r14
    1ce2:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
    1ce6:	ef 81       	ldd	r30, Y+7	; 0x07
    1ce8:	f8 85       	ldd	r31, Y+8	; 0x08
    1cea:	60 83       	st	Z, r22
    1cec:	71 83       	std	Z+1, r23	; 0x01
    1cee:	82 83       	std	Z+2, r24	; 0x02
    1cf0:	93 83       	std	Z+3, r25	; 0x03
	*my = HMC5883L_GAINY1 * mxt + HMC5883L_GAINY2 * myt + HMC5883L_GAINY3 * mzt;
    1cf2:	c2 01       	movw	r24, r4
    1cf4:	b1 01       	movw	r22, r2
    1cf6:	2a eb       	ldi	r18, 0xBA	; 186
    1cf8:	31 e6       	ldi	r19, 0x61	; 97
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	5b e3       	ldi	r21, 0x3B	; 59
    1cfe:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1d02:	7b 01       	movw	r14, r22
    1d04:	8c 01       	movw	r16, r24
    1d06:	c4 01       	movw	r24, r8
    1d08:	b3 01       	movw	r22, r6
    1d0a:	21 ec       	ldi	r18, 0xC1	; 193
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	42 e6       	ldi	r20, 0x62	; 98
    1d10:	5f e3       	ldi	r21, 0x3F	; 63
    1d12:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1d16:	9b 01       	movw	r18, r22
    1d18:	ac 01       	movw	r20, r24
    1d1a:	c8 01       	movw	r24, r16
    1d1c:	b7 01       	movw	r22, r14
    1d1e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
    1d22:	7b 01       	movw	r14, r22
    1d24:	8c 01       	movw	r16, r24
    1d26:	c6 01       	movw	r24, r12
    1d28:	b5 01       	movw	r22, r10
    1d2a:	2e ec       	ldi	r18, 0xCE	; 206
    1d2c:	3d e1       	ldi	r19, 0x1D	; 29
    1d2e:	49 ef       	ldi	r20, 0xF9	; 249
    1d30:	5b e3       	ldi	r21, 0x3B	; 59
    1d32:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1d36:	9b 01       	movw	r18, r22
    1d38:	ac 01       	movw	r20, r24
    1d3a:	c8 01       	movw	r24, r16
    1d3c:	b7 01       	movw	r22, r14
    1d3e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
    1d42:	e9 85       	ldd	r30, Y+9	; 0x09
    1d44:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d46:	60 83       	st	Z, r22
    1d48:	71 83       	std	Z+1, r23	; 0x01
    1d4a:	82 83       	std	Z+2, r24	; 0x02
    1d4c:	93 83       	std	Z+3, r25	; 0x03
	*mz = HMC5883L_GAINZ1 * mxt + HMC5883L_GAINZ2 * myt + HMC5883L_GAINZ3 * mzt;
    1d4e:	c2 01       	movw	r24, r4
    1d50:	b1 01       	movw	r22, r2
    1d52:	22 e1       	ldi	r18, 0x12	; 18
    1d54:	32 ed       	ldi	r19, 0xD2	; 210
    1d56:	44 e6       	ldi	r20, 0x64	; 100
    1d58:	5c e3       	ldi	r21, 0x3C	; 60
    1d5a:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1d5e:	7b 01       	movw	r14, r22
    1d60:	8c 01       	movw	r16, r24
    1d62:	c4 01       	movw	r24, r8
    1d64:	b3 01       	movw	r22, r6
    1d66:	2e ec       	ldi	r18, 0xCE	; 206
    1d68:	3d e1       	ldi	r19, 0x1D	; 29
    1d6a:	49 ef       	ldi	r20, 0xF9	; 249
    1d6c:	5b e3       	ldi	r21, 0x3B	; 59
    1d6e:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1d72:	9b 01       	movw	r18, r22
    1d74:	ac 01       	movw	r20, r24
    1d76:	c8 01       	movw	r24, r16
    1d78:	b7 01       	movw	r22, r14
    1d7a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
    1d7e:	7b 01       	movw	r14, r22
    1d80:	8c 01       	movw	r16, r24
    1d82:	c6 01       	movw	r24, r12
    1d84:	b5 01       	movw	r22, r10
    1d86:	2e e3       	ldi	r18, 0x3E	; 62
    1d88:	30 ed       	ldi	r19, 0xD0	; 208
    1d8a:	4e e7       	ldi	r20, 0x7E	; 126
    1d8c:	5f e3       	ldi	r21, 0x3F	; 63
    1d8e:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1d92:	9b 01       	movw	r18, r22
    1d94:	ac 01       	movw	r20, r24
    1d96:	c8 01       	movw	r24, r16
    1d98:	b7 01       	movw	r22, r14
    1d9a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
    1d9e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1da0:	fc 85       	ldd	r31, Y+12	; 0x0c
    1da2:	60 83       	st	Z, r22
    1da4:	71 83       	std	Z+1, r23	; 0x01
    1da6:	82 83       	std	Z+2, r24	; 0x02
    1da8:	93 83       	std	Z+3, r25	; 0x03
	*mz = mzraw * hmc5883l_scale;
	#endif



}
    1daa:	2c 96       	adiw	r28, 0x0c	; 12
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	df 90       	pop	r13
    1dc4:	cf 90       	pop	r12
    1dc6:	bf 90       	pop	r11
    1dc8:	af 90       	pop	r10
    1dca:	9f 90       	pop	r9
    1dcc:	8f 90       	pop	r8
    1dce:	7f 90       	pop	r7
    1dd0:	6f 90       	pop	r6
    1dd2:	5f 90       	pop	r5
    1dd4:	4f 90       	pop	r4
    1dd6:	3f 90       	pop	r3
    1dd8:	2f 90       	pop	r2
    1dda:	08 95       	ret

00001ddc <hmc5883l_init>:
 * init the hmc5883l
 */
void hmc5883l_init() {
	#if HMC5883L_I2CINIT == 1
	//init i2c
	i2c_init();
    1ddc:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <i2c_init>
    1de0:	83 e0       	ldi	r24, 0x03	; 3
    1de2:	8a 95       	dec	r24
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <hmc5883l_init+0x6>
	#elif HMC5883L_SCALE == HMC5883L_SCALE56
		regValue = 0x06;
		hmc5883l_scale = 3.03;
	#elif HMC5883L_SCALE == HMC5883L_SCALE81
		regValue = 0x07;
		hmc5883l_scale = 4.35;
    1de6:	83 e3       	ldi	r24, 0x33	; 51
    1de8:	93 e3       	ldi	r25, 0x33	; 51
    1dea:	ab e8       	ldi	r26, 0x8B	; 139
    1dec:	b0 e4       	ldi	r27, 0x40	; 64
    1dee:	80 93 ae 02 	sts	0x02AE, r24
    1df2:	90 93 af 02 	sts	0x02AF, r25
    1df6:	a0 93 b0 02 	sts	0x02B0, r26
    1dfa:	b0 93 b1 02 	sts	0x02B1, r27
	#endif

	//setting is in the top 3 bits of the register.
	regValue = regValue << 5;
    i2c_start_wait(HMC5883L_ADDR | I2C_WRITE);
    1dfe:	8c e3       	ldi	r24, 0x3C	; 60
    1e00:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <i2c_start_wait>
    i2c_write(HMC5883L_CONFREGB);
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	0e 94 57 0d 	call	0x1aae	; 0x1aae <i2c_write>
    i2c_write(regValue);
    1e0a:	80 ee       	ldi	r24, 0xE0	; 224
    1e0c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <i2c_write>
    i2c_stop();
    1e10:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <i2c_stop>

	//set measurement mode
	i2c_start_wait(HMC5883L_ADDR | I2C_WRITE);
    1e14:	8c e3       	ldi	r24, 0x3C	; 60
    1e16:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <i2c_start_wait>
	i2c_write(HMC5883L_MODEREG);
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <i2c_write>
	i2c_write(HMC5883L_MEASUREMODE);
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	0e 94 57 0d 	call	0x1aae	; 0x1aae <i2c_write>
	i2c_stop();
    1e26:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <i2c_stop>
}
    1e2a:	08 95       	ret

00001e2c <kalman_init>:
	double k; //kalman gain
} kalman_state;


kalman_state kalman_init(double q, double r, double p, double intial_value)
{
    1e2c:	8f 92       	push	r8
    1e2e:	9f 92       	push	r9
    1e30:	af 92       	push	r10
    1e32:	bf 92       	push	r11
    1e34:	cf 92       	push	r12
    1e36:	df 92       	push	r13
    1e38:	ef 92       	push	r14
    1e3a:	ff 92       	push	r15
    1e3c:	0f 93       	push	r16
    1e3e:	1f 93       	push	r17
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	fc 01       	movw	r30, r24
	result.q = q;
	result.r = r;
	result.p = p;
	result.x = intial_value;

	return result;
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	a0 e0       	ldi	r26, 0x00	; 0
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	80 8b       	std	Z+16, r24	; 0x10
    1e54:	91 8b       	std	Z+17, r25	; 0x11
    1e56:	a2 8b       	std	Z+18, r26	; 0x12
    1e58:	b3 8b       	std	Z+19, r27	; 0x13
    1e5a:	80 86       	std	Z+8, r8	; 0x08
    1e5c:	91 86       	std	Z+9, r9	; 0x09
    1e5e:	a2 86       	std	Z+10, r10	; 0x0a
    1e60:	b3 86       	std	Z+11, r11	; 0x0b
    1e62:	c4 86       	std	Z+12, r12	; 0x0c
    1e64:	d5 86       	std	Z+13, r13	; 0x0d
    1e66:	e6 86       	std	Z+14, r14	; 0x0e
    1e68:	f7 86       	std	Z+15, r15	; 0x0f
    1e6a:	04 83       	std	Z+4, r16	; 0x04
    1e6c:	15 83       	std	Z+5, r17	; 0x05
    1e6e:	26 83       	std	Z+6, r18	; 0x06
    1e70:	37 83       	std	Z+7, r19	; 0x07
    1e72:	40 83       	st	Z, r20
    1e74:	51 83       	std	Z+1, r21	; 0x01
    1e76:	62 83       	std	Z+2, r22	; 0x02
    1e78:	73 83       	std	Z+3, r23	; 0x03
}
    1e7a:	cf 01       	movw	r24, r30
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	ff 90       	pop	r15
    1e86:	ef 90       	pop	r14
    1e88:	df 90       	pop	r13
    1e8a:	cf 90       	pop	r12
    1e8c:	bf 90       	pop	r11
    1e8e:	af 90       	pop	r10
    1e90:	9f 90       	pop	r9
    1e92:	8f 90       	pop	r8
    1e94:	08 95       	ret

00001e96 <kalman_update>:

void kalman_update(kalman_state* state, double measurement)
{
    1e96:	4f 92       	push	r4
    1e98:	5f 92       	push	r5
    1e9a:	6f 92       	push	r6
    1e9c:	7f 92       	push	r7
    1e9e:	8f 92       	push	r8
    1ea0:	9f 92       	push	r9
    1ea2:	af 92       	push	r10
    1ea4:	bf 92       	push	r11
    1ea6:	cf 92       	push	r12
    1ea8:	df 92       	push	r13
    1eaa:	ef 92       	push	r14
    1eac:	ff 92       	push	r15
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <kalman_update+0x22>
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <kalman_update+0x24>
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	6c 01       	movw	r12, r24
    1ec0:	49 83       	std	Y+1, r20	; 0x01
    1ec2:	5a 83       	std	Y+2, r21	; 0x02
    1ec4:	6b 83       	std	Y+3, r22	; 0x03
    1ec6:	7c 83       	std	Y+4, r23	; 0x04
	//prediction update
	//omit x = x
	state->p = state->p + state->q;
    1ec8:	fc 01       	movw	r30, r24
    1eca:	64 85       	ldd	r22, Z+12	; 0x0c
    1ecc:	75 85       	ldd	r23, Z+13	; 0x0d
    1ece:	86 85       	ldd	r24, Z+14	; 0x0e
    1ed0:	97 85       	ldd	r25, Z+15	; 0x0f
    1ed2:	20 81       	ld	r18, Z
    1ed4:	31 81       	ldd	r19, Z+1	; 0x01
    1ed6:	42 81       	ldd	r20, Z+2	; 0x02
    1ed8:	53 81       	ldd	r21, Z+3	; 0x03
    1eda:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
    1ede:	4b 01       	movw	r8, r22
    1ee0:	5c 01       	movw	r10, r24
    1ee2:	f6 01       	movw	r30, r12
    1ee4:	64 87       	std	Z+12, r22	; 0x0c
    1ee6:	75 87       	std	Z+13, r23	; 0x0d
    1ee8:	86 87       	std	Z+14, r24	; 0x0e
    1eea:	97 87       	std	Z+15, r25	; 0x0f

	//measurement update
	state->k = state->p / (state->p + state->r);
    1eec:	24 81       	ldd	r18, Z+4	; 0x04
    1eee:	35 81       	ldd	r19, Z+5	; 0x05
    1ef0:	46 81       	ldd	r20, Z+6	; 0x06
    1ef2:	57 81       	ldd	r21, Z+7	; 0x07
    1ef4:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
    1ef8:	9b 01       	movw	r18, r22
    1efa:	ac 01       	movw	r20, r24
    1efc:	c5 01       	movw	r24, r10
    1efe:	b4 01       	movw	r22, r8
    1f00:	0e 94 0e 14 	call	0x281c	; 0x281c <__divsf3>
    1f04:	7b 01       	movw	r14, r22
    1f06:	8c 01       	movw	r16, r24
    1f08:	f6 01       	movw	r30, r12
    1f0a:	60 8b       	std	Z+16, r22	; 0x10
    1f0c:	71 8b       	std	Z+17, r23	; 0x11
    1f0e:	82 8b       	std	Z+18, r24	; 0x12
    1f10:	93 8b       	std	Z+19, r25	; 0x13
	state->x = state->x + state->k * (measurement - state->x);
    1f12:	40 84       	ldd	r4, Z+8	; 0x08
    1f14:	51 84       	ldd	r5, Z+9	; 0x09
    1f16:	62 84       	ldd	r6, Z+10	; 0x0a
    1f18:	73 84       	ldd	r7, Z+11	; 0x0b
    1f1a:	69 81       	ldd	r22, Y+1	; 0x01
    1f1c:	7a 81       	ldd	r23, Y+2	; 0x02
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	9c 81       	ldd	r25, Y+4	; 0x04
    1f22:	a3 01       	movw	r20, r6
    1f24:	92 01       	movw	r18, r4
    1f26:	0e 94 b6 12 	call	0x256c	; 0x256c <__subsf3>
    1f2a:	9b 01       	movw	r18, r22
    1f2c:	ac 01       	movw	r20, r24
    1f2e:	c8 01       	movw	r24, r16
    1f30:	b7 01       	movw	r22, r14
    1f32:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1f36:	9b 01       	movw	r18, r22
    1f38:	ac 01       	movw	r20, r24
    1f3a:	c3 01       	movw	r24, r6
    1f3c:	b2 01       	movw	r22, r4
    1f3e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3>
    1f42:	f6 01       	movw	r30, r12
    1f44:	60 87       	std	Z+8, r22	; 0x08
    1f46:	71 87       	std	Z+9, r23	; 0x09
    1f48:	82 87       	std	Z+10, r24	; 0x0a
    1f4a:	93 87       	std	Z+11, r25	; 0x0b
	state->p = (1 - state->k) * state->p;
    1f4c:	60 e0       	ldi	r22, 0x00	; 0
    1f4e:	70 e0       	ldi	r23, 0x00	; 0
    1f50:	80 e8       	ldi	r24, 0x80	; 128
    1f52:	9f e3       	ldi	r25, 0x3F	; 63
    1f54:	a8 01       	movw	r20, r16
    1f56:	97 01       	movw	r18, r14
    1f58:	0e 94 b6 12 	call	0x256c	; 0x256c <__subsf3>
    1f5c:	9b 01       	movw	r18, r22
    1f5e:	ac 01       	movw	r20, r24
    1f60:	c5 01       	movw	r24, r10
    1f62:	b4 01       	movw	r22, r8
    1f64:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    1f68:	f6 01       	movw	r30, r12
    1f6a:	64 87       	std	Z+12, r22	; 0x0c
    1f6c:	75 87       	std	Z+13, r23	; 0x0d
    1f6e:	86 87       	std	Z+14, r24	; 0x0e
    1f70:	97 87       	std	Z+15, r25	; 0x0f
}
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	df 90       	pop	r13
    1f88:	cf 90       	pop	r12
    1f8a:	bf 90       	pop	r11
    1f8c:	af 90       	pop	r10
    1f8e:	9f 90       	pop	r9
    1f90:	8f 90       	pop	r8
    1f92:	7f 90       	pop	r7
    1f94:	6f 90       	pop	r6
    1f96:	5f 90       	pop	r5
    1f98:	4f 90       	pop	r4
    1f9a:	08 95       	ret

00001f9c <adc_init>:
//KF

void adc_init(void)
{

	ADMUX = 0x40;
    1f9c:	80 e4       	ldi	r24, 0x40	; 64
    1f9e:	87 b9       	out	0x07, r24	; 7

	ADCSRA = 0x87;
    1fa0:	87 e8       	ldi	r24, 0x87	; 135
    1fa2:	86 b9       	out	0x06, r24	; 6

	DDRF = 0x00;
    1fa4:	10 92 61 00 	sts	0x0061, r1
}
    1fa8:	08 95       	ret

00001faa <adc_get>:

int adc_get(int8_t ad_port)
{
	ADMUX |= ad_port;
    1faa:	97 b1       	in	r25, 0x07	; 7
    1fac:	98 2b       	or	r25, r24
    1fae:	97 b9       	out	0x07, r25	; 7
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (7 << ADPS0);
    1fb0:	87 ec       	ldi	r24, 0xC7	; 199
    1fb2:	86 b9       	out	0x06, r24	; 6
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fb4:	84 ec       	ldi	r24, 0xC4	; 196
    1fb6:	99 e0       	ldi	r25, 0x09	; 9
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <adc_get+0xe>

	_delay_ms(10);

	while (!(ADCSRA&(1 << ADIF)));
    1fbc:	34 9b       	sbis	0x06, 4	; 6
    1fbe:	fe cf       	rjmp	.-4      	; 0x1fbc <adc_get+0x12>

	ADMUX = 0x40;
    1fc0:	80 e4       	ldi	r24, 0x40	; 64
    1fc2:	87 b9       	out	0x07, r24	; 7

	return ADC;
    1fc4:	24 b1       	in	r18, 0x04	; 4
    1fc6:	35 b1       	in	r19, 0x05	; 5

}
    1fc8:	c9 01       	movw	r24, r18
    1fca:	08 95       	ret

00001fcc <main>:


int main(void) {
    1fcc:	2f 92       	push	r2
    1fce:	3f 92       	push	r3
    1fd0:	4f 92       	push	r4
    1fd2:	5f 92       	push	r5
    1fd4:	6f 92       	push	r6
    1fd6:	7f 92       	push	r7
    1fd8:	8f 92       	push	r8
    1fda:	9f 92       	push	r9
    1fdc:	af 92       	push	r10
    1fde:	bf 92       	push	r11
    1fe0:	cf 92       	push	r12
    1fe2:	df 92       	push	r13
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	c6 58       	subi	r28, 0x86	; 134
    1ff6:	d1 40       	sbci	r29, 0x01	; 1
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	fe 01       	movw	r30, r28
    2004:	e9 5b       	subi	r30, 0xB9	; 185
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
	kalman_state kf[16];
	for (i = 0; i < 16; i++)
	{
		//kf[i] = kalman_init(0.00001, 0.005, 1, 0);//filter initializing
		if(i<7)
		kf[i]=kalman_init(0.001,0.005,1,0);
    200c:	0f 2e       	mov	r0, r31
    200e:	ff e6       	ldi	r31, 0x6F	; 111
    2010:	ef 2e       	mov	r14, r31
    2012:	f2 e1       	ldi	r31, 0x12	; 18
    2014:	ff 2e       	mov	r15, r31
    2016:	f3 e8       	ldi	r31, 0x83	; 131
    2018:	0f 2f       	mov	r16, r31
    201a:	fa e3       	ldi	r31, 0x3A	; 58
    201c:	1f 2f       	mov	r17, r31
    201e:	f0 2d       	mov	r31, r0
    2020:	0f 2e       	mov	r0, r31
    2022:	fa e0       	ldi	r31, 0x0A	; 10
    2024:	6f 2e       	mov	r6, r31
    2026:	f7 ed       	ldi	r31, 0xD7	; 215
    2028:	7f 2e       	mov	r7, r31
    202a:	f3 ea       	ldi	r31, 0xA3	; 163
    202c:	8f 2e       	mov	r8, r31
    202e:	fb e3       	ldi	r31, 0x3B	; 59
    2030:	9f 2e       	mov	r9, r31
    2032:	f0 2d       	mov	r31, r0
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	50 e0       	ldi	r21, 0x00	; 0
    2038:	60 e8       	ldi	r22, 0x80	; 128
    203a:	7f e3       	ldi	r23, 0x3F	; 63
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	a0 e0       	ldi	r26, 0x00	; 0
    2042:	b0 e0       	ldi	r27, 0x00	; 0
		kf[i] = kalman_init(0.001, 0.05, 1, 0);
    2044:	0f 2e       	mov	r0, r31
    2046:	fd ec       	ldi	r31, 0xCD	; 205
    2048:	af 2e       	mov	r10, r31
    204a:	fc ec       	ldi	r31, 0xCC	; 204
    204c:	bf 2e       	mov	r11, r31
    204e:	fc e4       	ldi	r31, 0x4C	; 76
    2050:	cf 2e       	mov	r12, r31
    2052:	fd e3       	ldi	r31, 0x3D	; 61
    2054:	df 2e       	mov	r13, r31
    2056:	f0 2d       	mov	r31, r0

	kalman_state kf[16];
	for (i = 0; i < 16; i++)
	{
		//kf[i] = kalman_init(0.00001, 0.005, 1, 0);//filter initializing
		if(i<7)
    2058:	27 30       	cpi	r18, 0x07	; 7
    205a:	31 05       	cpc	r19, r1
    205c:	a4 f4       	brge	.+40     	; 0x2086 <main+0xba>
		kf[i]=kalman_init(0.001,0.005,1,0);
    205e:	e0 82       	st	Z, r14
    2060:	f1 82       	std	Z+1, r15	; 0x01
    2062:	02 83       	std	Z+2, r16	; 0x02
    2064:	13 83       	std	Z+3, r17	; 0x03
    2066:	64 82       	std	Z+4, r6	; 0x04
    2068:	75 82       	std	Z+5, r7	; 0x05
    206a:	86 82       	std	Z+6, r8	; 0x06
    206c:	97 82       	std	Z+7, r9	; 0x07
    206e:	44 87       	std	Z+12, r20	; 0x0c
    2070:	55 87       	std	Z+13, r21	; 0x0d
    2072:	66 87       	std	Z+14, r22	; 0x0e
    2074:	77 87       	std	Z+15, r23	; 0x0f
    2076:	80 87       	std	Z+8, r24	; 0x08
    2078:	91 87       	std	Z+9, r25	; 0x09
    207a:	a2 87       	std	Z+10, r26	; 0x0a
    207c:	b3 87       	std	Z+11, r27	; 0x0b
    207e:	80 8b       	std	Z+16, r24	; 0x10
    2080:	91 8b       	std	Z+17, r25	; 0x11
    2082:	a2 8b       	std	Z+18, r26	; 0x12
    2084:	b3 8b       	std	Z+19, r27	; 0x13
		kf[i] = kalman_init(0.001, 0.05, 1, 0);
    2086:	e0 82       	st	Z, r14
    2088:	f1 82       	std	Z+1, r15	; 0x01
    208a:	02 83       	std	Z+2, r16	; 0x02
    208c:	13 83       	std	Z+3, r17	; 0x03
    208e:	a4 82       	std	Z+4, r10	; 0x04
    2090:	b5 82       	std	Z+5, r11	; 0x05
    2092:	c6 82       	std	Z+6, r12	; 0x06
    2094:	d7 82       	std	Z+7, r13	; 0x07
    2096:	44 87       	std	Z+12, r20	; 0x0c
    2098:	55 87       	std	Z+13, r21	; 0x0d
    209a:	66 87       	std	Z+14, r22	; 0x0e
    209c:	77 87       	std	Z+15, r23	; 0x0f
    209e:	80 87       	std	Z+8, r24	; 0x08
    20a0:	91 87       	std	Z+9, r25	; 0x09
    20a2:	a2 87       	std	Z+10, r26	; 0x0a
    20a4:	b3 87       	std	Z+11, r27	; 0x0b
    20a6:	80 8b       	std	Z+16, r24	; 0x10
    20a8:	91 8b       	std	Z+17, r25	; 0x11
    20aa:	a2 8b       	std	Z+18, r26	; 0x12
    20ac:	b3 8b       	std	Z+19, r27	; 0x13
	char itmp[10];

	int i = 0;//loop index 

	kalman_state kf[16];
	for (i = 0; i < 16; i++)
    20ae:	2f 5f       	subi	r18, 0xFF	; 255
    20b0:	3f 4f       	sbci	r19, 0xFF	; 255
    20b2:	74 96       	adiw	r30, 0x14	; 20
    20b4:	20 31       	cpi	r18, 0x10	; 16
    20b6:	31 05       	cpc	r19, r1
    20b8:	79 f6       	brne	.-98     	; 0x2058 <main+0x8c>
		kf[i] = kalman_init(0.001, 0.05, 1, 0);
	}


	//initializing uart 115200 baud rate.
	uart_init(8, 8);
    20ba:	88 e0       	ldi	r24, 0x08	; 8
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	68 e0       	ldi	r22, 0x08	; 8
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <uart_init>

	//init interrupt
	sei();
    20c6:	78 94       	sei

	//init hmc5883
	hmc5883l_init();
    20c8:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <hmc5883l_init>

	//init mpu6050
	mpu6050_init();
    20cc:	0e 94 24 0b 	call	0x1648	; 0x1648 <mpu6050_init>
//KF

void adc_init(void)
{

	ADMUX = 0x40;
    20d0:	80 e4       	ldi	r24, 0x40	; 64
    20d2:	87 b9       	out	0x07, r24	; 7

	ADCSRA = 0x87;
    20d4:	87 e8       	ldi	r24, 0x87	; 135
    20d6:	86 b9       	out	0x06, r24	; 6

	DDRF = 0x00;
    20d8:	10 92 61 00 	sts	0x0061, r1
#endif




	packet[0] = (int16_t)0x7FFF;
    20dc:	8f ef       	ldi	r24, 0xFF	; 255
    20de:	9f e7       	ldi	r25, 0x7F	; 127
    20e0:	9e a3       	std	Y+38, r25	; 0x26
    20e2:	8d a3       	std	Y+37, r24	; 0x25

		hmc5883l_getdata(&mx, &my, &mz);

		//gyro, accelerate sensors
//		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
		mpu6050_getConvData(&ax, &ay, &az, &gx, &gy, &gz);
    20e4:	07 e2       	ldi	r16, 0x27	; 39
    20e6:	60 2e       	mov	r6, r16
    20e8:	71 2c       	mov	r7, r1
    20ea:	6c 0e       	add	r6, r28
    20ec:	7d 1e       	adc	r7, r29
		packet[12] = (int16_t)(ay*10000);
		packet[13] = (int16_t)(az*10000);

		packet[14] = (int16_t)(gx*100);
		packet[15] = (int16_t)(gy*100);
		packet[16] = (int16_t)(gz*100);
    20ee:	17 e4       	ldi	r17, 0x47	; 71
    20f0:	21 2e       	mov	r2, r17
    20f2:	31 2c       	mov	r3, r1
    20f4:	2c 0e       	add	r2, r28
    20f6:	3d 1e       	adc	r3, r29
			{
				kalman_update(&kf[i-1], (double)packet[i]);
				packet[i] = (int16_t)kf[i-1].x;
			}	
				if (packet[i] == (int16_t)32767)
					packet[i] = (int16_t)32766;
    20f8:	be ef       	ldi	r27, 0xFE	; 254
    20fa:	4b 2e       	mov	r4, r27
    20fc:	bf e7       	ldi	r27, 0x7F	; 127
    20fe:	5b 2e       	mov	r5, r27

		packet[14] = (int16_t)(gx*100);
		packet[15] = (int16_t)(gy*100);
		packet[16] = (int16_t)(gz*100);

		for (i = 1; i < 17; i++)
    2100:	a5 e2       	ldi	r26, 0x25	; 37
    2102:	8a 2e       	mov	r8, r26
    2104:	91 2c       	mov	r9, r1
    2106:	8c 0e       	add	r8, r28
    2108:	9d 1e       	adc	r9, r29
    210a:	f2 e2       	ldi	r31, 0x22	; 34
    210c:	af 2e       	mov	r10, r31
    210e:	b1 2c       	mov	r11, r1
    2110:	a8 0c       	add	r10, r8
    2112:	b9 1c       	adc	r11, r9


		//magnetic seneors
//		hmc5883l_getrawdata(&mxraw, &myraw, &mzraw);

		hmc5883l_getdata(&mx, &my, &mz);
    2114:	ce 01       	movw	r24, r28
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	be 01       	movw	r22, r28
    211a:	6b 5f       	subi	r22, 0xFB	; 251
    211c:	7f 4f       	sbci	r23, 0xFF	; 255
    211e:	ae 01       	movw	r20, r28
    2120:	47 5f       	subi	r20, 0xF7	; 247
    2122:	5f 4f       	sbci	r21, 0xFF	; 255
    2124:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <hmc5883l_getdata>

		//gyro, accelerate sensors
//		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
		mpu6050_getConvData(&ax, &ay, &az, &gx, &gy, &gz);
    2128:	ce 01       	movw	r24, r28
    212a:	0d 96       	adiw	r24, 0x0d	; 13
    212c:	be 01       	movw	r22, r28
    212e:	6f 5e       	subi	r22, 0xEF	; 239
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	ae 01       	movw	r20, r28
    2134:	4b 5e       	subi	r20, 0xEB	; 235
    2136:	5f 4f       	sbci	r21, 0xFF	; 255
    2138:	9e 01       	movw	r18, r28
    213a:	27 5e       	subi	r18, 0xE7	; 231
    213c:	3f 4f       	sbci	r19, 0xFF	; 255
    213e:	8e 01       	movw	r16, r28
    2140:	03 5e       	subi	r16, 0xE3	; 227
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
    2144:	e1 e2       	ldi	r30, 0x21	; 33
    2146:	ee 2e       	mov	r14, r30
    2148:	f1 2c       	mov	r15, r1
    214a:	ec 0e       	add	r14, r28
    214c:	fd 1e       	adc	r15, r29
    214e:	0e 94 c9 09 	call	0x1392	; 0x1392 <mpu6050_getConvData>
    2152:	63 01       	movw	r12, r6
    2154:	73 01       	movw	r14, r6
    2156:	10 e0       	ldi	r17, 0x00	; 0
	//	gx /= DIV; gy /= DIV; gz /= DIV;

		//adc covert(finger flex,pressure)
		for (i = 0; i < 7; i++)
		{
			packet[i+1] = adc_get(i);
    2158:	81 2f       	mov	r24, r17
    215a:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <adc_get>
    215e:	f7 01       	movw	r30, r14
    2160:	81 93       	st	Z+, r24
    2162:	91 93       	st	Z+, r25
    2164:	7f 01       	movw	r14, r30
    2166:	1f 5f       	subi	r17, 0xFF	; 255
	//	gx+=32; gy-=12;
	//	ax /= DIV; ay /= DIV; az /= DIV; 
	//	gx /= DIV; gy /= DIV; gz /= DIV;

		//adc covert(finger flex,pressure)
		for (i = 0; i < 7; i++)
    2168:	17 30       	cpi	r17, 0x07	; 7
    216a:	b1 f7       	brne	.-20     	; 0x2158 <main+0x18c>
		//uart1_puts("\r\n");

		packet[8] = mxraw;
		packet[9] = myraw;
		packet[10] = mzraw;
		packet[8] = (int16_t)(mx*100);
    216c:	69 81       	ldd	r22, Y+1	; 0x01
    216e:	7a 81       	ldd	r23, Y+2	; 0x02
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	48 ec       	ldi	r20, 0xC8	; 200
    217a:	52 e4       	ldi	r21, 0x42	; 66
    217c:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    2180:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__fixsfsi>
    2184:	7e ab       	std	Y+54, r23	; 0x36
    2186:	6d ab       	std	Y+53, r22	; 0x35
		packet[9] = (int16_t)(my*100);
    2188:	6d 81       	ldd	r22, Y+5	; 0x05
    218a:	7e 81       	ldd	r23, Y+6	; 0x06
    218c:	8f 81       	ldd	r24, Y+7	; 0x07
    218e:	98 85       	ldd	r25, Y+8	; 0x08
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	48 ec       	ldi	r20, 0xC8	; 200
    2196:	52 e4       	ldi	r21, 0x42	; 66
    2198:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    219c:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__fixsfsi>
    21a0:	78 af       	std	Y+56, r23	; 0x38
    21a2:	6f ab       	std	Y+55, r22	; 0x37
		packet[10] = (int16_t)(mz*100);
    21a4:	69 85       	ldd	r22, Y+9	; 0x09
    21a6:	7a 85       	ldd	r23, Y+10	; 0x0a
    21a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    21aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	48 ec       	ldi	r20, 0xC8	; 200
    21b2:	52 e4       	ldi	r21, 0x42	; 66
    21b4:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    21b8:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__fixsfsi>
    21bc:	7a af       	std	Y+58, r23	; 0x3a
    21be:	69 af       	std	Y+57, r22	; 0x39

		packet[11] = (int16_t)(ax*10000);
    21c0:	6d 85       	ldd	r22, Y+13	; 0x0d
    21c2:	7e 85       	ldd	r23, Y+14	; 0x0e
    21c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c6:	98 89       	ldd	r25, Y+16	; 0x10
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e4       	ldi	r19, 0x40	; 64
    21cc:	4c e1       	ldi	r20, 0x1C	; 28
    21ce:	56 e4       	ldi	r21, 0x46	; 70
    21d0:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    21d4:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__fixsfsi>
    21d8:	7c af       	std	Y+60, r23	; 0x3c
    21da:	6b af       	std	Y+59, r22	; 0x3b
		packet[12] = (int16_t)(ay*10000);
    21dc:	69 89       	ldd	r22, Y+17	; 0x11
    21de:	7a 89       	ldd	r23, Y+18	; 0x12
    21e0:	8b 89       	ldd	r24, Y+19	; 0x13
    21e2:	9c 89       	ldd	r25, Y+20	; 0x14
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e4       	ldi	r19, 0x40	; 64
    21e8:	4c e1       	ldi	r20, 0x1C	; 28
    21ea:	56 e4       	ldi	r21, 0x46	; 70
    21ec:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    21f0:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__fixsfsi>
    21f4:	7e af       	std	Y+62, r23	; 0x3e
    21f6:	6d af       	std	Y+61, r22	; 0x3d
		packet[13] = (int16_t)(az*10000);
    21f8:	6d 89       	ldd	r22, Y+21	; 0x15
    21fa:	7e 89       	ldd	r23, Y+22	; 0x16
    21fc:	8f 89       	ldd	r24, Y+23	; 0x17
    21fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e4       	ldi	r19, 0x40	; 64
    2204:	4c e1       	ldi	r20, 0x1C	; 28
    2206:	56 e4       	ldi	r21, 0x46	; 70
    2208:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    220c:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__fixsfsi>
    2210:	21 96       	adiw	r28, 0x01	; 1
    2212:	7f af       	std	Y+63, r23	; 0x3f
    2214:	6e af       	std	Y+62, r22	; 0x3e
    2216:	21 97       	sbiw	r28, 0x01	; 1

		packet[14] = (int16_t)(gx*100);
    2218:	69 8d       	ldd	r22, Y+25	; 0x19
    221a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    221c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    221e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	48 ec       	ldi	r20, 0xC8	; 200
    2226:	52 e4       	ldi	r21, 0x42	; 66
    2228:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    222c:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__fixsfsi>
    2230:	23 96       	adiw	r28, 0x03	; 3
    2232:	7f af       	std	Y+63, r23	; 0x3f
    2234:	6e af       	std	Y+62, r22	; 0x3e
    2236:	23 97       	sbiw	r28, 0x03	; 3
		packet[15] = (int16_t)(gy*100);
    2238:	6d 8d       	ldd	r22, Y+29	; 0x1d
    223a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    223c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    223e:	98 a1       	ldd	r25, Y+32	; 0x20
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	48 ec       	ldi	r20, 0xC8	; 200
    2246:	52 e4       	ldi	r21, 0x42	; 66
    2248:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    224c:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__fixsfsi>
    2250:	25 96       	adiw	r28, 0x05	; 5
    2252:	7f af       	std	Y+63, r23	; 0x3f
    2254:	6e af       	std	Y+62, r22	; 0x3e
    2256:	25 97       	sbiw	r28, 0x05	; 5
		packet[16] = (int16_t)(gz*100);
    2258:	69 a1       	ldd	r22, Y+33	; 0x21
    225a:	7a a1       	ldd	r23, Y+34	; 0x22
    225c:	8b a1       	ldd	r24, Y+35	; 0x23
    225e:	9c a1       	ldd	r25, Y+36	; 0x24
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	48 ec       	ldi	r20, 0xC8	; 200
    2266:	52 e4       	ldi	r21, 0x42	; 66
    2268:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsf3>
    226c:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__fixsfsi>
    2270:	27 96       	adiw	r28, 0x07	; 7
    2272:	7f af       	std	Y+63, r23	; 0x3f
    2274:	6e af       	std	Y+62, r22	; 0x3e
    2276:	27 97       	sbiw	r28, 0x07	; 7
    2278:	81 01       	movw	r16, r2

		//	if(packetb[i]-packet[i]>-8&&packetb[i]-packet[i]<8)
		//	packet[i]=packetb[i];
			//if (i > 7)
			{
				kalman_update(&kf[i-1], (double)packet[i]);
    227a:	f6 01       	movw	r30, r12
    227c:	60 81       	ld	r22, Z
    227e:	71 81       	ldd	r23, Z+1	; 0x01
    2280:	88 27       	eor	r24, r24
    2282:	77 fd       	sbrc	r23, 7
    2284:	80 95       	com	r24
    2286:	98 2f       	mov	r25, r24
    2288:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__floatsisf>
    228c:	ab 01       	movw	r20, r22
    228e:	bc 01       	movw	r22, r24
    2290:	c8 01       	movw	r24, r16
    2292:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <kalman_update>
				packet[i] = (int16_t)kf[i-1].x;
    2296:	f8 01       	movw	r30, r16
    2298:	60 85       	ldd	r22, Z+8	; 0x08
    229a:	71 85       	ldd	r23, Z+9	; 0x09
    229c:	82 85       	ldd	r24, Z+10	; 0x0a
    229e:	93 85       	ldd	r25, Z+11	; 0x0b
    22a0:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__fixsfsi>
    22a4:	f6 01       	movw	r30, r12
    22a6:	71 83       	std	Z+1, r23	; 0x01
    22a8:	60 83       	st	Z, r22
			}	
				if (packet[i] == (int16_t)32767)
    22aa:	6f 5f       	subi	r22, 0xFF	; 255
    22ac:	7f 47       	sbci	r23, 0x7F	; 127
    22ae:	19 f4       	brne	.+6      	; 0x22b6 <main+0x2ea>
					packet[i] = (int16_t)32766;
    22b0:	f6 01       	movw	r30, r12
    22b2:	51 82       	std	Z+1, r5	; 0x01
    22b4:	40 82       	st	Z, r4
    22b6:	82 e0       	ldi	r24, 0x02	; 2
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	c8 0e       	add	r12, r24
    22bc:	d9 1e       	adc	r13, r25
    22be:	0c 5e       	subi	r16, 0xEC	; 236
    22c0:	1f 4f       	sbci	r17, 0xFF	; 255

		packet[14] = (int16_t)(gx*100);
		packet[15] = (int16_t)(gy*100);
		packet[16] = (int16_t)(gz*100);

		for (i = 1; i < 17; i++)
    22c2:	ca 14       	cp	r12, r10
    22c4:	db 04       	cpc	r13, r11
    22c6:	c9 f6       	brne	.-78     	; 0x227a <main+0x2ae>
					packet[i] = (int16_t)32766;

		}

	//	packet[i]=(int16_t)0x7374;
		uart_puts_len((char*)packet, 34);
    22c8:	c4 01       	movw	r24, r8
    22ca:	62 e2       	ldi	r22, 0x22	; 34
    22cc:	70 e0       	ldi	r23, 0x00	; 0
    22ce:	0e 94 18 02 	call	0x430	; 0x430 <uart_puts_len>
    22d2:	20 cf       	rjmp	.-448    	; 0x2114 <main+0x148>

000022d4 <_fpadd_parts>:
    22d4:	a0 e0       	ldi	r26, 0x00	; 0
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e0 e7       	ldi	r30, 0x70	; 112
    22da:	f1 e1       	ldi	r31, 0x11	; 17
    22dc:	0c 94 91 17 	jmp	0x2f22	; 0x2f22 <__prologue_saves__>
    22e0:	dc 01       	movw	r26, r24
    22e2:	2b 01       	movw	r4, r22
    22e4:	fa 01       	movw	r30, r20
    22e6:	9c 91       	ld	r25, X
    22e8:	92 30       	cpi	r25, 0x02	; 2
    22ea:	08 f4       	brcc	.+2      	; 0x22ee <_fpadd_parts+0x1a>
    22ec:	39 c1       	rjmp	.+626    	; 0x2560 <_fpadd_parts+0x28c>
    22ee:	eb 01       	movw	r28, r22
    22f0:	88 81       	ld	r24, Y
    22f2:	82 30       	cpi	r24, 0x02	; 2
    22f4:	08 f4       	brcc	.+2      	; 0x22f8 <_fpadd_parts+0x24>
    22f6:	33 c1       	rjmp	.+614    	; 0x255e <_fpadd_parts+0x28a>
    22f8:	94 30       	cpi	r25, 0x04	; 4
    22fa:	69 f4       	brne	.+26     	; 0x2316 <_fpadd_parts+0x42>
    22fc:	84 30       	cpi	r24, 0x04	; 4
    22fe:	09 f0       	breq	.+2      	; 0x2302 <_fpadd_parts+0x2e>
    2300:	2f c1       	rjmp	.+606    	; 0x2560 <_fpadd_parts+0x28c>
    2302:	11 96       	adiw	r26, 0x01	; 1
    2304:	9c 91       	ld	r25, X
    2306:	11 97       	sbiw	r26, 0x01	; 1
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	98 17       	cp	r25, r24
    230c:	09 f4       	brne	.+2      	; 0x2310 <_fpadd_parts+0x3c>
    230e:	28 c1       	rjmp	.+592    	; 0x2560 <_fpadd_parts+0x28c>
    2310:	a4 e0       	ldi	r26, 0x04	; 4
    2312:	b1 e0       	ldi	r27, 0x01	; 1
    2314:	25 c1       	rjmp	.+586    	; 0x2560 <_fpadd_parts+0x28c>
    2316:	84 30       	cpi	r24, 0x04	; 4
    2318:	09 f4       	brne	.+2      	; 0x231c <_fpadd_parts+0x48>
    231a:	21 c1       	rjmp	.+578    	; 0x255e <_fpadd_parts+0x28a>
    231c:	82 30       	cpi	r24, 0x02	; 2
    231e:	a9 f4       	brne	.+42     	; 0x234a <_fpadd_parts+0x76>
    2320:	92 30       	cpi	r25, 0x02	; 2
    2322:	09 f0       	breq	.+2      	; 0x2326 <_fpadd_parts+0x52>
    2324:	1d c1       	rjmp	.+570    	; 0x2560 <_fpadd_parts+0x28c>
    2326:	9a 01       	movw	r18, r20
    2328:	ad 01       	movw	r20, r26
    232a:	88 e0       	ldi	r24, 0x08	; 8
    232c:	ea 01       	movw	r28, r20
    232e:	09 90       	ld	r0, Y+
    2330:	ae 01       	movw	r20, r28
    2332:	e9 01       	movw	r28, r18
    2334:	09 92       	st	Y+, r0
    2336:	9e 01       	movw	r18, r28
    2338:	81 50       	subi	r24, 0x01	; 1
    233a:	c1 f7       	brne	.-16     	; 0x232c <_fpadd_parts+0x58>
    233c:	e2 01       	movw	r28, r4
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	11 96       	adiw	r26, 0x01	; 1
    2342:	9c 91       	ld	r25, X
    2344:	89 23       	and	r24, r25
    2346:	81 83       	std	Z+1, r24	; 0x01
    2348:	08 c1       	rjmp	.+528    	; 0x255a <_fpadd_parts+0x286>
    234a:	92 30       	cpi	r25, 0x02	; 2
    234c:	09 f4       	brne	.+2      	; 0x2350 <_fpadd_parts+0x7c>
    234e:	07 c1       	rjmp	.+526    	; 0x255e <_fpadd_parts+0x28a>
    2350:	12 96       	adiw	r26, 0x02	; 2
    2352:	2d 90       	ld	r2, X+
    2354:	3c 90       	ld	r3, X
    2356:	13 97       	sbiw	r26, 0x03	; 3
    2358:	eb 01       	movw	r28, r22
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	9b 81       	ldd	r25, Y+3	; 0x03
    235e:	14 96       	adiw	r26, 0x04	; 4
    2360:	ad 90       	ld	r10, X+
    2362:	bd 90       	ld	r11, X+
    2364:	cd 90       	ld	r12, X+
    2366:	dc 90       	ld	r13, X
    2368:	17 97       	sbiw	r26, 0x07	; 7
    236a:	ec 80       	ldd	r14, Y+4	; 0x04
    236c:	fd 80       	ldd	r15, Y+5	; 0x05
    236e:	0e 81       	ldd	r16, Y+6	; 0x06
    2370:	1f 81       	ldd	r17, Y+7	; 0x07
    2372:	91 01       	movw	r18, r2
    2374:	28 1b       	sub	r18, r24
    2376:	39 0b       	sbc	r19, r25
    2378:	b9 01       	movw	r22, r18
    237a:	37 ff       	sbrs	r19, 7
    237c:	04 c0       	rjmp	.+8      	; 0x2386 <_fpadd_parts+0xb2>
    237e:	66 27       	eor	r22, r22
    2380:	77 27       	eor	r23, r23
    2382:	62 1b       	sub	r22, r18
    2384:	73 0b       	sbc	r23, r19
    2386:	60 32       	cpi	r22, 0x20	; 32
    2388:	71 05       	cpc	r23, r1
    238a:	0c f0       	brlt	.+2      	; 0x238e <_fpadd_parts+0xba>
    238c:	61 c0       	rjmp	.+194    	; 0x2450 <_fpadd_parts+0x17c>
    238e:	12 16       	cp	r1, r18
    2390:	13 06       	cpc	r1, r19
    2392:	6c f5       	brge	.+90     	; 0x23ee <_fpadd_parts+0x11a>
    2394:	37 01       	movw	r6, r14
    2396:	48 01       	movw	r8, r16
    2398:	06 2e       	mov	r0, r22
    239a:	04 c0       	rjmp	.+8      	; 0x23a4 <_fpadd_parts+0xd0>
    239c:	96 94       	lsr	r9
    239e:	87 94       	ror	r8
    23a0:	77 94       	ror	r7
    23a2:	67 94       	ror	r6
    23a4:	0a 94       	dec	r0
    23a6:	d2 f7       	brpl	.-12     	; 0x239c <_fpadd_parts+0xc8>
    23a8:	21 e0       	ldi	r18, 0x01	; 1
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e0       	ldi	r20, 0x00	; 0
    23ae:	50 e0       	ldi	r21, 0x00	; 0
    23b0:	04 c0       	rjmp	.+8      	; 0x23ba <_fpadd_parts+0xe6>
    23b2:	22 0f       	add	r18, r18
    23b4:	33 1f       	adc	r19, r19
    23b6:	44 1f       	adc	r20, r20
    23b8:	55 1f       	adc	r21, r21
    23ba:	6a 95       	dec	r22
    23bc:	d2 f7       	brpl	.-12     	; 0x23b2 <_fpadd_parts+0xde>
    23be:	21 50       	subi	r18, 0x01	; 1
    23c0:	30 40       	sbci	r19, 0x00	; 0
    23c2:	40 40       	sbci	r20, 0x00	; 0
    23c4:	50 40       	sbci	r21, 0x00	; 0
    23c6:	2e 21       	and	r18, r14
    23c8:	3f 21       	and	r19, r15
    23ca:	40 23       	and	r20, r16
    23cc:	51 23       	and	r21, r17
    23ce:	21 15       	cp	r18, r1
    23d0:	31 05       	cpc	r19, r1
    23d2:	41 05       	cpc	r20, r1
    23d4:	51 05       	cpc	r21, r1
    23d6:	21 f0       	breq	.+8      	; 0x23e0 <_fpadd_parts+0x10c>
    23d8:	21 e0       	ldi	r18, 0x01	; 1
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	79 01       	movw	r14, r18
    23e2:	8a 01       	movw	r16, r20
    23e4:	e6 28       	or	r14, r6
    23e6:	f7 28       	or	r15, r7
    23e8:	08 29       	or	r16, r8
    23ea:	19 29       	or	r17, r9
    23ec:	3c c0       	rjmp	.+120    	; 0x2466 <_fpadd_parts+0x192>
    23ee:	23 2b       	or	r18, r19
    23f0:	d1 f1       	breq	.+116    	; 0x2466 <_fpadd_parts+0x192>
    23f2:	26 0e       	add	r2, r22
    23f4:	37 1e       	adc	r3, r23
    23f6:	35 01       	movw	r6, r10
    23f8:	46 01       	movw	r8, r12
    23fa:	06 2e       	mov	r0, r22
    23fc:	04 c0       	rjmp	.+8      	; 0x2406 <_fpadd_parts+0x132>
    23fe:	96 94       	lsr	r9
    2400:	87 94       	ror	r8
    2402:	77 94       	ror	r7
    2404:	67 94       	ror	r6
    2406:	0a 94       	dec	r0
    2408:	d2 f7       	brpl	.-12     	; 0x23fe <_fpadd_parts+0x12a>
    240a:	21 e0       	ldi	r18, 0x01	; 1
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e0       	ldi	r20, 0x00	; 0
    2410:	50 e0       	ldi	r21, 0x00	; 0
    2412:	04 c0       	rjmp	.+8      	; 0x241c <_fpadd_parts+0x148>
    2414:	22 0f       	add	r18, r18
    2416:	33 1f       	adc	r19, r19
    2418:	44 1f       	adc	r20, r20
    241a:	55 1f       	adc	r21, r21
    241c:	6a 95       	dec	r22
    241e:	d2 f7       	brpl	.-12     	; 0x2414 <_fpadd_parts+0x140>
    2420:	21 50       	subi	r18, 0x01	; 1
    2422:	30 40       	sbci	r19, 0x00	; 0
    2424:	40 40       	sbci	r20, 0x00	; 0
    2426:	50 40       	sbci	r21, 0x00	; 0
    2428:	2a 21       	and	r18, r10
    242a:	3b 21       	and	r19, r11
    242c:	4c 21       	and	r20, r12
    242e:	5d 21       	and	r21, r13
    2430:	21 15       	cp	r18, r1
    2432:	31 05       	cpc	r19, r1
    2434:	41 05       	cpc	r20, r1
    2436:	51 05       	cpc	r21, r1
    2438:	21 f0       	breq	.+8      	; 0x2442 <_fpadd_parts+0x16e>
    243a:	21 e0       	ldi	r18, 0x01	; 1
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	50 e0       	ldi	r21, 0x00	; 0
    2442:	59 01       	movw	r10, r18
    2444:	6a 01       	movw	r12, r20
    2446:	a6 28       	or	r10, r6
    2448:	b7 28       	or	r11, r7
    244a:	c8 28       	or	r12, r8
    244c:	d9 28       	or	r13, r9
    244e:	0b c0       	rjmp	.+22     	; 0x2466 <_fpadd_parts+0x192>
    2450:	82 15       	cp	r24, r2
    2452:	93 05       	cpc	r25, r3
    2454:	2c f0       	brlt	.+10     	; 0x2460 <_fpadd_parts+0x18c>
    2456:	1c 01       	movw	r2, r24
    2458:	aa 24       	eor	r10, r10
    245a:	bb 24       	eor	r11, r11
    245c:	65 01       	movw	r12, r10
    245e:	03 c0       	rjmp	.+6      	; 0x2466 <_fpadd_parts+0x192>
    2460:	ee 24       	eor	r14, r14
    2462:	ff 24       	eor	r15, r15
    2464:	87 01       	movw	r16, r14
    2466:	11 96       	adiw	r26, 0x01	; 1
    2468:	9c 91       	ld	r25, X
    246a:	d2 01       	movw	r26, r4
    246c:	11 96       	adiw	r26, 0x01	; 1
    246e:	8c 91       	ld	r24, X
    2470:	98 17       	cp	r25, r24
    2472:	09 f4       	brne	.+2      	; 0x2476 <_fpadd_parts+0x1a2>
    2474:	45 c0       	rjmp	.+138    	; 0x2500 <_fpadd_parts+0x22c>
    2476:	99 23       	and	r25, r25
    2478:	39 f0       	breq	.+14     	; 0x2488 <_fpadd_parts+0x1b4>
    247a:	a8 01       	movw	r20, r16
    247c:	97 01       	movw	r18, r14
    247e:	2a 19       	sub	r18, r10
    2480:	3b 09       	sbc	r19, r11
    2482:	4c 09       	sbc	r20, r12
    2484:	5d 09       	sbc	r21, r13
    2486:	06 c0       	rjmp	.+12     	; 0x2494 <_fpadd_parts+0x1c0>
    2488:	a6 01       	movw	r20, r12
    248a:	95 01       	movw	r18, r10
    248c:	2e 19       	sub	r18, r14
    248e:	3f 09       	sbc	r19, r15
    2490:	40 0b       	sbc	r20, r16
    2492:	51 0b       	sbc	r21, r17
    2494:	57 fd       	sbrc	r21, 7
    2496:	08 c0       	rjmp	.+16     	; 0x24a8 <_fpadd_parts+0x1d4>
    2498:	11 82       	std	Z+1, r1	; 0x01
    249a:	33 82       	std	Z+3, r3	; 0x03
    249c:	22 82       	std	Z+2, r2	; 0x02
    249e:	24 83       	std	Z+4, r18	; 0x04
    24a0:	35 83       	std	Z+5, r19	; 0x05
    24a2:	46 83       	std	Z+6, r20	; 0x06
    24a4:	57 83       	std	Z+7, r21	; 0x07
    24a6:	1d c0       	rjmp	.+58     	; 0x24e2 <_fpadd_parts+0x20e>
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	81 83       	std	Z+1, r24	; 0x01
    24ac:	33 82       	std	Z+3, r3	; 0x03
    24ae:	22 82       	std	Z+2, r2	; 0x02
    24b0:	88 27       	eor	r24, r24
    24b2:	99 27       	eor	r25, r25
    24b4:	dc 01       	movw	r26, r24
    24b6:	82 1b       	sub	r24, r18
    24b8:	93 0b       	sbc	r25, r19
    24ba:	a4 0b       	sbc	r26, r20
    24bc:	b5 0b       	sbc	r27, r21
    24be:	84 83       	std	Z+4, r24	; 0x04
    24c0:	95 83       	std	Z+5, r25	; 0x05
    24c2:	a6 83       	std	Z+6, r26	; 0x06
    24c4:	b7 83       	std	Z+7, r27	; 0x07
    24c6:	0d c0       	rjmp	.+26     	; 0x24e2 <_fpadd_parts+0x20e>
    24c8:	22 0f       	add	r18, r18
    24ca:	33 1f       	adc	r19, r19
    24cc:	44 1f       	adc	r20, r20
    24ce:	55 1f       	adc	r21, r21
    24d0:	24 83       	std	Z+4, r18	; 0x04
    24d2:	35 83       	std	Z+5, r19	; 0x05
    24d4:	46 83       	std	Z+6, r20	; 0x06
    24d6:	57 83       	std	Z+7, r21	; 0x07
    24d8:	82 81       	ldd	r24, Z+2	; 0x02
    24da:	93 81       	ldd	r25, Z+3	; 0x03
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	93 83       	std	Z+3, r25	; 0x03
    24e0:	82 83       	std	Z+2, r24	; 0x02
    24e2:	24 81       	ldd	r18, Z+4	; 0x04
    24e4:	35 81       	ldd	r19, Z+5	; 0x05
    24e6:	46 81       	ldd	r20, Z+6	; 0x06
    24e8:	57 81       	ldd	r21, Z+7	; 0x07
    24ea:	da 01       	movw	r26, r20
    24ec:	c9 01       	movw	r24, r18
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	a1 09       	sbc	r26, r1
    24f2:	b1 09       	sbc	r27, r1
    24f4:	8f 5f       	subi	r24, 0xFF	; 255
    24f6:	9f 4f       	sbci	r25, 0xFF	; 255
    24f8:	af 4f       	sbci	r26, 0xFF	; 255
    24fa:	bf 43       	sbci	r27, 0x3F	; 63
    24fc:	28 f3       	brcs	.-54     	; 0x24c8 <_fpadd_parts+0x1f4>
    24fe:	0b c0       	rjmp	.+22     	; 0x2516 <_fpadd_parts+0x242>
    2500:	91 83       	std	Z+1, r25	; 0x01
    2502:	33 82       	std	Z+3, r3	; 0x03
    2504:	22 82       	std	Z+2, r2	; 0x02
    2506:	ea 0c       	add	r14, r10
    2508:	fb 1c       	adc	r15, r11
    250a:	0c 1d       	adc	r16, r12
    250c:	1d 1d       	adc	r17, r13
    250e:	e4 82       	std	Z+4, r14	; 0x04
    2510:	f5 82       	std	Z+5, r15	; 0x05
    2512:	06 83       	std	Z+6, r16	; 0x06
    2514:	17 83       	std	Z+7, r17	; 0x07
    2516:	83 e0       	ldi	r24, 0x03	; 3
    2518:	80 83       	st	Z, r24
    251a:	24 81       	ldd	r18, Z+4	; 0x04
    251c:	35 81       	ldd	r19, Z+5	; 0x05
    251e:	46 81       	ldd	r20, Z+6	; 0x06
    2520:	57 81       	ldd	r21, Z+7	; 0x07
    2522:	57 ff       	sbrs	r21, 7
    2524:	1a c0       	rjmp	.+52     	; 0x255a <_fpadd_parts+0x286>
    2526:	c9 01       	movw	r24, r18
    2528:	aa 27       	eor	r26, r26
    252a:	97 fd       	sbrc	r25, 7
    252c:	a0 95       	com	r26
    252e:	ba 2f       	mov	r27, r26
    2530:	81 70       	andi	r24, 0x01	; 1
    2532:	90 70       	andi	r25, 0x00	; 0
    2534:	a0 70       	andi	r26, 0x00	; 0
    2536:	b0 70       	andi	r27, 0x00	; 0
    2538:	56 95       	lsr	r21
    253a:	47 95       	ror	r20
    253c:	37 95       	ror	r19
    253e:	27 95       	ror	r18
    2540:	82 2b       	or	r24, r18
    2542:	93 2b       	or	r25, r19
    2544:	a4 2b       	or	r26, r20
    2546:	b5 2b       	or	r27, r21
    2548:	84 83       	std	Z+4, r24	; 0x04
    254a:	95 83       	std	Z+5, r25	; 0x05
    254c:	a6 83       	std	Z+6, r26	; 0x06
    254e:	b7 83       	std	Z+7, r27	; 0x07
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	01 96       	adiw	r24, 0x01	; 1
    2556:	93 83       	std	Z+3, r25	; 0x03
    2558:	82 83       	std	Z+2, r24	; 0x02
    255a:	df 01       	movw	r26, r30
    255c:	01 c0       	rjmp	.+2      	; 0x2560 <_fpadd_parts+0x28c>
    255e:	d2 01       	movw	r26, r4
    2560:	cd 01       	movw	r24, r26
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	e2 e1       	ldi	r30, 0x12	; 18
    2568:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__epilogue_restores__>

0000256c <__subsf3>:
    256c:	a0 e2       	ldi	r26, 0x20	; 32
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	ec eb       	ldi	r30, 0xBC	; 188
    2572:	f2 e1       	ldi	r31, 0x12	; 18
    2574:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <__prologue_saves__+0x18>
    2578:	69 83       	std	Y+1, r22	; 0x01
    257a:	7a 83       	std	Y+2, r23	; 0x02
    257c:	8b 83       	std	Y+3, r24	; 0x03
    257e:	9c 83       	std	Y+4, r25	; 0x04
    2580:	2d 83       	std	Y+5, r18	; 0x05
    2582:	3e 83       	std	Y+6, r19	; 0x06
    2584:	4f 83       	std	Y+7, r20	; 0x07
    2586:	58 87       	std	Y+8, r21	; 0x08
    2588:	e9 e0       	ldi	r30, 0x09	; 9
    258a:	ee 2e       	mov	r14, r30
    258c:	f1 2c       	mov	r15, r1
    258e:	ec 0e       	add	r14, r28
    2590:	fd 1e       	adc	r15, r29
    2592:	ce 01       	movw	r24, r28
    2594:	01 96       	adiw	r24, 0x01	; 1
    2596:	b7 01       	movw	r22, r14
    2598:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__unpack_f>
    259c:	8e 01       	movw	r16, r28
    259e:	0f 5e       	subi	r16, 0xEF	; 239
    25a0:	1f 4f       	sbci	r17, 0xFF	; 255
    25a2:	ce 01       	movw	r24, r28
    25a4:	05 96       	adiw	r24, 0x05	; 5
    25a6:	b8 01       	movw	r22, r16
    25a8:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__unpack_f>
    25ac:	8a 89       	ldd	r24, Y+18	; 0x12
    25ae:	91 e0       	ldi	r25, 0x01	; 1
    25b0:	89 27       	eor	r24, r25
    25b2:	8a 8b       	std	Y+18, r24	; 0x12
    25b4:	c7 01       	movw	r24, r14
    25b6:	b8 01       	movw	r22, r16
    25b8:	ae 01       	movw	r20, r28
    25ba:	47 5e       	subi	r20, 0xE7	; 231
    25bc:	5f 4f       	sbci	r21, 0xFF	; 255
    25be:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <_fpadd_parts>
    25c2:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__pack_f>
    25c6:	a0 96       	adiw	r28, 0x20	; 32
    25c8:	e6 e0       	ldi	r30, 0x06	; 6
    25ca:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__epilogue_restores__+0x18>

000025ce <__addsf3>:
    25ce:	a0 e2       	ldi	r26, 0x20	; 32
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	ed ee       	ldi	r30, 0xED	; 237
    25d4:	f2 e1       	ldi	r31, 0x12	; 18
    25d6:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <__prologue_saves__+0x18>
    25da:	69 83       	std	Y+1, r22	; 0x01
    25dc:	7a 83       	std	Y+2, r23	; 0x02
    25de:	8b 83       	std	Y+3, r24	; 0x03
    25e0:	9c 83       	std	Y+4, r25	; 0x04
    25e2:	2d 83       	std	Y+5, r18	; 0x05
    25e4:	3e 83       	std	Y+6, r19	; 0x06
    25e6:	4f 83       	std	Y+7, r20	; 0x07
    25e8:	58 87       	std	Y+8, r21	; 0x08
    25ea:	f9 e0       	ldi	r31, 0x09	; 9
    25ec:	ef 2e       	mov	r14, r31
    25ee:	f1 2c       	mov	r15, r1
    25f0:	ec 0e       	add	r14, r28
    25f2:	fd 1e       	adc	r15, r29
    25f4:	ce 01       	movw	r24, r28
    25f6:	01 96       	adiw	r24, 0x01	; 1
    25f8:	b7 01       	movw	r22, r14
    25fa:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__unpack_f>
    25fe:	8e 01       	movw	r16, r28
    2600:	0f 5e       	subi	r16, 0xEF	; 239
    2602:	1f 4f       	sbci	r17, 0xFF	; 255
    2604:	ce 01       	movw	r24, r28
    2606:	05 96       	adiw	r24, 0x05	; 5
    2608:	b8 01       	movw	r22, r16
    260a:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__unpack_f>
    260e:	c7 01       	movw	r24, r14
    2610:	b8 01       	movw	r22, r16
    2612:	ae 01       	movw	r20, r28
    2614:	47 5e       	subi	r20, 0xE7	; 231
    2616:	5f 4f       	sbci	r21, 0xFF	; 255
    2618:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <_fpadd_parts>
    261c:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__pack_f>
    2620:	a0 96       	adiw	r28, 0x20	; 32
    2622:	e6 e0       	ldi	r30, 0x06	; 6
    2624:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__epilogue_restores__+0x18>

00002628 <__mulsf3>:
    2628:	a0 e2       	ldi	r26, 0x20	; 32
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	ea e1       	ldi	r30, 0x1A	; 26
    262e:	f3 e1       	ldi	r31, 0x13	; 19
    2630:	0c 94 91 17 	jmp	0x2f22	; 0x2f22 <__prologue_saves__>
    2634:	69 83       	std	Y+1, r22	; 0x01
    2636:	7a 83       	std	Y+2, r23	; 0x02
    2638:	8b 83       	std	Y+3, r24	; 0x03
    263a:	9c 83       	std	Y+4, r25	; 0x04
    263c:	2d 83       	std	Y+5, r18	; 0x05
    263e:	3e 83       	std	Y+6, r19	; 0x06
    2640:	4f 83       	std	Y+7, r20	; 0x07
    2642:	58 87       	std	Y+8, r21	; 0x08
    2644:	ce 01       	movw	r24, r28
    2646:	01 96       	adiw	r24, 0x01	; 1
    2648:	be 01       	movw	r22, r28
    264a:	67 5f       	subi	r22, 0xF7	; 247
    264c:	7f 4f       	sbci	r23, 0xFF	; 255
    264e:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__unpack_f>
    2652:	ce 01       	movw	r24, r28
    2654:	05 96       	adiw	r24, 0x05	; 5
    2656:	be 01       	movw	r22, r28
    2658:	6f 5e       	subi	r22, 0xEF	; 239
    265a:	7f 4f       	sbci	r23, 0xFF	; 255
    265c:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__unpack_f>
    2660:	99 85       	ldd	r25, Y+9	; 0x09
    2662:	92 30       	cpi	r25, 0x02	; 2
    2664:	88 f0       	brcs	.+34     	; 0x2688 <__mulsf3+0x60>
    2666:	89 89       	ldd	r24, Y+17	; 0x11
    2668:	82 30       	cpi	r24, 0x02	; 2
    266a:	c8 f0       	brcs	.+50     	; 0x269e <__mulsf3+0x76>
    266c:	94 30       	cpi	r25, 0x04	; 4
    266e:	19 f4       	brne	.+6      	; 0x2676 <__mulsf3+0x4e>
    2670:	82 30       	cpi	r24, 0x02	; 2
    2672:	51 f4       	brne	.+20     	; 0x2688 <__mulsf3+0x60>
    2674:	04 c0       	rjmp	.+8      	; 0x267e <__mulsf3+0x56>
    2676:	84 30       	cpi	r24, 0x04	; 4
    2678:	29 f4       	brne	.+10     	; 0x2684 <__mulsf3+0x5c>
    267a:	92 30       	cpi	r25, 0x02	; 2
    267c:	81 f4       	brne	.+32     	; 0x269e <__mulsf3+0x76>
    267e:	84 e0       	ldi	r24, 0x04	; 4
    2680:	91 e0       	ldi	r25, 0x01	; 1
    2682:	c6 c0       	rjmp	.+396    	; 0x2810 <__mulsf3+0x1e8>
    2684:	92 30       	cpi	r25, 0x02	; 2
    2686:	49 f4       	brne	.+18     	; 0x269a <__mulsf3+0x72>
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	9a 85       	ldd	r25, Y+10	; 0x0a
    268c:	8a 89       	ldd	r24, Y+18	; 0x12
    268e:	98 13       	cpse	r25, r24
    2690:	21 e0       	ldi	r18, 0x01	; 1
    2692:	2a 87       	std	Y+10, r18	; 0x0a
    2694:	ce 01       	movw	r24, r28
    2696:	09 96       	adiw	r24, 0x09	; 9
    2698:	bb c0       	rjmp	.+374    	; 0x2810 <__mulsf3+0x1e8>
    269a:	82 30       	cpi	r24, 0x02	; 2
    269c:	49 f4       	brne	.+18     	; 0x26b0 <__mulsf3+0x88>
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a2:	8a 89       	ldd	r24, Y+18	; 0x12
    26a4:	98 13       	cpse	r25, r24
    26a6:	21 e0       	ldi	r18, 0x01	; 1
    26a8:	2a 8b       	std	Y+18, r18	; 0x12
    26aa:	ce 01       	movw	r24, r28
    26ac:	41 96       	adiw	r24, 0x11	; 17
    26ae:	b0 c0       	rjmp	.+352    	; 0x2810 <__mulsf3+0x1e8>
    26b0:	2d 84       	ldd	r2, Y+13	; 0x0d
    26b2:	3e 84       	ldd	r3, Y+14	; 0x0e
    26b4:	4f 84       	ldd	r4, Y+15	; 0x0f
    26b6:	58 88       	ldd	r5, Y+16	; 0x10
    26b8:	6d 88       	ldd	r6, Y+21	; 0x15
    26ba:	7e 88       	ldd	r7, Y+22	; 0x16
    26bc:	8f 88       	ldd	r8, Y+23	; 0x17
    26be:	98 8c       	ldd	r9, Y+24	; 0x18
    26c0:	ee 24       	eor	r14, r14
    26c2:	ff 24       	eor	r15, r15
    26c4:	87 01       	movw	r16, r14
    26c6:	aa 24       	eor	r10, r10
    26c8:	bb 24       	eor	r11, r11
    26ca:	65 01       	movw	r12, r10
    26cc:	40 e0       	ldi	r20, 0x00	; 0
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	70 e0       	ldi	r23, 0x00	; 0
    26d4:	e0 e0       	ldi	r30, 0x00	; 0
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	c1 01       	movw	r24, r2
    26da:	81 70       	andi	r24, 0x01	; 1
    26dc:	90 70       	andi	r25, 0x00	; 0
    26de:	89 2b       	or	r24, r25
    26e0:	e9 f0       	breq	.+58     	; 0x271c <__mulsf3+0xf4>
    26e2:	e6 0c       	add	r14, r6
    26e4:	f7 1c       	adc	r15, r7
    26e6:	08 1d       	adc	r16, r8
    26e8:	19 1d       	adc	r17, r9
    26ea:	9a 01       	movw	r18, r20
    26ec:	ab 01       	movw	r20, r22
    26ee:	2a 0d       	add	r18, r10
    26f0:	3b 1d       	adc	r19, r11
    26f2:	4c 1d       	adc	r20, r12
    26f4:	5d 1d       	adc	r21, r13
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	a0 e0       	ldi	r26, 0x00	; 0
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e6 14       	cp	r14, r6
    2700:	f7 04       	cpc	r15, r7
    2702:	08 05       	cpc	r16, r8
    2704:	19 05       	cpc	r17, r9
    2706:	20 f4       	brcc	.+8      	; 0x2710 <__mulsf3+0xe8>
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	a0 e0       	ldi	r26, 0x00	; 0
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	ba 01       	movw	r22, r20
    2712:	a9 01       	movw	r20, r18
    2714:	48 0f       	add	r20, r24
    2716:	59 1f       	adc	r21, r25
    2718:	6a 1f       	adc	r22, r26
    271a:	7b 1f       	adc	r23, r27
    271c:	aa 0c       	add	r10, r10
    271e:	bb 1c       	adc	r11, r11
    2720:	cc 1c       	adc	r12, r12
    2722:	dd 1c       	adc	r13, r13
    2724:	97 fe       	sbrs	r9, 7
    2726:	08 c0       	rjmp	.+16     	; 0x2738 <__mulsf3+0x110>
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	a0 e0       	ldi	r26, 0x00	; 0
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	a8 2a       	or	r10, r24
    2732:	b9 2a       	or	r11, r25
    2734:	ca 2a       	or	r12, r26
    2736:	db 2a       	or	r13, r27
    2738:	31 96       	adiw	r30, 0x01	; 1
    273a:	e0 32       	cpi	r30, 0x20	; 32
    273c:	f1 05       	cpc	r31, r1
    273e:	49 f0       	breq	.+18     	; 0x2752 <__mulsf3+0x12a>
    2740:	66 0c       	add	r6, r6
    2742:	77 1c       	adc	r7, r7
    2744:	88 1c       	adc	r8, r8
    2746:	99 1c       	adc	r9, r9
    2748:	56 94       	lsr	r5
    274a:	47 94       	ror	r4
    274c:	37 94       	ror	r3
    274e:	27 94       	ror	r2
    2750:	c3 cf       	rjmp	.-122    	; 0x26d8 <__mulsf3+0xb0>
    2752:	fa 85       	ldd	r31, Y+10	; 0x0a
    2754:	ea 89       	ldd	r30, Y+18	; 0x12
    2756:	2b 89       	ldd	r18, Y+19	; 0x13
    2758:	3c 89       	ldd	r19, Y+20	; 0x14
    275a:	8b 85       	ldd	r24, Y+11	; 0x0b
    275c:	9c 85       	ldd	r25, Y+12	; 0x0c
    275e:	28 0f       	add	r18, r24
    2760:	39 1f       	adc	r19, r25
    2762:	2e 5f       	subi	r18, 0xFE	; 254
    2764:	3f 4f       	sbci	r19, 0xFF	; 255
    2766:	17 c0       	rjmp	.+46     	; 0x2796 <__mulsf3+0x16e>
    2768:	ca 01       	movw	r24, r20
    276a:	81 70       	andi	r24, 0x01	; 1
    276c:	90 70       	andi	r25, 0x00	; 0
    276e:	89 2b       	or	r24, r25
    2770:	61 f0       	breq	.+24     	; 0x278a <__mulsf3+0x162>
    2772:	16 95       	lsr	r17
    2774:	07 95       	ror	r16
    2776:	f7 94       	ror	r15
    2778:	e7 94       	ror	r14
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	a0 e0       	ldi	r26, 0x00	; 0
    2780:	b0 e8       	ldi	r27, 0x80	; 128
    2782:	e8 2a       	or	r14, r24
    2784:	f9 2a       	or	r15, r25
    2786:	0a 2b       	or	r16, r26
    2788:	1b 2b       	or	r17, r27
    278a:	76 95       	lsr	r23
    278c:	67 95       	ror	r22
    278e:	57 95       	ror	r21
    2790:	47 95       	ror	r20
    2792:	2f 5f       	subi	r18, 0xFF	; 255
    2794:	3f 4f       	sbci	r19, 0xFF	; 255
    2796:	77 fd       	sbrc	r23, 7
    2798:	e7 cf       	rjmp	.-50     	; 0x2768 <__mulsf3+0x140>
    279a:	0c c0       	rjmp	.+24     	; 0x27b4 <__mulsf3+0x18c>
    279c:	44 0f       	add	r20, r20
    279e:	55 1f       	adc	r21, r21
    27a0:	66 1f       	adc	r22, r22
    27a2:	77 1f       	adc	r23, r23
    27a4:	17 fd       	sbrc	r17, 7
    27a6:	41 60       	ori	r20, 0x01	; 1
    27a8:	ee 0c       	add	r14, r14
    27aa:	ff 1c       	adc	r15, r15
    27ac:	00 1f       	adc	r16, r16
    27ae:	11 1f       	adc	r17, r17
    27b0:	21 50       	subi	r18, 0x01	; 1
    27b2:	30 40       	sbci	r19, 0x00	; 0
    27b4:	40 30       	cpi	r20, 0x00	; 0
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	59 07       	cpc	r21, r25
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	69 07       	cpc	r22, r25
    27be:	90 e4       	ldi	r25, 0x40	; 64
    27c0:	79 07       	cpc	r23, r25
    27c2:	60 f3       	brcs	.-40     	; 0x279c <__mulsf3+0x174>
    27c4:	2b 8f       	std	Y+27, r18	; 0x1b
    27c6:	3c 8f       	std	Y+28, r19	; 0x1c
    27c8:	db 01       	movw	r26, r22
    27ca:	ca 01       	movw	r24, r20
    27cc:	8f 77       	andi	r24, 0x7F	; 127
    27ce:	90 70       	andi	r25, 0x00	; 0
    27d0:	a0 70       	andi	r26, 0x00	; 0
    27d2:	b0 70       	andi	r27, 0x00	; 0
    27d4:	80 34       	cpi	r24, 0x40	; 64
    27d6:	91 05       	cpc	r25, r1
    27d8:	a1 05       	cpc	r26, r1
    27da:	b1 05       	cpc	r27, r1
    27dc:	61 f4       	brne	.+24     	; 0x27f6 <__mulsf3+0x1ce>
    27de:	47 fd       	sbrc	r20, 7
    27e0:	0a c0       	rjmp	.+20     	; 0x27f6 <__mulsf3+0x1ce>
    27e2:	e1 14       	cp	r14, r1
    27e4:	f1 04       	cpc	r15, r1
    27e6:	01 05       	cpc	r16, r1
    27e8:	11 05       	cpc	r17, r1
    27ea:	29 f0       	breq	.+10     	; 0x27f6 <__mulsf3+0x1ce>
    27ec:	40 5c       	subi	r20, 0xC0	; 192
    27ee:	5f 4f       	sbci	r21, 0xFF	; 255
    27f0:	6f 4f       	sbci	r22, 0xFF	; 255
    27f2:	7f 4f       	sbci	r23, 0xFF	; 255
    27f4:	40 78       	andi	r20, 0x80	; 128
    27f6:	1a 8e       	std	Y+26, r1	; 0x1a
    27f8:	fe 17       	cp	r31, r30
    27fa:	11 f0       	breq	.+4      	; 0x2800 <__mulsf3+0x1d8>
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	8a 8f       	std	Y+26, r24	; 0x1a
    2800:	4d 8f       	std	Y+29, r20	; 0x1d
    2802:	5e 8f       	std	Y+30, r21	; 0x1e
    2804:	6f 8f       	std	Y+31, r22	; 0x1f
    2806:	78 a3       	std	Y+32, r23	; 0x20
    2808:	83 e0       	ldi	r24, 0x03	; 3
    280a:	89 8f       	std	Y+25, r24	; 0x19
    280c:	ce 01       	movw	r24, r28
    280e:	49 96       	adiw	r24, 0x19	; 25
    2810:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__pack_f>
    2814:	a0 96       	adiw	r28, 0x20	; 32
    2816:	e2 e1       	ldi	r30, 0x12	; 18
    2818:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__epilogue_restores__>

0000281c <__divsf3>:
    281c:	a8 e1       	ldi	r26, 0x18	; 24
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e4 e1       	ldi	r30, 0x14	; 20
    2822:	f4 e1       	ldi	r31, 0x14	; 20
    2824:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__prologue_saves__+0x10>
    2828:	69 83       	std	Y+1, r22	; 0x01
    282a:	7a 83       	std	Y+2, r23	; 0x02
    282c:	8b 83       	std	Y+3, r24	; 0x03
    282e:	9c 83       	std	Y+4, r25	; 0x04
    2830:	2d 83       	std	Y+5, r18	; 0x05
    2832:	3e 83       	std	Y+6, r19	; 0x06
    2834:	4f 83       	std	Y+7, r20	; 0x07
    2836:	58 87       	std	Y+8, r21	; 0x08
    2838:	b9 e0       	ldi	r27, 0x09	; 9
    283a:	eb 2e       	mov	r14, r27
    283c:	f1 2c       	mov	r15, r1
    283e:	ec 0e       	add	r14, r28
    2840:	fd 1e       	adc	r15, r29
    2842:	ce 01       	movw	r24, r28
    2844:	01 96       	adiw	r24, 0x01	; 1
    2846:	b7 01       	movw	r22, r14
    2848:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__unpack_f>
    284c:	8e 01       	movw	r16, r28
    284e:	0f 5e       	subi	r16, 0xEF	; 239
    2850:	1f 4f       	sbci	r17, 0xFF	; 255
    2852:	ce 01       	movw	r24, r28
    2854:	05 96       	adiw	r24, 0x05	; 5
    2856:	b8 01       	movw	r22, r16
    2858:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__unpack_f>
    285c:	29 85       	ldd	r18, Y+9	; 0x09
    285e:	22 30       	cpi	r18, 0x02	; 2
    2860:	08 f4       	brcc	.+2      	; 0x2864 <__divsf3+0x48>
    2862:	7e c0       	rjmp	.+252    	; 0x2960 <__divsf3+0x144>
    2864:	39 89       	ldd	r19, Y+17	; 0x11
    2866:	32 30       	cpi	r19, 0x02	; 2
    2868:	10 f4       	brcc	.+4      	; 0x286e <__divsf3+0x52>
    286a:	b8 01       	movw	r22, r16
    286c:	7c c0       	rjmp	.+248    	; 0x2966 <__divsf3+0x14a>
    286e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2870:	9a 89       	ldd	r25, Y+18	; 0x12
    2872:	89 27       	eor	r24, r25
    2874:	8a 87       	std	Y+10, r24	; 0x0a
    2876:	24 30       	cpi	r18, 0x04	; 4
    2878:	11 f0       	breq	.+4      	; 0x287e <__divsf3+0x62>
    287a:	22 30       	cpi	r18, 0x02	; 2
    287c:	31 f4       	brne	.+12     	; 0x288a <__divsf3+0x6e>
    287e:	23 17       	cp	r18, r19
    2880:	09 f0       	breq	.+2      	; 0x2884 <__divsf3+0x68>
    2882:	6e c0       	rjmp	.+220    	; 0x2960 <__divsf3+0x144>
    2884:	64 e0       	ldi	r22, 0x04	; 4
    2886:	71 e0       	ldi	r23, 0x01	; 1
    2888:	6e c0       	rjmp	.+220    	; 0x2966 <__divsf3+0x14a>
    288a:	34 30       	cpi	r19, 0x04	; 4
    288c:	39 f4       	brne	.+14     	; 0x289c <__divsf3+0x80>
    288e:	1d 86       	std	Y+13, r1	; 0x0d
    2890:	1e 86       	std	Y+14, r1	; 0x0e
    2892:	1f 86       	std	Y+15, r1	; 0x0f
    2894:	18 8a       	std	Y+16, r1	; 0x10
    2896:	1c 86       	std	Y+12, r1	; 0x0c
    2898:	1b 86       	std	Y+11, r1	; 0x0b
    289a:	04 c0       	rjmp	.+8      	; 0x28a4 <__divsf3+0x88>
    289c:	32 30       	cpi	r19, 0x02	; 2
    289e:	21 f4       	brne	.+8      	; 0x28a8 <__divsf3+0x8c>
    28a0:	84 e0       	ldi	r24, 0x04	; 4
    28a2:	89 87       	std	Y+9, r24	; 0x09
    28a4:	b7 01       	movw	r22, r14
    28a6:	5f c0       	rjmp	.+190    	; 0x2966 <__divsf3+0x14a>
    28a8:	2b 85       	ldd	r18, Y+11	; 0x0b
    28aa:	3c 85       	ldd	r19, Y+12	; 0x0c
    28ac:	8b 89       	ldd	r24, Y+19	; 0x13
    28ae:	9c 89       	ldd	r25, Y+20	; 0x14
    28b0:	28 1b       	sub	r18, r24
    28b2:	39 0b       	sbc	r19, r25
    28b4:	3c 87       	std	Y+12, r19	; 0x0c
    28b6:	2b 87       	std	Y+11, r18	; 0x0b
    28b8:	ed 84       	ldd	r14, Y+13	; 0x0d
    28ba:	fe 84       	ldd	r15, Y+14	; 0x0e
    28bc:	0f 85       	ldd	r16, Y+15	; 0x0f
    28be:	18 89       	ldd	r17, Y+16	; 0x10
    28c0:	ad 88       	ldd	r10, Y+21	; 0x15
    28c2:	be 88       	ldd	r11, Y+22	; 0x16
    28c4:	cf 88       	ldd	r12, Y+23	; 0x17
    28c6:	d8 8c       	ldd	r13, Y+24	; 0x18
    28c8:	ea 14       	cp	r14, r10
    28ca:	fb 04       	cpc	r15, r11
    28cc:	0c 05       	cpc	r16, r12
    28ce:	1d 05       	cpc	r17, r13
    28d0:	40 f4       	brcc	.+16     	; 0x28e2 <__divsf3+0xc6>
    28d2:	ee 0c       	add	r14, r14
    28d4:	ff 1c       	adc	r15, r15
    28d6:	00 1f       	adc	r16, r16
    28d8:	11 1f       	adc	r17, r17
    28da:	21 50       	subi	r18, 0x01	; 1
    28dc:	30 40       	sbci	r19, 0x00	; 0
    28de:	3c 87       	std	Y+12, r19	; 0x0c
    28e0:	2b 87       	std	Y+11, r18	; 0x0b
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e0       	ldi	r20, 0x00	; 0
    28e8:	50 e0       	ldi	r21, 0x00	; 0
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	a0 e0       	ldi	r26, 0x00	; 0
    28f0:	b0 e4       	ldi	r27, 0x40	; 64
    28f2:	60 e0       	ldi	r22, 0x00	; 0
    28f4:	70 e0       	ldi	r23, 0x00	; 0
    28f6:	ea 14       	cp	r14, r10
    28f8:	fb 04       	cpc	r15, r11
    28fa:	0c 05       	cpc	r16, r12
    28fc:	1d 05       	cpc	r17, r13
    28fe:	40 f0       	brcs	.+16     	; 0x2910 <__divsf3+0xf4>
    2900:	28 2b       	or	r18, r24
    2902:	39 2b       	or	r19, r25
    2904:	4a 2b       	or	r20, r26
    2906:	5b 2b       	or	r21, r27
    2908:	ea 18       	sub	r14, r10
    290a:	fb 08       	sbc	r15, r11
    290c:	0c 09       	sbc	r16, r12
    290e:	1d 09       	sbc	r17, r13
    2910:	b6 95       	lsr	r27
    2912:	a7 95       	ror	r26
    2914:	97 95       	ror	r25
    2916:	87 95       	ror	r24
    2918:	ee 0c       	add	r14, r14
    291a:	ff 1c       	adc	r15, r15
    291c:	00 1f       	adc	r16, r16
    291e:	11 1f       	adc	r17, r17
    2920:	6f 5f       	subi	r22, 0xFF	; 255
    2922:	7f 4f       	sbci	r23, 0xFF	; 255
    2924:	6f 31       	cpi	r22, 0x1F	; 31
    2926:	71 05       	cpc	r23, r1
    2928:	31 f7       	brne	.-52     	; 0x28f6 <__divsf3+0xda>
    292a:	da 01       	movw	r26, r20
    292c:	c9 01       	movw	r24, r18
    292e:	8f 77       	andi	r24, 0x7F	; 127
    2930:	90 70       	andi	r25, 0x00	; 0
    2932:	a0 70       	andi	r26, 0x00	; 0
    2934:	b0 70       	andi	r27, 0x00	; 0
    2936:	80 34       	cpi	r24, 0x40	; 64
    2938:	91 05       	cpc	r25, r1
    293a:	a1 05       	cpc	r26, r1
    293c:	b1 05       	cpc	r27, r1
    293e:	61 f4       	brne	.+24     	; 0x2958 <__divsf3+0x13c>
    2940:	27 fd       	sbrc	r18, 7
    2942:	0a c0       	rjmp	.+20     	; 0x2958 <__divsf3+0x13c>
    2944:	e1 14       	cp	r14, r1
    2946:	f1 04       	cpc	r15, r1
    2948:	01 05       	cpc	r16, r1
    294a:	11 05       	cpc	r17, r1
    294c:	29 f0       	breq	.+10     	; 0x2958 <__divsf3+0x13c>
    294e:	20 5c       	subi	r18, 0xC0	; 192
    2950:	3f 4f       	sbci	r19, 0xFF	; 255
    2952:	4f 4f       	sbci	r20, 0xFF	; 255
    2954:	5f 4f       	sbci	r21, 0xFF	; 255
    2956:	20 78       	andi	r18, 0x80	; 128
    2958:	2d 87       	std	Y+13, r18	; 0x0d
    295a:	3e 87       	std	Y+14, r19	; 0x0e
    295c:	4f 87       	std	Y+15, r20	; 0x0f
    295e:	58 8b       	std	Y+16, r21	; 0x10
    2960:	be 01       	movw	r22, r28
    2962:	67 5f       	subi	r22, 0xF7	; 247
    2964:	7f 4f       	sbci	r23, 0xFF	; 255
    2966:	cb 01       	movw	r24, r22
    2968:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__pack_f>
    296c:	68 96       	adiw	r28, 0x18	; 24
    296e:	ea e0       	ldi	r30, 0x0A	; 10
    2970:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__epilogue_restores__+0x10>

00002974 <__eqsf2>:
    2974:	a8 e1       	ldi	r26, 0x18	; 24
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e0 ec       	ldi	r30, 0xC0	; 192
    297a:	f4 e1       	ldi	r31, 0x14	; 20
    297c:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <__prologue_saves__+0x18>
    2980:	69 83       	std	Y+1, r22	; 0x01
    2982:	7a 83       	std	Y+2, r23	; 0x02
    2984:	8b 83       	std	Y+3, r24	; 0x03
    2986:	9c 83       	std	Y+4, r25	; 0x04
    2988:	2d 83       	std	Y+5, r18	; 0x05
    298a:	3e 83       	std	Y+6, r19	; 0x06
    298c:	4f 83       	std	Y+7, r20	; 0x07
    298e:	58 87       	std	Y+8, r21	; 0x08
    2990:	89 e0       	ldi	r24, 0x09	; 9
    2992:	e8 2e       	mov	r14, r24
    2994:	f1 2c       	mov	r15, r1
    2996:	ec 0e       	add	r14, r28
    2998:	fd 1e       	adc	r15, r29
    299a:	ce 01       	movw	r24, r28
    299c:	01 96       	adiw	r24, 0x01	; 1
    299e:	b7 01       	movw	r22, r14
    29a0:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__unpack_f>
    29a4:	8e 01       	movw	r16, r28
    29a6:	0f 5e       	subi	r16, 0xEF	; 239
    29a8:	1f 4f       	sbci	r17, 0xFF	; 255
    29aa:	ce 01       	movw	r24, r28
    29ac:	05 96       	adiw	r24, 0x05	; 5
    29ae:	b8 01       	movw	r22, r16
    29b0:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__unpack_f>
    29b4:	89 85       	ldd	r24, Y+9	; 0x09
    29b6:	82 30       	cpi	r24, 0x02	; 2
    29b8:	40 f0       	brcs	.+16     	; 0x29ca <__eqsf2+0x56>
    29ba:	89 89       	ldd	r24, Y+17	; 0x11
    29bc:	82 30       	cpi	r24, 0x02	; 2
    29be:	28 f0       	brcs	.+10     	; 0x29ca <__eqsf2+0x56>
    29c0:	c7 01       	movw	r24, r14
    29c2:	b8 01       	movw	r22, r16
    29c4:	0e 94 38 17 	call	0x2e70	; 0x2e70 <__fpcmp_parts_f>
    29c8:	01 c0       	rjmp	.+2      	; 0x29cc <__eqsf2+0x58>
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	68 96       	adiw	r28, 0x18	; 24
    29ce:	e6 e0       	ldi	r30, 0x06	; 6
    29d0:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__epilogue_restores__+0x18>

000029d4 <__floatsisf>:
    29d4:	a8 e0       	ldi	r26, 0x08	; 8
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	e0 ef       	ldi	r30, 0xF0	; 240
    29da:	f4 e1       	ldi	r31, 0x14	; 20
    29dc:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__prologue_saves__+0x12>
    29e0:	9b 01       	movw	r18, r22
    29e2:	ac 01       	movw	r20, r24
    29e4:	83 e0       	ldi	r24, 0x03	; 3
    29e6:	89 83       	std	Y+1, r24	; 0x01
    29e8:	da 01       	movw	r26, r20
    29ea:	c9 01       	movw	r24, r18
    29ec:	88 27       	eor	r24, r24
    29ee:	b7 fd       	sbrc	r27, 7
    29f0:	83 95       	inc	r24
    29f2:	99 27       	eor	r25, r25
    29f4:	aa 27       	eor	r26, r26
    29f6:	bb 27       	eor	r27, r27
    29f8:	b8 2e       	mov	r11, r24
    29fa:	21 15       	cp	r18, r1
    29fc:	31 05       	cpc	r19, r1
    29fe:	41 05       	cpc	r20, r1
    2a00:	51 05       	cpc	r21, r1
    2a02:	19 f4       	brne	.+6      	; 0x2a0a <__floatsisf+0x36>
    2a04:	82 e0       	ldi	r24, 0x02	; 2
    2a06:	89 83       	std	Y+1, r24	; 0x01
    2a08:	3a c0       	rjmp	.+116    	; 0x2a7e <__floatsisf+0xaa>
    2a0a:	88 23       	and	r24, r24
    2a0c:	a9 f0       	breq	.+42     	; 0x2a38 <__floatsisf+0x64>
    2a0e:	20 30       	cpi	r18, 0x00	; 0
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	38 07       	cpc	r19, r24
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	48 07       	cpc	r20, r24
    2a18:	80 e8       	ldi	r24, 0x80	; 128
    2a1a:	58 07       	cpc	r21, r24
    2a1c:	29 f4       	brne	.+10     	; 0x2a28 <__floatsisf+0x54>
    2a1e:	60 e0       	ldi	r22, 0x00	; 0
    2a20:	70 e0       	ldi	r23, 0x00	; 0
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	9f ec       	ldi	r25, 0xCF	; 207
    2a26:	30 c0       	rjmp	.+96     	; 0x2a88 <__floatsisf+0xb4>
    2a28:	ee 24       	eor	r14, r14
    2a2a:	ff 24       	eor	r15, r15
    2a2c:	87 01       	movw	r16, r14
    2a2e:	e2 1a       	sub	r14, r18
    2a30:	f3 0a       	sbc	r15, r19
    2a32:	04 0b       	sbc	r16, r20
    2a34:	15 0b       	sbc	r17, r21
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <__floatsisf+0x68>
    2a38:	79 01       	movw	r14, r18
    2a3a:	8a 01       	movw	r16, r20
    2a3c:	8e e1       	ldi	r24, 0x1E	; 30
    2a3e:	c8 2e       	mov	r12, r24
    2a40:	d1 2c       	mov	r13, r1
    2a42:	dc 82       	std	Y+4, r13	; 0x04
    2a44:	cb 82       	std	Y+3, r12	; 0x03
    2a46:	ed 82       	std	Y+5, r14	; 0x05
    2a48:	fe 82       	std	Y+6, r15	; 0x06
    2a4a:	0f 83       	std	Y+7, r16	; 0x07
    2a4c:	18 87       	std	Y+8, r17	; 0x08
    2a4e:	c8 01       	movw	r24, r16
    2a50:	b7 01       	movw	r22, r14
    2a52:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <__clzsi2>
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	18 16       	cp	r1, r24
    2a5a:	19 06       	cpc	r1, r25
    2a5c:	84 f4       	brge	.+32     	; 0x2a7e <__floatsisf+0xaa>
    2a5e:	08 2e       	mov	r0, r24
    2a60:	04 c0       	rjmp	.+8      	; 0x2a6a <__floatsisf+0x96>
    2a62:	ee 0c       	add	r14, r14
    2a64:	ff 1c       	adc	r15, r15
    2a66:	00 1f       	adc	r16, r16
    2a68:	11 1f       	adc	r17, r17
    2a6a:	0a 94       	dec	r0
    2a6c:	d2 f7       	brpl	.-12     	; 0x2a62 <__floatsisf+0x8e>
    2a6e:	ed 82       	std	Y+5, r14	; 0x05
    2a70:	fe 82       	std	Y+6, r15	; 0x06
    2a72:	0f 83       	std	Y+7, r16	; 0x07
    2a74:	18 87       	std	Y+8, r17	; 0x08
    2a76:	c8 1a       	sub	r12, r24
    2a78:	d9 0a       	sbc	r13, r25
    2a7a:	dc 82       	std	Y+4, r13	; 0x04
    2a7c:	cb 82       	std	Y+3, r12	; 0x03
    2a7e:	ba 82       	std	Y+2, r11	; 0x02
    2a80:	ce 01       	movw	r24, r28
    2a82:	01 96       	adiw	r24, 0x01	; 1
    2a84:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__pack_f>
    2a88:	28 96       	adiw	r28, 0x08	; 8
    2a8a:	e9 e0       	ldi	r30, 0x09	; 9
    2a8c:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__epilogue_restores__+0x12>

00002a90 <__fixsfsi>:
    2a90:	ac e0       	ldi	r26, 0x0C	; 12
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	ee e4       	ldi	r30, 0x4E	; 78
    2a96:	f5 e1       	ldi	r31, 0x15	; 21
    2a98:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__prologue_saves__+0x20>
    2a9c:	69 83       	std	Y+1, r22	; 0x01
    2a9e:	7a 83       	std	Y+2, r23	; 0x02
    2aa0:	8b 83       	std	Y+3, r24	; 0x03
    2aa2:	9c 83       	std	Y+4, r25	; 0x04
    2aa4:	ce 01       	movw	r24, r28
    2aa6:	01 96       	adiw	r24, 0x01	; 1
    2aa8:	be 01       	movw	r22, r28
    2aaa:	6b 5f       	subi	r22, 0xFB	; 251
    2aac:	7f 4f       	sbci	r23, 0xFF	; 255
    2aae:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__unpack_f>
    2ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab4:	82 30       	cpi	r24, 0x02	; 2
    2ab6:	61 f1       	breq	.+88     	; 0x2b10 <__fixsfsi+0x80>
    2ab8:	82 30       	cpi	r24, 0x02	; 2
    2aba:	50 f1       	brcs	.+84     	; 0x2b10 <__fixsfsi+0x80>
    2abc:	84 30       	cpi	r24, 0x04	; 4
    2abe:	21 f4       	brne	.+8      	; 0x2ac8 <__fixsfsi+0x38>
    2ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac2:	88 23       	and	r24, r24
    2ac4:	51 f1       	breq	.+84     	; 0x2b1a <__fixsfsi+0x8a>
    2ac6:	2e c0       	rjmp	.+92     	; 0x2b24 <__fixsfsi+0x94>
    2ac8:	2f 81       	ldd	r18, Y+7	; 0x07
    2aca:	38 85       	ldd	r19, Y+8	; 0x08
    2acc:	37 fd       	sbrc	r19, 7
    2ace:	20 c0       	rjmp	.+64     	; 0x2b10 <__fixsfsi+0x80>
    2ad0:	6e 81       	ldd	r22, Y+6	; 0x06
    2ad2:	2f 31       	cpi	r18, 0x1F	; 31
    2ad4:	31 05       	cpc	r19, r1
    2ad6:	1c f0       	brlt	.+6      	; 0x2ade <__fixsfsi+0x4e>
    2ad8:	66 23       	and	r22, r22
    2ada:	f9 f0       	breq	.+62     	; 0x2b1a <__fixsfsi+0x8a>
    2adc:	23 c0       	rjmp	.+70     	; 0x2b24 <__fixsfsi+0x94>
    2ade:	8e e1       	ldi	r24, 0x1E	; 30
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	82 1b       	sub	r24, r18
    2ae4:	93 0b       	sbc	r25, r19
    2ae6:	29 85       	ldd	r18, Y+9	; 0x09
    2ae8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2aea:	4b 85       	ldd	r20, Y+11	; 0x0b
    2aec:	5c 85       	ldd	r21, Y+12	; 0x0c
    2aee:	04 c0       	rjmp	.+8      	; 0x2af8 <__fixsfsi+0x68>
    2af0:	56 95       	lsr	r21
    2af2:	47 95       	ror	r20
    2af4:	37 95       	ror	r19
    2af6:	27 95       	ror	r18
    2af8:	8a 95       	dec	r24
    2afa:	d2 f7       	brpl	.-12     	; 0x2af0 <__fixsfsi+0x60>
    2afc:	66 23       	and	r22, r22
    2afe:	b1 f0       	breq	.+44     	; 0x2b2c <__fixsfsi+0x9c>
    2b00:	50 95       	com	r21
    2b02:	40 95       	com	r20
    2b04:	30 95       	com	r19
    2b06:	21 95       	neg	r18
    2b08:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0a:	4f 4f       	sbci	r20, 0xFF	; 255
    2b0c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b0e:	0e c0       	rjmp	.+28     	; 0x2b2c <__fixsfsi+0x9c>
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e0       	ldi	r20, 0x00	; 0
    2b16:	50 e0       	ldi	r21, 0x00	; 0
    2b18:	09 c0       	rjmp	.+18     	; 0x2b2c <__fixsfsi+0x9c>
    2b1a:	2f ef       	ldi	r18, 0xFF	; 255
    2b1c:	3f ef       	ldi	r19, 0xFF	; 255
    2b1e:	4f ef       	ldi	r20, 0xFF	; 255
    2b20:	5f e7       	ldi	r21, 0x7F	; 127
    2b22:	04 c0       	rjmp	.+8      	; 0x2b2c <__fixsfsi+0x9c>
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e0       	ldi	r20, 0x00	; 0
    2b2a:	50 e8       	ldi	r21, 0x80	; 128
    2b2c:	b9 01       	movw	r22, r18
    2b2e:	ca 01       	movw	r24, r20
    2b30:	2c 96       	adiw	r28, 0x0c	; 12
    2b32:	e2 e0       	ldi	r30, 0x02	; 2
    2b34:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__epilogue_restores__+0x20>

00002b38 <__clzsi2>:
    2b38:	ef 92       	push	r14
    2b3a:	ff 92       	push	r15
    2b3c:	0f 93       	push	r16
    2b3e:	1f 93       	push	r17
    2b40:	7b 01       	movw	r14, r22
    2b42:	8c 01       	movw	r16, r24
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	e8 16       	cp	r14, r24
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	f8 06       	cpc	r15, r24
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	08 07       	cpc	r16, r24
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	18 07       	cpc	r17, r24
    2b54:	88 f4       	brcc	.+34     	; 0x2b78 <__clzsi2+0x40>
    2b56:	8f ef       	ldi	r24, 0xFF	; 255
    2b58:	e8 16       	cp	r14, r24
    2b5a:	f1 04       	cpc	r15, r1
    2b5c:	01 05       	cpc	r16, r1
    2b5e:	11 05       	cpc	r17, r1
    2b60:	31 f0       	breq	.+12     	; 0x2b6e <__clzsi2+0x36>
    2b62:	28 f0       	brcs	.+10     	; 0x2b6e <__clzsi2+0x36>
    2b64:	88 e0       	ldi	r24, 0x08	; 8
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	a0 e0       	ldi	r26, 0x00	; 0
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	17 c0       	rjmp	.+46     	; 0x2b9c <__clzsi2+0x64>
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	a0 e0       	ldi	r26, 0x00	; 0
    2b74:	b0 e0       	ldi	r27, 0x00	; 0
    2b76:	12 c0       	rjmp	.+36     	; 0x2b9c <__clzsi2+0x64>
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	e8 16       	cp	r14, r24
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	f8 06       	cpc	r15, r24
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	08 07       	cpc	r16, r24
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	18 07       	cpc	r17, r24
    2b88:	28 f0       	brcs	.+10     	; 0x2b94 <__clzsi2+0x5c>
    2b8a:	88 e1       	ldi	r24, 0x18	; 24
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	a0 e0       	ldi	r26, 0x00	; 0
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	04 c0       	rjmp	.+8      	; 0x2b9c <__clzsi2+0x64>
    2b94:	80 e1       	ldi	r24, 0x10	; 16
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	a0 e0       	ldi	r26, 0x00	; 0
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	20 e2       	ldi	r18, 0x20	; 32
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e0       	ldi	r20, 0x00	; 0
    2ba2:	50 e0       	ldi	r21, 0x00	; 0
    2ba4:	28 1b       	sub	r18, r24
    2ba6:	39 0b       	sbc	r19, r25
    2ba8:	4a 0b       	sbc	r20, r26
    2baa:	5b 0b       	sbc	r21, r27
    2bac:	04 c0       	rjmp	.+8      	; 0x2bb6 <__clzsi2+0x7e>
    2bae:	16 95       	lsr	r17
    2bb0:	07 95       	ror	r16
    2bb2:	f7 94       	ror	r15
    2bb4:	e7 94       	ror	r14
    2bb6:	8a 95       	dec	r24
    2bb8:	d2 f7       	brpl	.-12     	; 0x2bae <__clzsi2+0x76>
    2bba:	f7 01       	movw	r30, r14
    2bbc:	e4 5f       	subi	r30, 0xF4	; 244
    2bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc0:	80 81       	ld	r24, Z
    2bc2:	28 1b       	sub	r18, r24
    2bc4:	31 09       	sbc	r19, r1
    2bc6:	41 09       	sbc	r20, r1
    2bc8:	51 09       	sbc	r21, r1
    2bca:	c9 01       	movw	r24, r18
    2bcc:	1f 91       	pop	r17
    2bce:	0f 91       	pop	r16
    2bd0:	ff 90       	pop	r15
    2bd2:	ef 90       	pop	r14
    2bd4:	08 95       	ret

00002bd6 <__pack_f>:
    2bd6:	df 92       	push	r13
    2bd8:	ef 92       	push	r14
    2bda:	ff 92       	push	r15
    2bdc:	0f 93       	push	r16
    2bde:	1f 93       	push	r17
    2be0:	fc 01       	movw	r30, r24
    2be2:	e4 80       	ldd	r14, Z+4	; 0x04
    2be4:	f5 80       	ldd	r15, Z+5	; 0x05
    2be6:	06 81       	ldd	r16, Z+6	; 0x06
    2be8:	17 81       	ldd	r17, Z+7	; 0x07
    2bea:	d1 80       	ldd	r13, Z+1	; 0x01
    2bec:	80 81       	ld	r24, Z
    2bee:	82 30       	cpi	r24, 0x02	; 2
    2bf0:	48 f4       	brcc	.+18     	; 0x2c04 <__pack_f+0x2e>
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	a0 e1       	ldi	r26, 0x10	; 16
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	e8 2a       	or	r14, r24
    2bfc:	f9 2a       	or	r15, r25
    2bfe:	0a 2b       	or	r16, r26
    2c00:	1b 2b       	or	r17, r27
    2c02:	a5 c0       	rjmp	.+330    	; 0x2d4e <__pack_f+0x178>
    2c04:	84 30       	cpi	r24, 0x04	; 4
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <__pack_f+0x34>
    2c08:	9f c0       	rjmp	.+318    	; 0x2d48 <__pack_f+0x172>
    2c0a:	82 30       	cpi	r24, 0x02	; 2
    2c0c:	21 f4       	brne	.+8      	; 0x2c16 <__pack_f+0x40>
    2c0e:	ee 24       	eor	r14, r14
    2c10:	ff 24       	eor	r15, r15
    2c12:	87 01       	movw	r16, r14
    2c14:	05 c0       	rjmp	.+10     	; 0x2c20 <__pack_f+0x4a>
    2c16:	e1 14       	cp	r14, r1
    2c18:	f1 04       	cpc	r15, r1
    2c1a:	01 05       	cpc	r16, r1
    2c1c:	11 05       	cpc	r17, r1
    2c1e:	19 f4       	brne	.+6      	; 0x2c26 <__pack_f+0x50>
    2c20:	e0 e0       	ldi	r30, 0x00	; 0
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	96 c0       	rjmp	.+300    	; 0x2d52 <__pack_f+0x17c>
    2c26:	62 81       	ldd	r22, Z+2	; 0x02
    2c28:	73 81       	ldd	r23, Z+3	; 0x03
    2c2a:	9f ef       	ldi	r25, 0xFF	; 255
    2c2c:	62 38       	cpi	r22, 0x82	; 130
    2c2e:	79 07       	cpc	r23, r25
    2c30:	0c f0       	brlt	.+2      	; 0x2c34 <__pack_f+0x5e>
    2c32:	5b c0       	rjmp	.+182    	; 0x2cea <__pack_f+0x114>
    2c34:	22 e8       	ldi	r18, 0x82	; 130
    2c36:	3f ef       	ldi	r19, 0xFF	; 255
    2c38:	26 1b       	sub	r18, r22
    2c3a:	37 0b       	sbc	r19, r23
    2c3c:	2a 31       	cpi	r18, 0x1A	; 26
    2c3e:	31 05       	cpc	r19, r1
    2c40:	2c f0       	brlt	.+10     	; 0x2c4c <__pack_f+0x76>
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	50 e0       	ldi	r21, 0x00	; 0
    2c4a:	2a c0       	rjmp	.+84     	; 0x2ca0 <__pack_f+0xca>
    2c4c:	b8 01       	movw	r22, r16
    2c4e:	a7 01       	movw	r20, r14
    2c50:	02 2e       	mov	r0, r18
    2c52:	04 c0       	rjmp	.+8      	; 0x2c5c <__pack_f+0x86>
    2c54:	76 95       	lsr	r23
    2c56:	67 95       	ror	r22
    2c58:	57 95       	ror	r21
    2c5a:	47 95       	ror	r20
    2c5c:	0a 94       	dec	r0
    2c5e:	d2 f7       	brpl	.-12     	; 0x2c54 <__pack_f+0x7e>
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	a0 e0       	ldi	r26, 0x00	; 0
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	04 c0       	rjmp	.+8      	; 0x2c72 <__pack_f+0x9c>
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	aa 1f       	adc	r26, r26
    2c70:	bb 1f       	adc	r27, r27
    2c72:	2a 95       	dec	r18
    2c74:	d2 f7       	brpl	.-12     	; 0x2c6a <__pack_f+0x94>
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	a1 09       	sbc	r26, r1
    2c7a:	b1 09       	sbc	r27, r1
    2c7c:	8e 21       	and	r24, r14
    2c7e:	9f 21       	and	r25, r15
    2c80:	a0 23       	and	r26, r16
    2c82:	b1 23       	and	r27, r17
    2c84:	00 97       	sbiw	r24, 0x00	; 0
    2c86:	a1 05       	cpc	r26, r1
    2c88:	b1 05       	cpc	r27, r1
    2c8a:	21 f0       	breq	.+8      	; 0x2c94 <__pack_f+0xbe>
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	a0 e0       	ldi	r26, 0x00	; 0
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	9a 01       	movw	r18, r20
    2c96:	ab 01       	movw	r20, r22
    2c98:	28 2b       	or	r18, r24
    2c9a:	39 2b       	or	r19, r25
    2c9c:	4a 2b       	or	r20, r26
    2c9e:	5b 2b       	or	r21, r27
    2ca0:	da 01       	movw	r26, r20
    2ca2:	c9 01       	movw	r24, r18
    2ca4:	8f 77       	andi	r24, 0x7F	; 127
    2ca6:	90 70       	andi	r25, 0x00	; 0
    2ca8:	a0 70       	andi	r26, 0x00	; 0
    2caa:	b0 70       	andi	r27, 0x00	; 0
    2cac:	80 34       	cpi	r24, 0x40	; 64
    2cae:	91 05       	cpc	r25, r1
    2cb0:	a1 05       	cpc	r26, r1
    2cb2:	b1 05       	cpc	r27, r1
    2cb4:	39 f4       	brne	.+14     	; 0x2cc4 <__pack_f+0xee>
    2cb6:	27 ff       	sbrs	r18, 7
    2cb8:	09 c0       	rjmp	.+18     	; 0x2ccc <__pack_f+0xf6>
    2cba:	20 5c       	subi	r18, 0xC0	; 192
    2cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbe:	4f 4f       	sbci	r20, 0xFF	; 255
    2cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc2:	04 c0       	rjmp	.+8      	; 0x2ccc <__pack_f+0xf6>
    2cc4:	21 5c       	subi	r18, 0xC1	; 193
    2cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc8:	4f 4f       	sbci	r20, 0xFF	; 255
    2cca:	5f 4f       	sbci	r21, 0xFF	; 255
    2ccc:	e0 e0       	ldi	r30, 0x00	; 0
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	20 30       	cpi	r18, 0x00	; 0
    2cd2:	a0 e0       	ldi	r26, 0x00	; 0
    2cd4:	3a 07       	cpc	r19, r26
    2cd6:	a0 e0       	ldi	r26, 0x00	; 0
    2cd8:	4a 07       	cpc	r20, r26
    2cda:	a0 e4       	ldi	r26, 0x40	; 64
    2cdc:	5a 07       	cpc	r21, r26
    2cde:	10 f0       	brcs	.+4      	; 0x2ce4 <__pack_f+0x10e>
    2ce0:	e1 e0       	ldi	r30, 0x01	; 1
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	79 01       	movw	r14, r18
    2ce6:	8a 01       	movw	r16, r20
    2ce8:	27 c0       	rjmp	.+78     	; 0x2d38 <__pack_f+0x162>
    2cea:	60 38       	cpi	r22, 0x80	; 128
    2cec:	71 05       	cpc	r23, r1
    2cee:	64 f5       	brge	.+88     	; 0x2d48 <__pack_f+0x172>
    2cf0:	fb 01       	movw	r30, r22
    2cf2:	e1 58       	subi	r30, 0x81	; 129
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	d8 01       	movw	r26, r16
    2cf8:	c7 01       	movw	r24, r14
    2cfa:	8f 77       	andi	r24, 0x7F	; 127
    2cfc:	90 70       	andi	r25, 0x00	; 0
    2cfe:	a0 70       	andi	r26, 0x00	; 0
    2d00:	b0 70       	andi	r27, 0x00	; 0
    2d02:	80 34       	cpi	r24, 0x40	; 64
    2d04:	91 05       	cpc	r25, r1
    2d06:	a1 05       	cpc	r26, r1
    2d08:	b1 05       	cpc	r27, r1
    2d0a:	39 f4       	brne	.+14     	; 0x2d1a <__pack_f+0x144>
    2d0c:	e7 fe       	sbrs	r14, 7
    2d0e:	0d c0       	rjmp	.+26     	; 0x2d2a <__pack_f+0x154>
    2d10:	80 e4       	ldi	r24, 0x40	; 64
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	a0 e0       	ldi	r26, 0x00	; 0
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	04 c0       	rjmp	.+8      	; 0x2d22 <__pack_f+0x14c>
    2d1a:	8f e3       	ldi	r24, 0x3F	; 63
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	a0 e0       	ldi	r26, 0x00	; 0
    2d20:	b0 e0       	ldi	r27, 0x00	; 0
    2d22:	e8 0e       	add	r14, r24
    2d24:	f9 1e       	adc	r15, r25
    2d26:	0a 1f       	adc	r16, r26
    2d28:	1b 1f       	adc	r17, r27
    2d2a:	17 ff       	sbrs	r17, 7
    2d2c:	05 c0       	rjmp	.+10     	; 0x2d38 <__pack_f+0x162>
    2d2e:	16 95       	lsr	r17
    2d30:	07 95       	ror	r16
    2d32:	f7 94       	ror	r15
    2d34:	e7 94       	ror	r14
    2d36:	31 96       	adiw	r30, 0x01	; 1
    2d38:	87 e0       	ldi	r24, 0x07	; 7
    2d3a:	16 95       	lsr	r17
    2d3c:	07 95       	ror	r16
    2d3e:	f7 94       	ror	r15
    2d40:	e7 94       	ror	r14
    2d42:	8a 95       	dec	r24
    2d44:	d1 f7       	brne	.-12     	; 0x2d3a <__pack_f+0x164>
    2d46:	05 c0       	rjmp	.+10     	; 0x2d52 <__pack_f+0x17c>
    2d48:	ee 24       	eor	r14, r14
    2d4a:	ff 24       	eor	r15, r15
    2d4c:	87 01       	movw	r16, r14
    2d4e:	ef ef       	ldi	r30, 0xFF	; 255
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	6e 2f       	mov	r22, r30
    2d54:	67 95       	ror	r22
    2d56:	66 27       	eor	r22, r22
    2d58:	67 95       	ror	r22
    2d5a:	90 2f       	mov	r25, r16
    2d5c:	9f 77       	andi	r25, 0x7F	; 127
    2d5e:	d7 94       	ror	r13
    2d60:	dd 24       	eor	r13, r13
    2d62:	d7 94       	ror	r13
    2d64:	8e 2f       	mov	r24, r30
    2d66:	86 95       	lsr	r24
    2d68:	49 2f       	mov	r20, r25
    2d6a:	46 2b       	or	r20, r22
    2d6c:	58 2f       	mov	r21, r24
    2d6e:	5d 29       	or	r21, r13
    2d70:	b7 01       	movw	r22, r14
    2d72:	ca 01       	movw	r24, r20
    2d74:	1f 91       	pop	r17
    2d76:	0f 91       	pop	r16
    2d78:	ff 90       	pop	r15
    2d7a:	ef 90       	pop	r14
    2d7c:	df 90       	pop	r13
    2d7e:	08 95       	ret

00002d80 <__unpack_f>:
    2d80:	fc 01       	movw	r30, r24
    2d82:	db 01       	movw	r26, r22
    2d84:	40 81       	ld	r20, Z
    2d86:	51 81       	ldd	r21, Z+1	; 0x01
    2d88:	22 81       	ldd	r18, Z+2	; 0x02
    2d8a:	62 2f       	mov	r22, r18
    2d8c:	6f 77       	andi	r22, 0x7F	; 127
    2d8e:	70 e0       	ldi	r23, 0x00	; 0
    2d90:	22 1f       	adc	r18, r18
    2d92:	22 27       	eor	r18, r18
    2d94:	22 1f       	adc	r18, r18
    2d96:	93 81       	ldd	r25, Z+3	; 0x03
    2d98:	89 2f       	mov	r24, r25
    2d9a:	88 0f       	add	r24, r24
    2d9c:	82 2b       	or	r24, r18
    2d9e:	28 2f       	mov	r18, r24
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	99 1f       	adc	r25, r25
    2da4:	99 27       	eor	r25, r25
    2da6:	99 1f       	adc	r25, r25
    2da8:	11 96       	adiw	r26, 0x01	; 1
    2daa:	9c 93       	st	X, r25
    2dac:	11 97       	sbiw	r26, 0x01	; 1
    2dae:	21 15       	cp	r18, r1
    2db0:	31 05       	cpc	r19, r1
    2db2:	a9 f5       	brne	.+106    	; 0x2e1e <__unpack_f+0x9e>
    2db4:	41 15       	cp	r20, r1
    2db6:	51 05       	cpc	r21, r1
    2db8:	61 05       	cpc	r22, r1
    2dba:	71 05       	cpc	r23, r1
    2dbc:	11 f4       	brne	.+4      	; 0x2dc2 <__unpack_f+0x42>
    2dbe:	82 e0       	ldi	r24, 0x02	; 2
    2dc0:	37 c0       	rjmp	.+110    	; 0x2e30 <__unpack_f+0xb0>
    2dc2:	82 e8       	ldi	r24, 0x82	; 130
    2dc4:	9f ef       	ldi	r25, 0xFF	; 255
    2dc6:	13 96       	adiw	r26, 0x03	; 3
    2dc8:	9c 93       	st	X, r25
    2dca:	8e 93       	st	-X, r24
    2dcc:	12 97       	sbiw	r26, 0x02	; 2
    2dce:	9a 01       	movw	r18, r20
    2dd0:	ab 01       	movw	r20, r22
    2dd2:	67 e0       	ldi	r22, 0x07	; 7
    2dd4:	22 0f       	add	r18, r18
    2dd6:	33 1f       	adc	r19, r19
    2dd8:	44 1f       	adc	r20, r20
    2dda:	55 1f       	adc	r21, r21
    2ddc:	6a 95       	dec	r22
    2dde:	d1 f7       	brne	.-12     	; 0x2dd4 <__unpack_f+0x54>
    2de0:	83 e0       	ldi	r24, 0x03	; 3
    2de2:	8c 93       	st	X, r24
    2de4:	0d c0       	rjmp	.+26     	; 0x2e00 <__unpack_f+0x80>
    2de6:	22 0f       	add	r18, r18
    2de8:	33 1f       	adc	r19, r19
    2dea:	44 1f       	adc	r20, r20
    2dec:	55 1f       	adc	r21, r21
    2dee:	12 96       	adiw	r26, 0x02	; 2
    2df0:	8d 91       	ld	r24, X+
    2df2:	9c 91       	ld	r25, X
    2df4:	13 97       	sbiw	r26, 0x03	; 3
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	13 96       	adiw	r26, 0x03	; 3
    2dfa:	9c 93       	st	X, r25
    2dfc:	8e 93       	st	-X, r24
    2dfe:	12 97       	sbiw	r26, 0x02	; 2
    2e00:	20 30       	cpi	r18, 0x00	; 0
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	38 07       	cpc	r19, r24
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	48 07       	cpc	r20, r24
    2e0a:	80 e4       	ldi	r24, 0x40	; 64
    2e0c:	58 07       	cpc	r21, r24
    2e0e:	58 f3       	brcs	.-42     	; 0x2de6 <__unpack_f+0x66>
    2e10:	14 96       	adiw	r26, 0x04	; 4
    2e12:	2d 93       	st	X+, r18
    2e14:	3d 93       	st	X+, r19
    2e16:	4d 93       	st	X+, r20
    2e18:	5c 93       	st	X, r21
    2e1a:	17 97       	sbiw	r26, 0x07	; 7
    2e1c:	08 95       	ret
    2e1e:	2f 3f       	cpi	r18, 0xFF	; 255
    2e20:	31 05       	cpc	r19, r1
    2e22:	79 f4       	brne	.+30     	; 0x2e42 <__unpack_f+0xc2>
    2e24:	41 15       	cp	r20, r1
    2e26:	51 05       	cpc	r21, r1
    2e28:	61 05       	cpc	r22, r1
    2e2a:	71 05       	cpc	r23, r1
    2e2c:	19 f4       	brne	.+6      	; 0x2e34 <__unpack_f+0xb4>
    2e2e:	84 e0       	ldi	r24, 0x04	; 4
    2e30:	8c 93       	st	X, r24
    2e32:	08 95       	ret
    2e34:	64 ff       	sbrs	r22, 4
    2e36:	03 c0       	rjmp	.+6      	; 0x2e3e <__unpack_f+0xbe>
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	8c 93       	st	X, r24
    2e3c:	12 c0       	rjmp	.+36     	; 0x2e62 <__unpack_f+0xe2>
    2e3e:	1c 92       	st	X, r1
    2e40:	10 c0       	rjmp	.+32     	; 0x2e62 <__unpack_f+0xe2>
    2e42:	2f 57       	subi	r18, 0x7F	; 127
    2e44:	30 40       	sbci	r19, 0x00	; 0
    2e46:	13 96       	adiw	r26, 0x03	; 3
    2e48:	3c 93       	st	X, r19
    2e4a:	2e 93       	st	-X, r18
    2e4c:	12 97       	sbiw	r26, 0x02	; 2
    2e4e:	83 e0       	ldi	r24, 0x03	; 3
    2e50:	8c 93       	st	X, r24
    2e52:	87 e0       	ldi	r24, 0x07	; 7
    2e54:	44 0f       	add	r20, r20
    2e56:	55 1f       	adc	r21, r21
    2e58:	66 1f       	adc	r22, r22
    2e5a:	77 1f       	adc	r23, r23
    2e5c:	8a 95       	dec	r24
    2e5e:	d1 f7       	brne	.-12     	; 0x2e54 <__unpack_f+0xd4>
    2e60:	70 64       	ori	r23, 0x40	; 64
    2e62:	14 96       	adiw	r26, 0x04	; 4
    2e64:	4d 93       	st	X+, r20
    2e66:	5d 93       	st	X+, r21
    2e68:	6d 93       	st	X+, r22
    2e6a:	7c 93       	st	X, r23
    2e6c:	17 97       	sbiw	r26, 0x07	; 7
    2e6e:	08 95       	ret

00002e70 <__fpcmp_parts_f>:
    2e70:	1f 93       	push	r17
    2e72:	dc 01       	movw	r26, r24
    2e74:	fb 01       	movw	r30, r22
    2e76:	9c 91       	ld	r25, X
    2e78:	92 30       	cpi	r25, 0x02	; 2
    2e7a:	08 f4       	brcc	.+2      	; 0x2e7e <__fpcmp_parts_f+0xe>
    2e7c:	47 c0       	rjmp	.+142    	; 0x2f0c <__fpcmp_parts_f+0x9c>
    2e7e:	80 81       	ld	r24, Z
    2e80:	82 30       	cpi	r24, 0x02	; 2
    2e82:	08 f4       	brcc	.+2      	; 0x2e86 <__fpcmp_parts_f+0x16>
    2e84:	43 c0       	rjmp	.+134    	; 0x2f0c <__fpcmp_parts_f+0x9c>
    2e86:	94 30       	cpi	r25, 0x04	; 4
    2e88:	51 f4       	brne	.+20     	; 0x2e9e <__fpcmp_parts_f+0x2e>
    2e8a:	11 96       	adiw	r26, 0x01	; 1
    2e8c:	1c 91       	ld	r17, X
    2e8e:	84 30       	cpi	r24, 0x04	; 4
    2e90:	99 f5       	brne	.+102    	; 0x2ef8 <__fpcmp_parts_f+0x88>
    2e92:	81 81       	ldd	r24, Z+1	; 0x01
    2e94:	68 2f       	mov	r22, r24
    2e96:	70 e0       	ldi	r23, 0x00	; 0
    2e98:	61 1b       	sub	r22, r17
    2e9a:	71 09       	sbc	r23, r1
    2e9c:	3f c0       	rjmp	.+126    	; 0x2f1c <__fpcmp_parts_f+0xac>
    2e9e:	84 30       	cpi	r24, 0x04	; 4
    2ea0:	21 f0       	breq	.+8      	; 0x2eaa <__fpcmp_parts_f+0x3a>
    2ea2:	92 30       	cpi	r25, 0x02	; 2
    2ea4:	31 f4       	brne	.+12     	; 0x2eb2 <__fpcmp_parts_f+0x42>
    2ea6:	82 30       	cpi	r24, 0x02	; 2
    2ea8:	b9 f1       	breq	.+110    	; 0x2f18 <__fpcmp_parts_f+0xa8>
    2eaa:	81 81       	ldd	r24, Z+1	; 0x01
    2eac:	88 23       	and	r24, r24
    2eae:	89 f1       	breq	.+98     	; 0x2f12 <__fpcmp_parts_f+0xa2>
    2eb0:	2d c0       	rjmp	.+90     	; 0x2f0c <__fpcmp_parts_f+0x9c>
    2eb2:	11 96       	adiw	r26, 0x01	; 1
    2eb4:	1c 91       	ld	r17, X
    2eb6:	11 97       	sbiw	r26, 0x01	; 1
    2eb8:	82 30       	cpi	r24, 0x02	; 2
    2eba:	f1 f0       	breq	.+60     	; 0x2ef8 <__fpcmp_parts_f+0x88>
    2ebc:	81 81       	ldd	r24, Z+1	; 0x01
    2ebe:	18 17       	cp	r17, r24
    2ec0:	d9 f4       	brne	.+54     	; 0x2ef8 <__fpcmp_parts_f+0x88>
    2ec2:	12 96       	adiw	r26, 0x02	; 2
    2ec4:	2d 91       	ld	r18, X+
    2ec6:	3c 91       	ld	r19, X
    2ec8:	13 97       	sbiw	r26, 0x03	; 3
    2eca:	82 81       	ldd	r24, Z+2	; 0x02
    2ecc:	93 81       	ldd	r25, Z+3	; 0x03
    2ece:	82 17       	cp	r24, r18
    2ed0:	93 07       	cpc	r25, r19
    2ed2:	94 f0       	brlt	.+36     	; 0x2ef8 <__fpcmp_parts_f+0x88>
    2ed4:	28 17       	cp	r18, r24
    2ed6:	39 07       	cpc	r19, r25
    2ed8:	bc f0       	brlt	.+46     	; 0x2f08 <__fpcmp_parts_f+0x98>
    2eda:	14 96       	adiw	r26, 0x04	; 4
    2edc:	8d 91       	ld	r24, X+
    2ede:	9d 91       	ld	r25, X+
    2ee0:	0d 90       	ld	r0, X+
    2ee2:	bc 91       	ld	r27, X
    2ee4:	a0 2d       	mov	r26, r0
    2ee6:	24 81       	ldd	r18, Z+4	; 0x04
    2ee8:	35 81       	ldd	r19, Z+5	; 0x05
    2eea:	46 81       	ldd	r20, Z+6	; 0x06
    2eec:	57 81       	ldd	r21, Z+7	; 0x07
    2eee:	28 17       	cp	r18, r24
    2ef0:	39 07       	cpc	r19, r25
    2ef2:	4a 07       	cpc	r20, r26
    2ef4:	5b 07       	cpc	r21, r27
    2ef6:	18 f4       	brcc	.+6      	; 0x2efe <__fpcmp_parts_f+0x8e>
    2ef8:	11 23       	and	r17, r17
    2efa:	41 f0       	breq	.+16     	; 0x2f0c <__fpcmp_parts_f+0x9c>
    2efc:	0a c0       	rjmp	.+20     	; 0x2f12 <__fpcmp_parts_f+0xa2>
    2efe:	82 17       	cp	r24, r18
    2f00:	93 07       	cpc	r25, r19
    2f02:	a4 07       	cpc	r26, r20
    2f04:	b5 07       	cpc	r27, r21
    2f06:	40 f4       	brcc	.+16     	; 0x2f18 <__fpcmp_parts_f+0xa8>
    2f08:	11 23       	and	r17, r17
    2f0a:	19 f0       	breq	.+6      	; 0x2f12 <__fpcmp_parts_f+0xa2>
    2f0c:	61 e0       	ldi	r22, 0x01	; 1
    2f0e:	70 e0       	ldi	r23, 0x00	; 0
    2f10:	05 c0       	rjmp	.+10     	; 0x2f1c <__fpcmp_parts_f+0xac>
    2f12:	6f ef       	ldi	r22, 0xFF	; 255
    2f14:	7f ef       	ldi	r23, 0xFF	; 255
    2f16:	02 c0       	rjmp	.+4      	; 0x2f1c <__fpcmp_parts_f+0xac>
    2f18:	60 e0       	ldi	r22, 0x00	; 0
    2f1a:	70 e0       	ldi	r23, 0x00	; 0
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	1f 91       	pop	r17
    2f20:	08 95       	ret

00002f22 <__prologue_saves__>:
    2f22:	2f 92       	push	r2
    2f24:	3f 92       	push	r3
    2f26:	4f 92       	push	r4
    2f28:	5f 92       	push	r5
    2f2a:	6f 92       	push	r6
    2f2c:	7f 92       	push	r7
    2f2e:	8f 92       	push	r8
    2f30:	9f 92       	push	r9
    2f32:	af 92       	push	r10
    2f34:	bf 92       	push	r11
    2f36:	cf 92       	push	r12
    2f38:	df 92       	push	r13
    2f3a:	ef 92       	push	r14
    2f3c:	ff 92       	push	r15
    2f3e:	0f 93       	push	r16
    2f40:	1f 93       	push	r17
    2f42:	cf 93       	push	r28
    2f44:	df 93       	push	r29
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62
    2f4a:	ca 1b       	sub	r28, r26
    2f4c:	db 0b       	sbc	r29, r27
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	09 94       	ijmp

00002f5a <__epilogue_restores__>:
    2f5a:	2a 88       	ldd	r2, Y+18	; 0x12
    2f5c:	39 88       	ldd	r3, Y+17	; 0x11
    2f5e:	48 88       	ldd	r4, Y+16	; 0x10
    2f60:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f62:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f64:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f66:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f68:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f6a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f6c:	b9 84       	ldd	r11, Y+9	; 0x09
    2f6e:	c8 84       	ldd	r12, Y+8	; 0x08
    2f70:	df 80       	ldd	r13, Y+7	; 0x07
    2f72:	ee 80       	ldd	r14, Y+6	; 0x06
    2f74:	fd 80       	ldd	r15, Y+5	; 0x05
    2f76:	0c 81       	ldd	r16, Y+4	; 0x04
    2f78:	1b 81       	ldd	r17, Y+3	; 0x03
    2f7a:	aa 81       	ldd	r26, Y+2	; 0x02
    2f7c:	b9 81       	ldd	r27, Y+1	; 0x01
    2f7e:	ce 0f       	add	r28, r30
    2f80:	d1 1d       	adc	r29, r1
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	ed 01       	movw	r28, r26
    2f8e:	08 95       	ret

00002f90 <asin>:
    2f90:	9f 93       	push	r25
    2f92:	9f 77       	andi	r25, 0x7F	; 127
    2f94:	ee e3       	ldi	r30, 0x3E	; 62
    2f96:	89 37       	cpi	r24, 0x79	; 121
    2f98:	9e 07       	cpc	r25, r30
    2f9a:	20 f4       	brcc	.+8      	; 0x2fa4 <asin+0x14>
    2f9c:	ec e8       	ldi	r30, 0x8C	; 140
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	1f d1       	rcall	.+574    	; 0x31e0 <__fp_powsodd>
    2fa2:	09 c0       	rjmp	.+18     	; 0x2fb6 <asin+0x26>
    2fa4:	d4 d0       	rcall	.+424    	; 0x314e <__fp_arccos>
    2fa6:	90 58       	subi	r25, 0x80	; 128
    2fa8:	a2 ea       	ldi	r26, 0xA2	; 162
    2faa:	2a ed       	ldi	r18, 0xDA	; 218
    2fac:	3f e0       	ldi	r19, 0x0F	; 15
    2fae:	49 ec       	ldi	r20, 0xC9	; 201
    2fb0:	5f e3       	ldi	r21, 0x3F	; 63
    2fb2:	29 d2       	rcall	.+1106   	; 0x3406 <__addsf3x>
    2fb4:	34 d1       	rcall	.+616    	; 0x321e <__fp_round>
    2fb6:	0f 90       	pop	r0
    2fb8:	07 fc       	sbrc	r0, 7
    2fba:	90 58       	subi	r25, 0x80	; 128
    2fbc:	08 95       	ret
    2fbe:	21 d1       	rcall	.+578    	; 0x3202 <__fp_pscA>
    2fc0:	58 f0       	brcs	.+22     	; 0x2fd8 <asin+0x48>
    2fc2:	80 e8       	ldi	r24, 0x80	; 128
    2fc4:	91 e0       	ldi	r25, 0x01	; 1
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <asin+0x3a>
    2fc8:	9e ef       	ldi	r25, 0xFE	; 254
    2fca:	22 d1       	rcall	.+580    	; 0x3210 <__fp_pscB>
    2fcc:	28 f0       	brcs	.+10     	; 0x2fd8 <asin+0x48>
    2fce:	40 e8       	ldi	r20, 0x80	; 128
    2fd0:	51 e0       	ldi	r21, 0x01	; 1
    2fd2:	59 f4       	brne	.+22     	; 0x2fea <atan2+0xe>
    2fd4:	5e ef       	ldi	r21, 0xFE	; 254
    2fd6:	09 c0       	rjmp	.+18     	; 0x2fea <atan2+0xe>
    2fd8:	db c0       	rjmp	.+438    	; 0x3190 <__fp_nan>
    2fda:	54 c1       	rjmp	.+680    	; 0x3284 <__fp_zero>

00002fdc <atan2>:
    2fdc:	e9 2f       	mov	r30, r25
    2fde:	e0 78       	andi	r30, 0x80	; 128
    2fe0:	2f d1       	rcall	.+606    	; 0x3240 <__fp_split3>
    2fe2:	68 f3       	brcs	.-38     	; 0x2fbe <asin+0x2e>
    2fe4:	09 2e       	mov	r0, r25
    2fe6:	05 2a       	or	r0, r21
    2fe8:	c1 f3       	breq	.-16     	; 0x2fda <asin+0x4a>
    2fea:	26 17       	cp	r18, r22
    2fec:	37 07       	cpc	r19, r23
    2fee:	48 07       	cpc	r20, r24
    2ff0:	59 07       	cpc	r21, r25
    2ff2:	38 f0       	brcs	.+14     	; 0x3002 <atan2+0x26>
    2ff4:	0e 2e       	mov	r0, r30
    2ff6:	07 f8       	bld	r0, 7
    2ff8:	e0 25       	eor	r30, r0
    2ffa:	69 f0       	breq	.+26     	; 0x3016 <atan2+0x3a>
    2ffc:	e0 25       	eor	r30, r0
    2ffe:	e0 64       	ori	r30, 0x40	; 64
    3000:	0a c0       	rjmp	.+20     	; 0x3016 <atan2+0x3a>
    3002:	ef 63       	ori	r30, 0x3F	; 63
    3004:	07 f8       	bld	r0, 7
    3006:	00 94       	com	r0
    3008:	07 fa       	bst	r0, 7
    300a:	db 01       	movw	r26, r22
    300c:	b9 01       	movw	r22, r18
    300e:	9d 01       	movw	r18, r26
    3010:	dc 01       	movw	r26, r24
    3012:	ca 01       	movw	r24, r20
    3014:	ad 01       	movw	r20, r26
    3016:	ef 93       	push	r30
    3018:	41 d0       	rcall	.+130    	; 0x309c <__divsf3_pse>
    301a:	01 d1       	rcall	.+514    	; 0x321e <__fp_round>
    301c:	0a d0       	rcall	.+20     	; 0x3032 <atan>
    301e:	5f 91       	pop	r21
    3020:	55 23       	and	r21, r21
    3022:	31 f0       	breq	.+12     	; 0x3030 <atan2+0x54>
    3024:	2b ed       	ldi	r18, 0xDB	; 219
    3026:	3f e0       	ldi	r19, 0x0F	; 15
    3028:	49 e4       	ldi	r20, 0x49	; 73
    302a:	50 fd       	sbrc	r21, 0
    302c:	49 ec       	ldi	r20, 0xC9	; 201
    302e:	cf ca       	rjmp	.-2658   	; 0x25ce <__addsf3>
    3030:	08 95       	ret

00003032 <atan>:
    3032:	df 93       	push	r29
    3034:	dd 27       	eor	r29, r29
    3036:	b9 2f       	mov	r27, r25
    3038:	bf 77       	andi	r27, 0x7F	; 127
    303a:	40 e8       	ldi	r20, 0x80	; 128
    303c:	5f e3       	ldi	r21, 0x3F	; 63
    303e:	16 16       	cp	r1, r22
    3040:	17 06       	cpc	r1, r23
    3042:	48 07       	cpc	r20, r24
    3044:	5b 07       	cpc	r21, r27
    3046:	10 f4       	brcc	.+4      	; 0x304c <atan+0x1a>
    3048:	d9 2f       	mov	r29, r25
    304a:	23 d1       	rcall	.+582    	; 0x3292 <inverse>
    304c:	9f 93       	push	r25
    304e:	8f 93       	push	r24
    3050:	7f 93       	push	r23
    3052:	6f 93       	push	r22
    3054:	c8 d1       	rcall	.+912    	; 0x33e6 <square>
    3056:	e0 ea       	ldi	r30, 0xA0	; 160
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	9d d0       	rcall	.+314    	; 0x3196 <__fp_powser>
    305c:	e0 d0       	rcall	.+448    	; 0x321e <__fp_round>
    305e:	2f 91       	pop	r18
    3060:	3f 91       	pop	r19
    3062:	4f 91       	pop	r20
    3064:	5f 91       	pop	r21
    3066:	26 d1       	rcall	.+588    	; 0x32b4 <__mulsf3x>
    3068:	dd 23       	and	r29, r29
    306a:	49 f0       	breq	.+18     	; 0x307e <atan+0x4c>
    306c:	90 58       	subi	r25, 0x80	; 128
    306e:	a2 ea       	ldi	r26, 0xA2	; 162
    3070:	2a ed       	ldi	r18, 0xDA	; 218
    3072:	3f e0       	ldi	r19, 0x0F	; 15
    3074:	49 ec       	ldi	r20, 0xC9	; 201
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	d0 78       	andi	r29, 0x80	; 128
    307a:	5d 27       	eor	r21, r29
    307c:	c4 d1       	rcall	.+904    	; 0x3406 <__addsf3x>
    307e:	df 91       	pop	r29
    3080:	ce c0       	rjmp	.+412    	; 0x321e <__fp_round>
    3082:	c6 d0       	rcall	.+396    	; 0x3210 <__fp_pscB>
    3084:	40 f0       	brcs	.+16     	; 0x3096 <atan+0x64>
    3086:	bd d0       	rcall	.+378    	; 0x3202 <__fp_pscA>
    3088:	30 f0       	brcs	.+12     	; 0x3096 <atan+0x64>
    308a:	21 f4       	brne	.+8      	; 0x3094 <atan+0x62>
    308c:	5f 3f       	cpi	r21, 0xFF	; 255
    308e:	19 f0       	breq	.+6      	; 0x3096 <atan+0x64>
    3090:	79 c0       	rjmp	.+242    	; 0x3184 <__fp_inf>
    3092:	51 11       	cpse	r21, r1
    3094:	f8 c0       	rjmp	.+496    	; 0x3286 <__fp_szero>
    3096:	7c c0       	rjmp	.+248    	; 0x3190 <__fp_nan>

00003098 <__divsf3x>:
    3098:	d3 d0       	rcall	.+422    	; 0x3240 <__fp_split3>
    309a:	98 f3       	brcs	.-26     	; 0x3082 <atan+0x50>

0000309c <__divsf3_pse>:
    309c:	99 23       	and	r25, r25
    309e:	c9 f3       	breq	.-14     	; 0x3092 <atan+0x60>
    30a0:	55 23       	and	r21, r21
    30a2:	b1 f3       	breq	.-20     	; 0x3090 <atan+0x5e>
    30a4:	95 1b       	sub	r25, r21
    30a6:	55 0b       	sbc	r21, r21
    30a8:	bb 27       	eor	r27, r27
    30aa:	aa 27       	eor	r26, r26
    30ac:	62 17       	cp	r22, r18
    30ae:	73 07       	cpc	r23, r19
    30b0:	84 07       	cpc	r24, r20
    30b2:	38 f0       	brcs	.+14     	; 0x30c2 <__divsf3_pse+0x26>
    30b4:	9f 5f       	subi	r25, 0xFF	; 255
    30b6:	5f 4f       	sbci	r21, 0xFF	; 255
    30b8:	22 0f       	add	r18, r18
    30ba:	33 1f       	adc	r19, r19
    30bc:	44 1f       	adc	r20, r20
    30be:	aa 1f       	adc	r26, r26
    30c0:	a9 f3       	breq	.-22     	; 0x30ac <__divsf3_pse+0x10>
    30c2:	33 d0       	rcall	.+102    	; 0x312a <__divsf3_pse+0x8e>
    30c4:	0e 2e       	mov	r0, r30
    30c6:	3a f0       	brmi	.+14     	; 0x30d6 <__divsf3_pse+0x3a>
    30c8:	e0 e8       	ldi	r30, 0x80	; 128
    30ca:	30 d0       	rcall	.+96     	; 0x312c <__divsf3_pse+0x90>
    30cc:	91 50       	subi	r25, 0x01	; 1
    30ce:	50 40       	sbci	r21, 0x00	; 0
    30d0:	e6 95       	lsr	r30
    30d2:	00 1c       	adc	r0, r0
    30d4:	ca f7       	brpl	.-14     	; 0x30c8 <__divsf3_pse+0x2c>
    30d6:	29 d0       	rcall	.+82     	; 0x312a <__divsf3_pse+0x8e>
    30d8:	fe 2f       	mov	r31, r30
    30da:	27 d0       	rcall	.+78     	; 0x312a <__divsf3_pse+0x8e>
    30dc:	66 0f       	add	r22, r22
    30de:	77 1f       	adc	r23, r23
    30e0:	88 1f       	adc	r24, r24
    30e2:	bb 1f       	adc	r27, r27
    30e4:	26 17       	cp	r18, r22
    30e6:	37 07       	cpc	r19, r23
    30e8:	48 07       	cpc	r20, r24
    30ea:	ab 07       	cpc	r26, r27
    30ec:	b0 e8       	ldi	r27, 0x80	; 128
    30ee:	09 f0       	breq	.+2      	; 0x30f2 <__divsf3_pse+0x56>
    30f0:	bb 0b       	sbc	r27, r27
    30f2:	80 2d       	mov	r24, r0
    30f4:	bf 01       	movw	r22, r30
    30f6:	ff 27       	eor	r31, r31
    30f8:	93 58       	subi	r25, 0x83	; 131
    30fa:	5f 4f       	sbci	r21, 0xFF	; 255
    30fc:	2a f0       	brmi	.+10     	; 0x3108 <__divsf3_pse+0x6c>
    30fe:	9e 3f       	cpi	r25, 0xFE	; 254
    3100:	51 05       	cpc	r21, r1
    3102:	68 f0       	brcs	.+26     	; 0x311e <__divsf3_pse+0x82>
    3104:	3f c0       	rjmp	.+126    	; 0x3184 <__fp_inf>
    3106:	bf c0       	rjmp	.+382    	; 0x3286 <__fp_szero>
    3108:	5f 3f       	cpi	r21, 0xFF	; 255
    310a:	ec f3       	brlt	.-6      	; 0x3106 <__divsf3_pse+0x6a>
    310c:	98 3e       	cpi	r25, 0xE8	; 232
    310e:	dc f3       	brlt	.-10     	; 0x3106 <__divsf3_pse+0x6a>
    3110:	86 95       	lsr	r24
    3112:	77 95       	ror	r23
    3114:	67 95       	ror	r22
    3116:	b7 95       	ror	r27
    3118:	f7 95       	ror	r31
    311a:	9f 5f       	subi	r25, 0xFF	; 255
    311c:	c9 f7       	brne	.-14     	; 0x3110 <__divsf3_pse+0x74>
    311e:	88 0f       	add	r24, r24
    3120:	91 1d       	adc	r25, r1
    3122:	96 95       	lsr	r25
    3124:	87 95       	ror	r24
    3126:	97 f9       	bld	r25, 7
    3128:	08 95       	ret
    312a:	e1 e0       	ldi	r30, 0x01	; 1
    312c:	66 0f       	add	r22, r22
    312e:	77 1f       	adc	r23, r23
    3130:	88 1f       	adc	r24, r24
    3132:	bb 1f       	adc	r27, r27
    3134:	62 17       	cp	r22, r18
    3136:	73 07       	cpc	r23, r19
    3138:	84 07       	cpc	r24, r20
    313a:	ba 07       	cpc	r27, r26
    313c:	20 f0       	brcs	.+8      	; 0x3146 <__divsf3_pse+0xaa>
    313e:	62 1b       	sub	r22, r18
    3140:	73 0b       	sbc	r23, r19
    3142:	84 0b       	sbc	r24, r20
    3144:	ba 0b       	sbc	r27, r26
    3146:	ee 1f       	adc	r30, r30
    3148:	88 f7       	brcc	.-30     	; 0x312c <__divsf3_pse+0x90>
    314a:	e0 95       	com	r30
    314c:	08 95       	ret

0000314e <__fp_arccos>:
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	1f 93       	push	r17
    3154:	0f 93       	push	r16
    3156:	8b 01       	movw	r16, r22
    3158:	ec 01       	movw	r28, r24
    315a:	ed ec       	ldi	r30, 0xCD	; 205
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	1b d0       	rcall	.+54     	; 0x3196 <__fp_powser>
    3160:	5e d0       	rcall	.+188    	; 0x321e <__fp_round>
    3162:	98 01       	movw	r18, r16
    3164:	ae 01       	movw	r20, r28
    3166:	8b 01       	movw	r16, r22
    3168:	ec 01       	movw	r28, r24
    316a:	60 e0       	ldi	r22, 0x00	; 0
    316c:	70 e0       	ldi	r23, 0x00	; 0
    316e:	80 e8       	ldi	r24, 0x80	; 128
    3170:	9f e3       	ldi	r25, 0x3F	; 63
    3172:	fc d9       	rcall	.-3080   	; 0x256c <__subsf3>
    3174:	fa d0       	rcall	.+500    	; 0x336a <sqrt>
    3176:	98 01       	movw	r18, r16
    3178:	ae 01       	movw	r20, r28
    317a:	0f 91       	pop	r16
    317c:	1f 91       	pop	r17
    317e:	cf 91       	pop	r28
    3180:	df 91       	pop	r29
    3182:	98 c0       	rjmp	.+304    	; 0x32b4 <__mulsf3x>

00003184 <__fp_inf>:
    3184:	97 f9       	bld	r25, 7
    3186:	9f 67       	ori	r25, 0x7F	; 127
    3188:	80 e8       	ldi	r24, 0x80	; 128
    318a:	70 e0       	ldi	r23, 0x00	; 0
    318c:	60 e0       	ldi	r22, 0x00	; 0
    318e:	08 95       	ret

00003190 <__fp_nan>:
    3190:	9f ef       	ldi	r25, 0xFF	; 255
    3192:	80 ec       	ldi	r24, 0xC0	; 192
    3194:	08 95       	ret

00003196 <__fp_powser>:
    3196:	df 93       	push	r29
    3198:	cf 93       	push	r28
    319a:	1f 93       	push	r17
    319c:	0f 93       	push	r16
    319e:	ff 92       	push	r15
    31a0:	ef 92       	push	r14
    31a2:	df 92       	push	r13
    31a4:	7b 01       	movw	r14, r22
    31a6:	8c 01       	movw	r16, r24
    31a8:	68 94       	set
    31aa:	05 c0       	rjmp	.+10     	; 0x31b6 <__fp_powser+0x20>
    31ac:	da 2e       	mov	r13, r26
    31ae:	ef 01       	movw	r28, r30
    31b0:	81 d0       	rcall	.+258    	; 0x32b4 <__mulsf3x>
    31b2:	fe 01       	movw	r30, r28
    31b4:	e8 94       	clt
    31b6:	a5 91       	lpm	r26, Z+
    31b8:	25 91       	lpm	r18, Z+
    31ba:	35 91       	lpm	r19, Z+
    31bc:	45 91       	lpm	r20, Z+
    31be:	55 91       	lpm	r21, Z+
    31c0:	ae f3       	brts	.-22     	; 0x31ac <__fp_powser+0x16>
    31c2:	ef 01       	movw	r28, r30
    31c4:	20 d1       	rcall	.+576    	; 0x3406 <__addsf3x>
    31c6:	fe 01       	movw	r30, r28
    31c8:	97 01       	movw	r18, r14
    31ca:	a8 01       	movw	r20, r16
    31cc:	da 94       	dec	r13
    31ce:	79 f7       	brne	.-34     	; 0x31ae <__fp_powser+0x18>
    31d0:	df 90       	pop	r13
    31d2:	ef 90       	pop	r14
    31d4:	ff 90       	pop	r15
    31d6:	0f 91       	pop	r16
    31d8:	1f 91       	pop	r17
    31da:	cf 91       	pop	r28
    31dc:	df 91       	pop	r29
    31de:	08 95       	ret

000031e0 <__fp_powsodd>:
    31e0:	9f 93       	push	r25
    31e2:	8f 93       	push	r24
    31e4:	7f 93       	push	r23
    31e6:	6f 93       	push	r22
    31e8:	ff 93       	push	r31
    31ea:	ef 93       	push	r30
    31ec:	9b 01       	movw	r18, r22
    31ee:	ac 01       	movw	r20, r24
    31f0:	1b da       	rcall	.-3018   	; 0x2628 <__mulsf3>
    31f2:	ef 91       	pop	r30
    31f4:	ff 91       	pop	r31
    31f6:	cf df       	rcall	.-98     	; 0x3196 <__fp_powser>
    31f8:	2f 91       	pop	r18
    31fa:	3f 91       	pop	r19
    31fc:	4f 91       	pop	r20
    31fe:	5f 91       	pop	r21
    3200:	13 ca       	rjmp	.-3034   	; 0x2628 <__mulsf3>

00003202 <__fp_pscA>:
    3202:	00 24       	eor	r0, r0
    3204:	0a 94       	dec	r0
    3206:	16 16       	cp	r1, r22
    3208:	17 06       	cpc	r1, r23
    320a:	18 06       	cpc	r1, r24
    320c:	09 06       	cpc	r0, r25
    320e:	08 95       	ret

00003210 <__fp_pscB>:
    3210:	00 24       	eor	r0, r0
    3212:	0a 94       	dec	r0
    3214:	12 16       	cp	r1, r18
    3216:	13 06       	cpc	r1, r19
    3218:	14 06       	cpc	r1, r20
    321a:	05 06       	cpc	r0, r21
    321c:	08 95       	ret

0000321e <__fp_round>:
    321e:	09 2e       	mov	r0, r25
    3220:	03 94       	inc	r0
    3222:	00 0c       	add	r0, r0
    3224:	11 f4       	brne	.+4      	; 0x322a <__fp_round+0xc>
    3226:	88 23       	and	r24, r24
    3228:	52 f0       	brmi	.+20     	; 0x323e <__fp_round+0x20>
    322a:	bb 0f       	add	r27, r27
    322c:	40 f4       	brcc	.+16     	; 0x323e <__fp_round+0x20>
    322e:	bf 2b       	or	r27, r31
    3230:	11 f4       	brne	.+4      	; 0x3236 <__fp_round+0x18>
    3232:	60 ff       	sbrs	r22, 0
    3234:	04 c0       	rjmp	.+8      	; 0x323e <__fp_round+0x20>
    3236:	6f 5f       	subi	r22, 0xFF	; 255
    3238:	7f 4f       	sbci	r23, 0xFF	; 255
    323a:	8f 4f       	sbci	r24, 0xFF	; 255
    323c:	9f 4f       	sbci	r25, 0xFF	; 255
    323e:	08 95       	ret

00003240 <__fp_split3>:
    3240:	57 fd       	sbrc	r21, 7
    3242:	90 58       	subi	r25, 0x80	; 128
    3244:	44 0f       	add	r20, r20
    3246:	55 1f       	adc	r21, r21
    3248:	59 f0       	breq	.+22     	; 0x3260 <__fp_splitA+0x10>
    324a:	5f 3f       	cpi	r21, 0xFF	; 255
    324c:	71 f0       	breq	.+28     	; 0x326a <__fp_splitA+0x1a>
    324e:	47 95       	ror	r20

00003250 <__fp_splitA>:
    3250:	88 0f       	add	r24, r24
    3252:	97 fb       	bst	r25, 7
    3254:	99 1f       	adc	r25, r25
    3256:	61 f0       	breq	.+24     	; 0x3270 <__fp_splitA+0x20>
    3258:	9f 3f       	cpi	r25, 0xFF	; 255
    325a:	79 f0       	breq	.+30     	; 0x327a <__fp_splitA+0x2a>
    325c:	87 95       	ror	r24
    325e:	08 95       	ret
    3260:	12 16       	cp	r1, r18
    3262:	13 06       	cpc	r1, r19
    3264:	14 06       	cpc	r1, r20
    3266:	55 1f       	adc	r21, r21
    3268:	f2 cf       	rjmp	.-28     	; 0x324e <__fp_split3+0xe>
    326a:	46 95       	lsr	r20
    326c:	f1 df       	rcall	.-30     	; 0x3250 <__fp_splitA>
    326e:	08 c0       	rjmp	.+16     	; 0x3280 <__fp_splitA+0x30>
    3270:	16 16       	cp	r1, r22
    3272:	17 06       	cpc	r1, r23
    3274:	18 06       	cpc	r1, r24
    3276:	99 1f       	adc	r25, r25
    3278:	f1 cf       	rjmp	.-30     	; 0x325c <__fp_splitA+0xc>
    327a:	86 95       	lsr	r24
    327c:	71 05       	cpc	r23, r1
    327e:	61 05       	cpc	r22, r1
    3280:	08 94       	sec
    3282:	08 95       	ret

00003284 <__fp_zero>:
    3284:	e8 94       	clt

00003286 <__fp_szero>:
    3286:	bb 27       	eor	r27, r27
    3288:	66 27       	eor	r22, r22
    328a:	77 27       	eor	r23, r23
    328c:	cb 01       	movw	r24, r22
    328e:	97 f9       	bld	r25, 7
    3290:	08 95       	ret

00003292 <inverse>:
    3292:	9b 01       	movw	r18, r22
    3294:	ac 01       	movw	r20, r24
    3296:	60 e0       	ldi	r22, 0x00	; 0
    3298:	70 e0       	ldi	r23, 0x00	; 0
    329a:	80 e8       	ldi	r24, 0x80	; 128
    329c:	9f e3       	ldi	r25, 0x3F	; 63
    329e:	be ca       	rjmp	.-2692   	; 0x281c <__divsf3>
    32a0:	b0 df       	rcall	.-160    	; 0x3202 <__fp_pscA>
    32a2:	28 f0       	brcs	.+10     	; 0x32ae <inverse+0x1c>
    32a4:	b5 df       	rcall	.-150    	; 0x3210 <__fp_pscB>
    32a6:	18 f0       	brcs	.+6      	; 0x32ae <inverse+0x1c>
    32a8:	95 23       	and	r25, r21
    32aa:	09 f0       	breq	.+2      	; 0x32ae <inverse+0x1c>
    32ac:	6b cf       	rjmp	.-298    	; 0x3184 <__fp_inf>
    32ae:	70 cf       	rjmp	.-288    	; 0x3190 <__fp_nan>
    32b0:	11 24       	eor	r1, r1
    32b2:	e9 cf       	rjmp	.-46     	; 0x3286 <__fp_szero>

000032b4 <__mulsf3x>:
    32b4:	c5 df       	rcall	.-118    	; 0x3240 <__fp_split3>
    32b6:	a0 f3       	brcs	.-24     	; 0x32a0 <inverse+0xe>

000032b8 <__mulsf3_pse>:
    32b8:	95 9f       	mul	r25, r21
    32ba:	d1 f3       	breq	.-12     	; 0x32b0 <inverse+0x1e>
    32bc:	95 0f       	add	r25, r21
    32be:	50 e0       	ldi	r21, 0x00	; 0
    32c0:	55 1f       	adc	r21, r21
    32c2:	62 9f       	mul	r22, r18
    32c4:	f0 01       	movw	r30, r0
    32c6:	72 9f       	mul	r23, r18
    32c8:	bb 27       	eor	r27, r27
    32ca:	f0 0d       	add	r31, r0
    32cc:	b1 1d       	adc	r27, r1
    32ce:	63 9f       	mul	r22, r19
    32d0:	aa 27       	eor	r26, r26
    32d2:	f0 0d       	add	r31, r0
    32d4:	b1 1d       	adc	r27, r1
    32d6:	aa 1f       	adc	r26, r26
    32d8:	64 9f       	mul	r22, r20
    32da:	66 27       	eor	r22, r22
    32dc:	b0 0d       	add	r27, r0
    32de:	a1 1d       	adc	r26, r1
    32e0:	66 1f       	adc	r22, r22
    32e2:	82 9f       	mul	r24, r18
    32e4:	22 27       	eor	r18, r18
    32e6:	b0 0d       	add	r27, r0
    32e8:	a1 1d       	adc	r26, r1
    32ea:	62 1f       	adc	r22, r18
    32ec:	73 9f       	mul	r23, r19
    32ee:	b0 0d       	add	r27, r0
    32f0:	a1 1d       	adc	r26, r1
    32f2:	62 1f       	adc	r22, r18
    32f4:	83 9f       	mul	r24, r19
    32f6:	a0 0d       	add	r26, r0
    32f8:	61 1d       	adc	r22, r1
    32fa:	22 1f       	adc	r18, r18
    32fc:	74 9f       	mul	r23, r20
    32fe:	33 27       	eor	r19, r19
    3300:	a0 0d       	add	r26, r0
    3302:	61 1d       	adc	r22, r1
    3304:	23 1f       	adc	r18, r19
    3306:	84 9f       	mul	r24, r20
    3308:	60 0d       	add	r22, r0
    330a:	21 1d       	adc	r18, r1
    330c:	82 2f       	mov	r24, r18
    330e:	76 2f       	mov	r23, r22
    3310:	6a 2f       	mov	r22, r26
    3312:	11 24       	eor	r1, r1
    3314:	9f 57       	subi	r25, 0x7F	; 127
    3316:	50 40       	sbci	r21, 0x00	; 0
    3318:	8a f0       	brmi	.+34     	; 0x333c <__mulsf3_pse+0x84>
    331a:	e1 f0       	breq	.+56     	; 0x3354 <__mulsf3_pse+0x9c>
    331c:	88 23       	and	r24, r24
    331e:	4a f0       	brmi	.+18     	; 0x3332 <__mulsf3_pse+0x7a>
    3320:	ee 0f       	add	r30, r30
    3322:	ff 1f       	adc	r31, r31
    3324:	bb 1f       	adc	r27, r27
    3326:	66 1f       	adc	r22, r22
    3328:	77 1f       	adc	r23, r23
    332a:	88 1f       	adc	r24, r24
    332c:	91 50       	subi	r25, 0x01	; 1
    332e:	50 40       	sbci	r21, 0x00	; 0
    3330:	a9 f7       	brne	.-22     	; 0x331c <__mulsf3_pse+0x64>
    3332:	9e 3f       	cpi	r25, 0xFE	; 254
    3334:	51 05       	cpc	r21, r1
    3336:	70 f0       	brcs	.+28     	; 0x3354 <__mulsf3_pse+0x9c>
    3338:	25 cf       	rjmp	.-438    	; 0x3184 <__fp_inf>
    333a:	a5 cf       	rjmp	.-182    	; 0x3286 <__fp_szero>
    333c:	5f 3f       	cpi	r21, 0xFF	; 255
    333e:	ec f3       	brlt	.-6      	; 0x333a <__mulsf3_pse+0x82>
    3340:	98 3e       	cpi	r25, 0xE8	; 232
    3342:	dc f3       	brlt	.-10     	; 0x333a <__mulsf3_pse+0x82>
    3344:	86 95       	lsr	r24
    3346:	77 95       	ror	r23
    3348:	67 95       	ror	r22
    334a:	b7 95       	ror	r27
    334c:	f7 95       	ror	r31
    334e:	e7 95       	ror	r30
    3350:	9f 5f       	subi	r25, 0xFF	; 255
    3352:	c1 f7       	brne	.-16     	; 0x3344 <__mulsf3_pse+0x8c>
    3354:	fe 2b       	or	r31, r30
    3356:	88 0f       	add	r24, r24
    3358:	91 1d       	adc	r25, r1
    335a:	96 95       	lsr	r25
    335c:	87 95       	ror	r24
    335e:	97 f9       	bld	r25, 7
    3360:	08 95       	ret
    3362:	11 f4       	brne	.+4      	; 0x3368 <__mulsf3_pse+0xb0>
    3364:	0e f4       	brtc	.+2      	; 0x3368 <__mulsf3_pse+0xb0>
    3366:	14 cf       	rjmp	.-472    	; 0x3190 <__fp_nan>
    3368:	a1 c0       	rjmp	.+322    	; 0x34ac <__fp_mpack>

0000336a <sqrt>:
    336a:	72 df       	rcall	.-284    	; 0x3250 <__fp_splitA>
    336c:	d0 f3       	brcs	.-12     	; 0x3362 <__mulsf3_pse+0xaa>
    336e:	99 23       	and	r25, r25
    3370:	d9 f3       	breq	.-10     	; 0x3368 <__mulsf3_pse+0xb0>
    3372:	ce f3       	brts	.-14     	; 0x3366 <__mulsf3_pse+0xae>
    3374:	9f 57       	subi	r25, 0x7F	; 127
    3376:	55 0b       	sbc	r21, r21
    3378:	87 ff       	sbrs	r24, 7
    337a:	a6 d0       	rcall	.+332    	; 0x34c8 <__fp_norm2>
    337c:	00 24       	eor	r0, r0
    337e:	a0 e6       	ldi	r26, 0x60	; 96
    3380:	40 ea       	ldi	r20, 0xA0	; 160
    3382:	90 01       	movw	r18, r0
    3384:	80 58       	subi	r24, 0x80	; 128
    3386:	56 95       	lsr	r21
    3388:	97 95       	ror	r25
    338a:	28 f4       	brcc	.+10     	; 0x3396 <sqrt+0x2c>
    338c:	80 5c       	subi	r24, 0xC0	; 192
    338e:	66 0f       	add	r22, r22
    3390:	77 1f       	adc	r23, r23
    3392:	88 1f       	adc	r24, r24
    3394:	20 f0       	brcs	.+8      	; 0x339e <sqrt+0x34>
    3396:	26 17       	cp	r18, r22
    3398:	37 07       	cpc	r19, r23
    339a:	48 07       	cpc	r20, r24
    339c:	30 f4       	brcc	.+12     	; 0x33aa <sqrt+0x40>
    339e:	62 1b       	sub	r22, r18
    33a0:	73 0b       	sbc	r23, r19
    33a2:	84 0b       	sbc	r24, r20
    33a4:	20 29       	or	r18, r0
    33a6:	31 29       	or	r19, r1
    33a8:	4a 2b       	or	r20, r26
    33aa:	a6 95       	lsr	r26
    33ac:	17 94       	ror	r1
    33ae:	07 94       	ror	r0
    33b0:	20 25       	eor	r18, r0
    33b2:	31 25       	eor	r19, r1
    33b4:	4a 27       	eor	r20, r26
    33b6:	58 f7       	brcc	.-42     	; 0x338e <sqrt+0x24>
    33b8:	66 0f       	add	r22, r22
    33ba:	77 1f       	adc	r23, r23
    33bc:	88 1f       	adc	r24, r24
    33be:	20 f0       	brcs	.+8      	; 0x33c8 <sqrt+0x5e>
    33c0:	26 17       	cp	r18, r22
    33c2:	37 07       	cpc	r19, r23
    33c4:	48 07       	cpc	r20, r24
    33c6:	30 f4       	brcc	.+12     	; 0x33d4 <sqrt+0x6a>
    33c8:	62 0b       	sbc	r22, r18
    33ca:	73 0b       	sbc	r23, r19
    33cc:	84 0b       	sbc	r24, r20
    33ce:	20 0d       	add	r18, r0
    33d0:	31 1d       	adc	r19, r1
    33d2:	41 1d       	adc	r20, r1
    33d4:	a0 95       	com	r26
    33d6:	81 f7       	brne	.-32     	; 0x33b8 <sqrt+0x4e>
    33d8:	b9 01       	movw	r22, r18
    33da:	84 2f       	mov	r24, r20
    33dc:	91 58       	subi	r25, 0x81	; 129
    33de:	88 0f       	add	r24, r24
    33e0:	96 95       	lsr	r25
    33e2:	87 95       	ror	r24
    33e4:	08 95       	ret

000033e6 <square>:
    33e6:	9b 01       	movw	r18, r22
    33e8:	ac 01       	movw	r20, r24
    33ea:	1e c9       	rjmp	.-3524   	; 0x2628 <__mulsf3>
    33ec:	0a df       	rcall	.-492    	; 0x3202 <__fp_pscA>
    33ee:	30 f0       	brcs	.+12     	; 0x33fc <square+0x16>
    33f0:	0f df       	rcall	.-482    	; 0x3210 <__fp_pscB>
    33f2:	20 f0       	brcs	.+8      	; 0x33fc <square+0x16>
    33f4:	31 f4       	brne	.+12     	; 0x3402 <square+0x1c>
    33f6:	9f 3f       	cpi	r25, 0xFF	; 255
    33f8:	11 f4       	brne	.+4      	; 0x33fe <square+0x18>
    33fa:	1e f4       	brtc	.+6      	; 0x3402 <square+0x1c>
    33fc:	c9 ce       	rjmp	.-622    	; 0x3190 <__fp_nan>
    33fe:	0e f4       	brtc	.+2      	; 0x3402 <square+0x1c>
    3400:	e0 95       	com	r30
    3402:	e7 fb       	bst	r30, 7
    3404:	bf ce       	rjmp	.-642    	; 0x3184 <__fp_inf>

00003406 <__addsf3x>:
    3406:	e9 2f       	mov	r30, r25
    3408:	1b df       	rcall	.-458    	; 0x3240 <__fp_split3>
    340a:	80 f3       	brcs	.-32     	; 0x33ec <square+0x6>
    340c:	ba 17       	cp	r27, r26
    340e:	62 07       	cpc	r22, r18
    3410:	73 07       	cpc	r23, r19
    3412:	84 07       	cpc	r24, r20
    3414:	95 07       	cpc	r25, r21
    3416:	18 f0       	brcs	.+6      	; 0x341e <__addsf3x+0x18>
    3418:	71 f4       	brne	.+28     	; 0x3436 <__addsf3x+0x30>
    341a:	9e f5       	brtc	.+102    	; 0x3482 <__addsf3x+0x7c>
    341c:	33 cf       	rjmp	.-410    	; 0x3284 <__fp_zero>
    341e:	0e f4       	brtc	.+2      	; 0x3422 <__addsf3x+0x1c>
    3420:	e0 95       	com	r30
    3422:	0b 2e       	mov	r0, r27
    3424:	ba 2f       	mov	r27, r26
    3426:	a0 2d       	mov	r26, r0
    3428:	0b 01       	movw	r0, r22
    342a:	b9 01       	movw	r22, r18
    342c:	90 01       	movw	r18, r0
    342e:	0c 01       	movw	r0, r24
    3430:	ca 01       	movw	r24, r20
    3432:	a0 01       	movw	r20, r0
    3434:	11 24       	eor	r1, r1
    3436:	ff 27       	eor	r31, r31
    3438:	59 1b       	sub	r21, r25
    343a:	99 f0       	breq	.+38     	; 0x3462 <__addsf3x+0x5c>
    343c:	59 3f       	cpi	r21, 0xF9	; 249
    343e:	50 f4       	brcc	.+20     	; 0x3454 <__addsf3x+0x4e>
    3440:	50 3e       	cpi	r21, 0xE0	; 224
    3442:	68 f1       	brcs	.+90     	; 0x349e <__addsf3x+0x98>
    3444:	1a 16       	cp	r1, r26
    3446:	f0 40       	sbci	r31, 0x00	; 0
    3448:	a2 2f       	mov	r26, r18
    344a:	23 2f       	mov	r18, r19
    344c:	34 2f       	mov	r19, r20
    344e:	44 27       	eor	r20, r20
    3450:	58 5f       	subi	r21, 0xF8	; 248
    3452:	f3 cf       	rjmp	.-26     	; 0x343a <__addsf3x+0x34>
    3454:	46 95       	lsr	r20
    3456:	37 95       	ror	r19
    3458:	27 95       	ror	r18
    345a:	a7 95       	ror	r26
    345c:	f0 40       	sbci	r31, 0x00	; 0
    345e:	53 95       	inc	r21
    3460:	c9 f7       	brne	.-14     	; 0x3454 <__addsf3x+0x4e>
    3462:	7e f4       	brtc	.+30     	; 0x3482 <__addsf3x+0x7c>
    3464:	1f 16       	cp	r1, r31
    3466:	ba 0b       	sbc	r27, r26
    3468:	62 0b       	sbc	r22, r18
    346a:	73 0b       	sbc	r23, r19
    346c:	84 0b       	sbc	r24, r20
    346e:	ba f0       	brmi	.+46     	; 0x349e <__addsf3x+0x98>
    3470:	91 50       	subi	r25, 0x01	; 1
    3472:	a1 f0       	breq	.+40     	; 0x349c <__addsf3x+0x96>
    3474:	ff 0f       	add	r31, r31
    3476:	bb 1f       	adc	r27, r27
    3478:	66 1f       	adc	r22, r22
    347a:	77 1f       	adc	r23, r23
    347c:	88 1f       	adc	r24, r24
    347e:	c2 f7       	brpl	.-16     	; 0x3470 <__addsf3x+0x6a>
    3480:	0e c0       	rjmp	.+28     	; 0x349e <__addsf3x+0x98>
    3482:	ba 0f       	add	r27, r26
    3484:	62 1f       	adc	r22, r18
    3486:	73 1f       	adc	r23, r19
    3488:	84 1f       	adc	r24, r20
    348a:	48 f4       	brcc	.+18     	; 0x349e <__addsf3x+0x98>
    348c:	87 95       	ror	r24
    348e:	77 95       	ror	r23
    3490:	67 95       	ror	r22
    3492:	b7 95       	ror	r27
    3494:	f7 95       	ror	r31
    3496:	9e 3f       	cpi	r25, 0xFE	; 254
    3498:	08 f0       	brcs	.+2      	; 0x349c <__addsf3x+0x96>
    349a:	b3 cf       	rjmp	.-154    	; 0x3402 <square+0x1c>
    349c:	93 95       	inc	r25
    349e:	88 0f       	add	r24, r24
    34a0:	08 f0       	brcs	.+2      	; 0x34a4 <__addsf3x+0x9e>
    34a2:	99 27       	eor	r25, r25
    34a4:	ee 0f       	add	r30, r30
    34a6:	97 95       	ror	r25
    34a8:	87 95       	ror	r24
    34aa:	08 95       	ret

000034ac <__fp_mpack>:
    34ac:	9f 3f       	cpi	r25, 0xFF	; 255
    34ae:	31 f0       	breq	.+12     	; 0x34bc <__fp_mpack_finite+0xc>

000034b0 <__fp_mpack_finite>:
    34b0:	91 50       	subi	r25, 0x01	; 1
    34b2:	20 f4       	brcc	.+8      	; 0x34bc <__fp_mpack_finite+0xc>
    34b4:	87 95       	ror	r24
    34b6:	77 95       	ror	r23
    34b8:	67 95       	ror	r22
    34ba:	b7 95       	ror	r27
    34bc:	88 0f       	add	r24, r24
    34be:	91 1d       	adc	r25, r1
    34c0:	96 95       	lsr	r25
    34c2:	87 95       	ror	r24
    34c4:	97 f9       	bld	r25, 7
    34c6:	08 95       	ret

000034c8 <__fp_norm2>:
    34c8:	91 50       	subi	r25, 0x01	; 1
    34ca:	50 40       	sbci	r21, 0x00	; 0
    34cc:	66 0f       	add	r22, r22
    34ce:	77 1f       	adc	r23, r23
    34d0:	88 1f       	adc	r24, r24
    34d2:	d2 f7       	brpl	.-12     	; 0x34c8 <__fp_norm2>
    34d4:	08 95       	ret

000034d6 <_exit>:
    34d6:	f8 94       	cli

000034d8 <__stop_program>:
    34d8:	ff cf       	rjmp	.-2      	; 0x34d8 <__stop_program>
